"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3020],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:2,tags:["Network","ai","Neural"]},o="Neural Network",l={unversionedId:"ai/neural-network",id:"ai/neural-network",title:"Neural Network",description:"Install Packges",source:"@site/docs/ai/neural-network.md",sourceDirName:"ai",slug:"/ai/neural-network",permalink:"/Wisdom-Hub/ai/neural-network",draft:!1,tags:[{label:"Network",permalink:"/Wisdom-Hub/tags/network"},{label:"ai",permalink:"/Wisdom-Hub/tags/ai"},{label:"Neural",permalink:"/Wisdom-Hub/tags/neural"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Network","ai","Neural"]},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/Wisdom-Hub/ai/python-for-ai"},next:{title:"Geenrative AI",permalink:"/Wisdom-Hub/ai/generative-ai"}},s={},u=[{value:"Install Packges",id:"install-packges",level:2},{value:"Check GPU Support",id:"check-gpu-support",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Neuron",id:"neuron",level:3},{value:"Activation function",id:"activation-function",level:3},{value:"Linear Activation Function",id:"linear-activation-function",level:4},{value:"Lose function",id:"lose-function",level:3},{value:"Optimization Methods",id:"optimization-methods",level:3},{value:"Gradient",id:"gradient",level:4},{value:"Gradient Descent",id:"gradient-descent",level:4}],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"neural-network"},"Neural Network"),(0,a.kt)("h2",{id:"install-packges"},"Install Packges"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install --upgrade pip --break-system-packages\n# if you have permission issue\n# sudo chmod a+rwx /usr/lib/python3.12/ -R\n\n\n# https://wiki.archlinux.org/title/GPGPU\nsudo pamac install opencl-amd --no-confirm\n# Or sudo pamac install rocm-core rocm-hip-sdk rocm-opencl-sdk --no-confirm\nsudo usermod -a -G render,video $LOGNAME\nrocminfo\n\n# If you are using RDNA or RDNA 2 architecture like AMD Radeon RX 6500 XT you may need to follow this step\nsudo nano ~/.profile\nexport HSA_OVERRIDE_GFX_VERSION=10.3.0\nexport ROC_ENABLE_PRE_VEGA=1\n\n\n# https://www.tensorflow.org/install/pip\npip uninstall tensorflow-rocm numpy\npip install tensorflow --break-system-packages\n\npip install https://repo.radeon.com/rocm/manylinux/rocm-rel-6.1.3/tensorflow_rocm-2.15.1-cp310-cp310-manylinux_2_28_x86_64.whl numpy==1.26.4 --break-system-packages\n\n\n# https://pytorch.org/\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.1 --break-system-packages\n")),(0,a.kt)("h2",{id:"check-gpu-support"},"Check GPU Support"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import tensorflow as tf   # TensorFlow registers PluggableDevices here\nimport torch as torch\n\ntf.config.list_physical_devices()\nprint(tf.__version__)\n\ntorch.cuda.is_available()\ntorch.version.hip\n")),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("h3",{id:"neuron"},"Neuron"),(0,a.kt)("p",null,"A neuron is a function that takes some inputs, applies a weighted sum to them, and then generates an output using an activation function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"\ndef neuronFunc(inputs):\n  weights = [0.5, -0.5]\n  sum = inputs[0] * weights[0] + inputs[1] * weights[1]\n  return sum\nneuronOut = neuronFunc([1.0, 2.0])\n")),(0,a.kt)("h3",{id:"activation-function"},"Activation function"),(0,a.kt)("p",null,"An activation function is applied to the output of a neuron to introduce non-linearity into the model. This helps the neural network learn complex patterns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import math\n\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\n\n# Apply the activation function\nactiveOutput = sigmoid(neuronOut)\n")),(0,a.kt)("h4",{id:"linear-activation-function"},"Linear Activation Function"),(0,a.kt)("p",null,"The linear activation function directly outputs the input value without any modification."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def linear(x):\n    return x\n\nactiveOutput = linear(neuronOut)\n")),(0,a.kt)("h3",{id:"lose-function"},"Lose function"),(0,a.kt)("p",null,"A loss function measures how well a neural network model performs a certain task by calculating the difference between the predicted output and the actual output. The goal of training is to minimize this loss"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'y_true = 0.8\n\nloss = (y_true - activeOutput)\nprint("Loss:", loss)\n')),(0,a.kt)("h3",{id:"optimization-methods"},"Optimization Methods"),(0,a.kt)("h4",{id:"gradient"},"Gradient"),(0,a.kt)("p",null,"In neural networks, gradients are used to update the model parameters to minimize the loss function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def f(x):\n    return x**2\n\ndef gradient(x):\n    return 2 * x\n\nx = 3\ngrad = gradient(x)\nprint("Gradient at x = {}: {}".format(x, grad))\n')),(0,a.kt)("h4",{id:"gradient-descent"},"Gradient Descent"),(0,a.kt)("p",null,"Gradient Descent is an optimization algorithm used to minimize the loss function by iteratively moving towards the steepest descent direction defined by the negative of the gradient."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def gradient_descent(starting_point, learning_rate, num_iterations):\n    x = starting_point\n    for _ in range(num_iterations):\n        grad = gradient(x)\n        x = x - learning_rate * grad\n    return x\n\nstarting_point = 3\nlearning_rate = 0.1\nnum_iterations = 100\noptimal_x = gradient_descent(starting_point, learning_rate, num_iterations)\nprint("Optimal x:", optimal_x)\n')))}d.isMDXComponent=!0}}]);