"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7970:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={title:"ERC20 From Scratch",tags:["ERC20","Ethereum"]},o="Step By Step guide on how to create your very own ERC20 token",l={unversionedId:"blockchain/Ethereum/ERC20/readme",id:"blockchain/Ethereum/ERC20/readme",title:"ERC20 From Scratch",description:"You can find the codes and files in the Github repo.",source:"@site/docs/blockchain/Ethereum/ERC20/readme.md",sourceDirName:"blockchain/Ethereum/ERC20",slug:"/blockchain/Ethereum/ERC20/",permalink:"/Wisdom-Hub/blockchain/Ethereum/ERC20/",draft:!1,tags:[{label:"ERC20",permalink:"/Wisdom-Hub/tags/erc-20"},{label:"Ethereum",permalink:"/Wisdom-Hub/tags/ethereum"}],version:"current",frontMatter:{title:"ERC20 From Scratch",tags:["ERC20","Ethereum"]},sidebar:"tutorialSidebar",previous:{title:"ERC-1155 From Scratch",permalink:"/Wisdom-Hub/blockchain/Ethereum/ERC1155/"},next:{title:"ERC-721 From Scratch",permalink:"/Wisdom-Hub/blockchain/Ethereum/ERC721/"}},s={},p=[{value:"Getting start",id:"getting-start",level:2},{value:"Files",id:"files",level:2},{value:"Compile via Solc",id:"compile-via-solc",level:2},{value:"Options",id:"options",level:3},{value:"Deploying on Goerli",id:"deploying-on-goerli",level:2},{value:"Running Deployer",id:"running-deployer",level:3},{value:"Verifying the contract",id:"verifying-the-contract",level:2},{value:"Settings",id:"settings",level:3},{value:"Images",id:"images",level:3},{value:"Interacting via Geth",id:"interacting-via-geth",level:3},{value:"Interacting via web3js",id:"interacting-via-web3js",level:3}],c={toc:p},m="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"step-by-step-guide-on-how-to-create-your-very-own-erc20-token"},"Step By Step guide on how to create your very own ERC20 token"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You can find the ",(0,i.kt)("strong",{parentName:"p"},"codes")," and ",(0,i.kt)("strong",{parentName:"p"},"files")," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mlibre/blockchain/tree/master/Tutorials/Ethereum/ERC20"},(0,i.kt)("inlineCode",{parentName:"a"},"in the Github repo")),".")),(0,i.kt)("p",null,"In this guide, we go through step by step guide on how to create an ",(0,i.kt)("inlineCode",{parentName:"p"},"ERC20")," token. we will use:  "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Nodejs"),": 14",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"openzeppelin/contracts"),": 4.3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ethereum-smart-contract-deployer")," : 1.1.6",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"solc"),": 0.8.9"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"web3"),": 1.6.0")))))),(0,i.kt)("h2",{id:"getting-start"},"Getting start"),(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"Nodejs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Solidity")," in your ",(0,i.kt)("strong",{parentName:"p"},"Linux/Windows"),". and clone the repo."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -S nodejs geth\nsudo npm install -g solc\nsolcjs --version\n")),(0,i.kt)("p",null,"Clone the repo and install dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/mlibre/blockchain\ncd Ethereum/ERC721/\nnpm i\nnpm i --dev-only\n")),(0,i.kt)("h2",{id:"files"},"Files"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ERC20Basic.sol"),": The contract"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"main.js"),": A Nodejs contract deployer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bin"),": Compiles' outputs")),(0,i.kt)("p",null,"As you may have already noticed, we are using the ",(0,i.kt)("strong",{parentName:"p"},"openzeppelin")," contracts V4.",(0,i.kt)("br",{parentName:"p"}),"\n","So the contract code, ",(0,i.kt)("inlineCode",{parentName:"p"},"ERC20Basic.sol")," is basically few lines of codes!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport "./node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol";\nimport "./node_modules/@openzeppelin/contracts/access/Ownable.sol";\n\ncontract MlibreToken is ERC20, Ownable {\n   constructor(uint256 initialSupply) ERC20("Mlibre", "MLB") {\n      _mint(msg.sender, initialSupply * (10 ** uint256(decimals())));\n   }\n    function mint(address to, uint256 amount) public onlyOwner {\n     _mint(to, amount);\n   }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"initialSupply")," is the amount of total token supply, we pass it on the creation time.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"mint")," ",(0,i.kt)("strong",{parentName:"p"},"function")," gives us the ability to mint tokens later."),(0,i.kt)("h2",{id:"compile-via-solc"},"Compile via Solc"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You don't have to compile the contract with ",(0,i.kt)("inlineCode",{parentName:"p"},"solc")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"Contract Deployer.js")," will compile it itself. but it is good to see if there are any errors.  ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"solc ERC20Basic.sol  -o ./bin/ --combined-json=abi,bin,metadata --pretty-json --optimize --metadata --gas --abi --bin --overwrite --color\n")),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--metadata"),": creates metadata"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--abi"),": creates abi"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--bin"),": creates bin"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--combined-json=abi,bin,metadata"),": creates a json containing all above")),(0,i.kt)("h2",{id:"deploying-on-goerli"},"Deploying on Goerli"),(0,i.kt)("p",null,"If everything went well. it is time to deploy our contract on the Blockchain!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'geth --goerli --http --syncmode=light --http.api="eth,net,web3,personal,txpool" --allow-insecure-unlock  --http.corsdomain "*"\n')),(0,i.kt)("h3",{id:"running-deployer"},"Running Deployer"),(0,i.kt)("p",null,"Now It is time to deploy the contract on the blockchain.",(0,i.kt)("br",{parentName:"p"}),"\n","Open the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.js")," file and set the Deployer's arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node main.js \n")),(0,i.kt)("p",null,"Congrats! it is done :)\nthe output should be something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Network Name:  goerli\nNetwork Peers:  17\n\nSolidity Version: 0.8.9\nCompiling contract ERC20Basic.sol\n\nETH balance:  5.801357301927762163\nGas:  1645359\nGas Price in ETH:  0.000000001500000007\nTotal Cost in ETH:  0.0024680385115175129\nETH balance after deploying:  5.798889263416244\n\nDeploying Contract MlibreToken\nArguments:  [ 12300000000 ]\n\nTransaction hash: 0xe61eb01b53e859059b40e86b7119594ca48df793fbda73c69f201e76a96ae23d\nBlock number:  5819409\nOwner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C\nContract Address: 0x2107130860b83dF501C518A2A6D4652dC3af0388\nEtherscan.io: https://goerli.etherscan.io/address/0x2107130860b83dF501C518A2A6D4652dC3af0388\n")),(0,i.kt)("p",null,"If you click on the last link you will find the token on Etherscan.io."),(0,i.kt)("h2",{id:"verifying-the-contract"},"Verifying the contract"),(0,i.kt)("p",null,"Verifying contracts on etherscan are a bit hard right now :)",(0,i.kt)("br",{parentName:"p"}),"\n","So first copy all the files that contract uses in a folder, use a same the ",(0,i.kt)("inlineCode",{parentName:"p"},"solidity")," version for all.",(0,i.kt)("br",{parentName:"p"}),"\n","Now fix the ",(0,i.kt)("inlineCode",{parentName:"p"},"imports' paths"),", and compile it again.",(0,i.kt)("br",{parentName:"p"}),"\n","I have done it for our case and put the modified files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"combined")," folder.",(0,i.kt)("br",{parentName:"p"}),"\n","If ",(0,i.kt)("strong",{parentName:"p"},"etherscan")," was unable to detect the constructor parameters. you can use ",(0,i.kt)("a",{parentName:"p",href:"https://abi.hashex.org/"},"hashex"),".",(0,i.kt)("br",{parentName:"p"}),"\n","Copy the ",(0,i.kt)("inlineCode",{parentName:"p"},"TOKENNAME_abi.json")," file that the deployer has made. and paste it in ",(0,i.kt)("a",{parentName:"p",href:"https://abi.hashex.org/"},"hashex"),". I pass the value '12300000000' to the contract constructor.  "),(0,i.kt)("p",null,"Open ",(0,i.kt)("a",{parentName:"p",href:"https://goerli.etherscan.io/verifyContract"},"goerli.etherscan.io/verifyContract")),(0,i.kt)("h3",{id:"settings"},"Settings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Contract Address: 0xEf6b32e2375EC3C2bc342Bb8fEA6040A5E426C9b (YOUR CONTRACT ADDRESS)"),(0,i.kt)("li",{parentName:"ul"},"Compiler Type: Multi part files"),(0,i.kt)("li",{parentName:"ul"},"Compiler Version: 0.8.9"),(0,i.kt)("li",{parentName:"ul"},"License GPL-v3"),(0,i.kt)("li",{parentName:"ul"},"Optimization: No")),(0,i.kt)("h3",{id:"images"},"Images"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Settings"),(0,i.kt)("p",{parentName:"li"}," ",(0,i.kt)("img",{alt:"verify settings",src:n(475).Z,width:"880",height:"558"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Files upload. Files are necessary always like this. These photos just show the whole idea."),(0,i.kt)("p",{parentName:"li"}," ",(0,i.kt)("img",{alt:"Upload Files",src:n(2746).Z,width:"1408",height:"837"}),"  ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Verified"),(0,i.kt)("p",{parentName:"li"}," ",(0,i.kt)("img",{alt:"Verify",src:n(6104).Z,width:"1410",height:"856"})))),(0,i.kt)("h3",{id:"interacting-via-geth"},"Interacting via Geth"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'geth attach http://127.0.0.1:8545\npersonal.unlockAccount("0xd8f24d419153e5d03d614c5155f900f4b5c8a65c")\n\nvar abi = [{"inputs":[{"internalType":"uint256","nam"\nvar MyContract = web3.eth.contract(abi);\n# Copy Contract Address\nvar MyContractInstance = MyContract.at(\'0x4B2935DD5D2B1F8dB272858F6F9EAe8Fc8927B27\');\nMyContractInstance.balanceOf("0xd8f24d419153e5d03d614c5155f900f4b5c8a65c" , {from: eth.accounts[0]});\nMyContractInstance.transfer(\'10\', "0x9998B1Eea4326FF00D77Efd9779Aac84d1bBA259" , {from: eth.accounts[0]});\n')),(0,i.kt)("h3",{id:"interacting-via-web3js"},"Interacting via web3js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"async function mint(web3, contract, amount) {\n await web3.eth.personal.unlockAccount(options.sender , options.password, 150)\n let contractInstance = new web3.eth.Contract(contract.abi, options.token);\n const result = await contractInstance.methods.mint(options.sender , amount.toString()).send({from: options.sender})\n console.log(result);\n}\n")))}u.isMDXComponent=!0},2746:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-7d0781927d817b44500ce10e07b7767a.png"},475:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify_0-82f14ffdaf44714c31853549200305e8.png"},6104:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify_2-e89b51e31ec6171fa4c0d08c62cf62ee.png"}}]);