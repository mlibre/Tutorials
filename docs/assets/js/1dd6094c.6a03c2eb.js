"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1321],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,h=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"DEX from scratch",tags:["DEX","Ethereum"]},i="Creating a decentralized exchange from scratch - Ethereum",l={unversionedId:"blockchain/Tutorials/Ethereum/Build a DEX from scratch/readme",id:"blockchain/Tutorials/Ethereum/Build a DEX from scratch/readme",title:"DEX from scratch",description:"You can find the codes and files in the Github repo.",source:"@site/docs/blockchain/Tutorials/Ethereum/Build a DEX from scratch/readme.md",sourceDirName:"blockchain/Tutorials/Ethereum/Build a DEX from scratch",slug:"/blockchain/Tutorials/Ethereum/Build a DEX from scratch/",permalink:"/Tutorials/blockchain/Tutorials/Ethereum/Build a DEX from scratch/",draft:!1,tags:[{label:"DEX",permalink:"/Tutorials/tags/dex"},{label:"Ethereum",permalink:"/Tutorials/tags/ethereum"}],version:"current",frontMatter:{title:"DEX from scratch",tags:["DEX","Ethereum"]},sidebar:"tutorialSidebar",previous:{title:"Ethereum",permalink:"/Tutorials/blockchain/Tutorials/Ethereum/"},next:{title:"CLI",permalink:"/Tutorials/blockchain/Tutorials/Ethereum/CLI"}},s={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Requirements and Technologies",id:"requirements-and-technologies",level:2},{value:"Setting up Ganache",id:"setting-up-ganache",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Exchange contract",id:"exchange-contract",level:2},{value:"Factory contract",id:"factory-contract",level:2},{value:"MLB1 and MLB2 ERC-20 Contracts",id:"mlb1-and-mlb2-erc-20-contracts",level:2},{value:"Deploying DEX on Ganache",id:"deploying-dex-on-ganache",level:2},{value:"References",id:"references",level:2},{value:"About The Author",id:"about-the-author",level:2},{value:"Donate \ud83d\udc97",id:"donate-",level:2}],d={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-a-decentralized-exchange-from-scratch---ethereum"},"Creating a decentralized exchange from scratch - Ethereum"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can find the ",(0,r.kt)("strong",{parentName:"p"},"codes")," and ",(0,r.kt)("strong",{parentName:"p"},"files")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mlibre/blockchain/tree/master/Tutorials/Ethereum/Build%20a%20DEX%20from%20scratch"},(0,r.kt)("inlineCode",{parentName:"a"},"in the Github repo")),".")),(0,r.kt)("p",null,"In this tutorial, we will go through the process of building a simple decentralized exchange (DEX) on ",(0,r.kt)("inlineCode",{parentName:"p"},"Ganache"),", a Ethereum blockchain simulator."),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#requirements-and-technologies"},"Requirements and Technologies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setting-up-ganache"},"Setting up Ganache")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#getting-started"},"Getting started")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#exchange-contract"},"Exchange contract")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#factory-contract"},"Factory contract")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#mlb1-and-mlb2-erc-20-contracts"},"MLB1 and MLB2 ERC-20 Contracts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#deploying-dex-on-ganache"},"Deploying DEX on Ganache")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#references"},"References")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#about-the-author"},"About The Author")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#donate-"},"Donate \ud83d\udc97"))),(0,r.kt)("h2",{id:"requirements-and-technologies"},"Requirements and Technologies"),(0,r.kt)("p",null,"We will use the following technologies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.trufflesuite.com/ganache"},"Ganache")," as the blockchain.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.soliditylang.org/en/latest/"},"Solidity")," as the programming language.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://openzeppelin.github.io/"},"OpenZeppelin")," framework for ERC-20 tokens.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ChainSafe/web3.js"},"Web3.js")," as the nodejs API which connects to ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON-RPC")," providers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"Nodejs and NPM")," v14.17.6 LTS or higher installed")),(0,r.kt)("h2",{id:"setting-up-ganache"},"Setting up Ganache"),(0,r.kt)("p",null,"Install ",(0,r.kt)("strong",{parentName:"p"},"Ganache")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pamac install ganache-bin\n")),(0,r.kt)("p",null,"Open it and use the following configuration to start a ",(0,r.kt)("inlineCode",{parentName:"p"},"new workspace")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HOSTNAME:")," 0.0.0.0"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"PORT:")," 7545"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AUTOMINE:")," true"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"GAS LIMIT:")," 10000000000000000"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"GAS PRICE:")," 200000000000")),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"First, we write an ",(0,r.kt)("strong",{parentName:"li"},"Exchange contract")," that will be used to swap a token and ether. for each ",(0,r.kt)("inlineCode",{parentName:"li"},"token-ether")," pair one exchange contract will be deployed"),(0,r.kt)("li",{parentName:"ol"},"Then we write a ",(0,r.kt)("strong",{parentName:"li"},"Factory contract")," that is for creating and deploying Exchange contracts. It will also keep track of the deployed Exchange contracts"),(0,r.kt)("li",{parentName:"ol"},"We compile and deploy ",(0,r.kt)("strong",{parentName:"li"},"MLB1 and MLB2 ERC-20 contracts")),(0,r.kt)("li",{parentName:"ol"},"We compile and deploy the ",(0,r.kt)("strong",{parentName:"li"},"Factory contract")," on ",(0,r.kt)("strong",{parentName:"li"},"Ganache")),(0,r.kt)("li",{parentName:"ol"},"We call ",(0,r.kt)("inlineCode",{parentName:"li"},"CreateExchange")," function of the ",(0,r.kt)("strong",{parentName:"li"},"Factory contract")," to create two new ",(0,r.kt)("strong",{parentName:"li"},"exchange contracts")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"MLB1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"MLB2"))),(0,r.kt)("h2",{id:"exchange-contract"},"Exchange contract"),(0,r.kt)("p",null,"The exchange contract takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"token address")," parameter in the ",(0,r.kt)("inlineCode",{parentName:"p"},"constructor"),". The token can be swapped for ether and vice versa.",(0,r.kt)("br",{parentName:"p"}),"\n","It also ",(0,r.kt)("inlineCode",{parentName:"p"},"inherits")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC-20")," contract to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"reward token"),". This token (MLBReward) will be distributed to the Liquidity Providers.",(0,r.kt)("br",{parentName:"p"}),"\n","So exchange contract has also all the functionality of an ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC-20")," contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import "./node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol";\nimport "./node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ninterface IExchange {\n    function ethToTokenSwap(uint256 _minTokens) external payable;\n\n    function ethToTokenTransfer(uint256 _minTokens, address _recipient)\n        external\n        payable;\n}\n\ninterface IFactory {\n    function getExchange(address _tokenAddress) external returns (address);\n}\n\ncontract Exchange is ERC20 {\n    address public tokenAddress;\n    address public factoryAddress; // The factory contract address that created this exchange contract\n\n    constructor(address _token) ERC20("MLBReward", "MLBR") {\n        require(_token != address(0), "invalid token address");\n\n        tokenAddress = _token;\n        factoryAddress = msg.sender;\n    }\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"addLiquidity")," function is used to add liquidity to the exchange. It is a payable function. We send ether and token to this function. This function also mints ",(0,r.kt)("inlineCode",{parentName:"p"},"MLBReward")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"LP")," based on the amount of ETH ",(0,r.kt)("inlineCode",{parentName:"p"},"LP")," has sent.  "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"removeLiquidity")," function is used to remove liquidity from the exchange. It takes an amount of ether and token ",(0,r.kt)("inlineCode",{parentName:"p"},"LP")," wants to withdraw. This function also burns ",(0,r.kt)("inlineCode",{parentName:"p"},"MLBReward")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"LP"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ethToToken")," function is used to swap ether to the token. It takes an amount of ether ",(0,r.kt)("inlineCode",{parentName:"p"},"LP")," wants to swap. and the minimum amount of tokens ",(0,r.kt)("inlineCode",{parentName:"p"},"LP")," wants to receive."),(0,r.kt)("h2",{id:"factory-contract"},"Factory contract"),(0,r.kt)("p",null,"Factory contract is used to create and deploy Exchange contracts. It also ",(0,r.kt)("inlineCode",{parentName:"p"},"keeps track")," of the deployed exchange contracts. It has a ",(0,r.kt)("inlineCode",{parentName:"p"},"createExchange")," function that takes a token address and creates and deploys an exchange contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.10;\n\nimport "./exchange.sol";\n\n// Factory is a contract that creates exchange contracts. and keep track of what it has created.\ncontract Factory {\n    mapping(address => address) public tokenToExchange; // map of token address to exchange address\n    int256 public numExchanges; // number of exchanges created\n    address[] public tokenList; // list of token addresses\n\n    function createExchange(address _tokenAddress) public returns (address) {\n        require(_tokenAddress == address(_tokenAddress), "Not a valid address");\n        require(_tokenAddress != address(0), "Zero token address is not valid");\n        // tokenToExchange[_tokenAddress] returns "zero address" if _tokenAddress is not in the map\n        require(\n            tokenToExchange[_tokenAddress] == address(0),\n            "Exchange already exists"\n        );\n\n        Exchange exchange = new Exchange(_tokenAddress);\n\n        // Tracking\n        tokenToExchange[_tokenAddress] = address(exchange);\n        numExchanges++;\n        tokenList.push(_tokenAddress);\n\n        return address(exchange);\n    }\n\n    function getExchange(address _tokenAddress) public view returns (address) {\n        return tokenToExchange[_tokenAddress];\n    }\n\n    function getTokens() public view returns (address[] memory) {\n        return tokenList;\n    }\n}\n')),(0,r.kt)("h2",{id:"mlb1-and-mlb2-erc-20-contracts"},"MLB1 and MLB2 ERC-20 Contracts"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MLB1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MLB2")," are tokens we will deploy, and create two exchange contracts for."),(0,r.kt)("h2",{id:"deploying-dex-on-ganache"},"Deploying DEX on Ganache"),(0,r.kt)("p",null,"We use ",(0,r.kt)("inlineCode",{parentName:"p"},"ethereum-smart-contract-deployer")," npm package to deploy the contracts on ",(0,r.kt)("inlineCode",{parentName:"p"},"Ganache"),".  "),(0,r.kt)("p",null,"Following this scenario:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Deploying ",(0,r.kt)("inlineCode",{parentName:"li"},"MLB1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"MLB2")," tokens"),(0,r.kt)("li",{parentName:"ol"},"Deploying ",(0,r.kt)("inlineCode",{parentName:"li"},"Factory")," contract"),(0,r.kt)("li",{parentName:"ol"},"Creating two exchanges for ",(0,r.kt)("inlineCode",{parentName:"li"},"MLB1-ether")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"MLB2-ether"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/mlibre/blockchain.git\ncd blockchain/Ethereum/Build\\ a\\ DEX\\ from\\ scratch/\nnpm i\nnode main.js\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," code is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let MLB1Deployer = await new Deployer({\n   contractFilePath: "./MLB1.sol",\n   input: [200],\n   sender: LP,\n   mnemonic: "gospel fault armor invest scrap manage salad ride amazing among clay feature",\n   address: "http://127.0.0.1:7545",\n   compilerOptimize: true,\n   compileOutput: "combined",\n   combineFolder: \'combined\',\n   combined: true,\n   setGas: true,\n   confirmations: false\n  })\n  let MLB1 = await MLB1Deployer.deploy();\n  let MLB1Decimals = await MLB1.methods.decimals().call();\n\n  // ABI & Contract address of the token which can be exchanged for ETH\n  let MLB1ContractAddress = MLB1.options.address; // Contract address of a sample deployed ERC-20 token\n  let MLB1Abi = MLB1Deployer.contract.abi;\n\n  let MLB2Deployer = await new Deployer({\n   contractFilePath: "./MLB2.sol",\n   input: [200],\n   sender: LP,\n   mnemonic: "gospel fault armor invest scrap manage salad ride amazing among clay feature",\n   address: "http://127.0.0.1:7545",\n   compilerOptimize: true,\n   compileOutput: "combined",\n   combineFolder: \'combined\',\n   combined: true,\n   setGas: true,\n   confirmations: false\n  })\n  let MLB2 = await MLB2Deployer.deploy();\n  let MLB2Decimals = await MLB2.methods.decimals().call();\n\n  // ABI & Contract address of the token which can be exchanged for ETH\n  let MLB2ContractAddress = MLB2.options.address; // Contract address of a sample deployed ERC-20 token\n  let MLB2Abi = MLB2Deployer.contract.abi\n\n  const factory = await new Deployer({\n   contractFilePath: "./factory.sol",\n   sender: owner,\n   mnemonic: "gospel fault armor invest scrap manage salad ride amazing among clay feature", // Ganache mnemonic\n   address: "http://127.0.0.1:7545", // Ganache address\n   compilerOptimize: true,\n   compileOutput: "combined",\n   combineFolder: \'combined\',\n   setGas: true,\n   confirmations: false\n  });\n  const FactoryInstance = await factory.deploy();\n  web3 = factory.web3;\n  let toWei = web3.utils.toWei;\n\n  await FactoryInstance.methods.createExchange(MLB1ContractAddress)\n  .send({\n   from: owner\n  })\n  await FactoryInstance.methods.createExchange(MLB2ContractAddress)\n  .send({\n   from: owner\n  })\n\n \n  MLB1ExchangeAddress = await FactoryInstance.methods.getExchange(MLB1ContractAddress).call();\n  MLB2ExchangeAddress = await FactoryInstance.methods.getExchange(MLB2ContractAddress).call();\n')),(0,r.kt)("p",null,"Our DEX is now deployed and ready to use. Lets add some liquidity to the ",(0,r.kt)("inlineCode",{parentName:"p"},"MLB1-Ether")," exchange."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'  let LPMLB1TokenToSend = (20 * 10 ** MLB1Decimals).toString();\n  await MLB1.methods.approve(MLB1Exchange.options.address, LPMLB1TokenToSend)\n  .send(\n   {\n    from: LP\n   });\n  await MLB1Exchange.methods.addLiquidity(LPMLB1TokenToSend) // Token Amount to send for liquidity\n  .send({\n   from: LP,\n   value: toWei("1.5") // Ether amount to send for liquidity\n  });\n')),(0,r.kt)("p",null,"Or swap ",(0,r.kt)("inlineCode",{parentName:"p"},"MLB1")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"Ether"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  await MLB1.methods.approve(MLB1Exchange.options.address, LPMLB1TokenSwap).send({from: LP});\n  let tokenToEthSwap = await MLB1Exchange.methods.tokenToEthSwap(LPMLB1TokenSwap, ethOut)\n  .send({\n   from: LP,\n  });\n")),(0,r.kt)("p",null,"You can find the full example and source codes under this directory."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jeiwan.net/posts/programming-defi-uniswap-1/"},"https://jeiwan.net/posts/programming-defi-uniswap-1/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jeiwan.net/posts/programming-defi-uniswap-2/"},"https://jeiwan.net/posts/programming-defi-uniswap-2/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/coinmonks/programming-defi-uniswap-part-3-791005c6238e"},"https://medium.com/coinmonks/programming-defi-uniswap-part-3-791005c6238e"))),(0,r.kt)("h2",{id:"about-the-author"},"About The Author"),(0,r.kt)("p",null,"I'm mlibre, a random guy from the solar galaxy. I am interested in blockchain tech and find it very useful for lots of things. Feel free to check my ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mlibre"},"Github")),(0,r.kt)("h2",{id:"donate-"},"Donate \ud83d\udc97"),(0,r.kt)("p",null,"ETH:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"0xc9b64496986E7b6D4A68fDF69eF132A35e91838e")))}m.isMDXComponent=!0}}]);