"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3020],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2,tags:["Network","ai","Neural"]},i="Neural Network",l={unversionedId:"ai/neural-network",id:"ai/neural-network",title:"Neural Network",description:"Install Packges",source:"@site/docs/ai/neural-network.md",sourceDirName:"ai",slug:"/ai/neural-network",permalink:"/Wisdom-Hub/ai/neural-network",draft:!1,tags:[{label:"Network",permalink:"/Wisdom-Hub/tags/network"},{label:"ai",permalink:"/Wisdom-Hub/tags/ai"},{label:"Neural",permalink:"/Wisdom-Hub/tags/neural"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Network","ai","Neural"]},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/Wisdom-Hub/ai/python-for-ai"},next:{title:"Geenrative AI",permalink:"/Wisdom-Hub/ai/generative-ai"}},s={},u=[{value:"Install Packges",id:"install-packges",level:2},{value:"Check GPU Support",id:"check-gpu-support",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Neuron",id:"neuron",level:3},{value:"Activation function",id:"activation-function",level:3},{value:"Lose function",id:"lose-function",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"neural-network"},"Neural Network"),(0,o.kt)("h2",{id:"install-packges"},"Install Packges"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install --upgrade pip --break-system-packages\n# if you have permission issue\n# sudo chmod a+rwx /usr/lib/python3.12/ -R\n\n# https://wiki.archlinux.org/title/GPGPU\nsudo pamac install opencl-amd --no-confirm\n# Or sudo pamac install rocm-core rocm-hip-sdk rocm-opencl-sdk --no-confirm\nsudo usermod -a -G render,video $LOGNAME\n\n# If you are using RDNA or RDNA 2 architecture like AMD Radeon RX 6500 XT follow this step\nsudo nano ~/.profile\nexport HSA_OVERRIDE_GFX_VERSION=10.3.0\nexport ROC_ENABLE_PRE_VEGA=1\n\n# https://www.tensorflow.org/install/pip\npip install tensorflow --break-system-packages\npip3 uninstall tensorflow-rocm numpy\npip3 install https://repo.radeon.com/rocm/manylinux/rocm-rel-6.1.3/tensorflow_rocm-2.15.1-cp310-cp310-manylinux_2_28_x86_64.whl numpy==1.26.4 --break-system-packages\n\n# https://pytorch.org/\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.1 --break-system-packages\n")),(0,o.kt)("h2",{id:"check-gpu-support"},"Check GPU Support"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import tensorflow as tf   # TensorFlow registers PluggableDevices here\ntf.config.list_physical_devices()\nprint(tf.__version__)\n")),(0,o.kt)("h2",{id:"concepts"},"Concepts"),(0,o.kt)("h3",{id:"neuron"},"Neuron"),(0,o.kt)("p",null,"A neuron is a function that takes some inputs, applies a weighted sum to them, adds a bias, and then generates an output using an activation function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'inputs = [1.0, 2.0]\nweights = [0.5, -0.5]\nbias = 0.1\n\n# Compute the weighted sum\nweighted_sum = inputs[0] * weights[0] + inputs[1] * weights[1] + bias\nprint("Weighted Sum:", weighted_sum)\n')),(0,o.kt)("h3",{id:"activation-function"},"Activation function"),(0,o.kt)("p",null,"An activation function is applied to the output of a neuron to introduce non-linearity into the model. This helps the neural network learn complex patterns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import math\n\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\n\n# Apply the activation function\noutput = sigmoid(weighted_sum)\nprint("Neuron Output (after activation):", output)\n')),(0,o.kt)("h3",{id:"lose-function"},"Lose function"),(0,o.kt)("p",null,"A loss function measures how well a neural network model performs a certain task by calculating the difference between the predicted output and the actual output. The goal of training is to minimize this loss"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'y_true = 0.8\n\nloss = (y_true - output)\nprint("Loss:", loss)\n')))}m.isMDXComponent=!0}}]);