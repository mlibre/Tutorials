"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5018],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"ERC-1155 From Scratch",tags:["ERC-1155","Ethereum"]},o="Step By Step guide on how to create your very own ERC-1155 token",l={unversionedId:"blockchain/docusaurus/docs/Ethereum/ERC1155/readme",id:"blockchain/docusaurus/docs/Ethereum/ERC1155/readme",title:"ERC-1155 From Scratch",description:"You can find the codes and files in the Github repo.",source:"@site/docs/blockchain/docusaurus/docs/Ethereum/ERC1155/readme.md",sourceDirName:"blockchain/docusaurus/docs/Ethereum/ERC1155",slug:"/blockchain/docusaurus/docs/Ethereum/ERC1155/",permalink:"/cheat-sheet/blockchain/docusaurus/docs/Ethereum/ERC1155/",draft:!1,tags:[{label:"ERC-1155",permalink:"/cheat-sheet/tags/erc-1155"},{label:"Ethereum",permalink:"/cheat-sheet/tags/ethereum"}],version:"current",frontMatter:{title:"ERC-1155 From Scratch",tags:["ERC-1155","Ethereum"]},sidebar:"tutorialSidebar",previous:{title:"DEX from scratch",permalink:"/cheat-sheet/blockchain/docusaurus/docs/Ethereum/Build a DEX from scratch/"},next:{title:"ERC20 From Scratch",permalink:"/cheat-sheet/blockchain/docusaurus/docs/Ethereum/ERC20/"}},c={},s=[{value:"Options",id:"options",level:2},{value:"Importing an account into Geth",id:"importing-an-account-into-geth",level:2},{value:"Unlocking an account in <strong>Geth</strong>",id:"unlocking-an-account-in-geth",level:2},{value:"Run Geth",id:"run-geth",level:2},{value:"Running Deployer",id:"running-deployer",level:2},{value:"Settings",id:"settings",level:2},{value:"Images",id:"images",level:2},{value:"Interacting via Geth",id:"interacting-via-geth",level:2},{value:"Interacting via web3js",id:"interacting-via-web3js",level:2}],p={toc:s},u="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"step-by-step-guide-on-how-to-create-your-very-own-erc-1155-token"},"Step By Step guide on how to create your very own ERC-1155 token"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can find the ",(0,r.kt)("strong",{parentName:"p"},"codes")," and ",(0,r.kt)("strong",{parentName:"p"},"files")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mlibre/blockchain/tree/master/Tutorials/Ethereum/ERC1155"},(0,r.kt)("inlineCode",{parentName:"a"},"in the Github repo")),".")),(0,r.kt)("p",null,"In this guide, we will go through the process of how to create an ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC-1155")," token.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"ERC-1155")," is a multi-token standard. You can have many different tokens, fungible and non-fungible all together in one Smart Contract.  "),(0,r.kt)("h1",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Nodejs"),": 14",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openzeppelin/contracts"),": 4.3"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ethereum-smart-contract-deployer")," : 1.1.6",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"solc"),": 0.8.9"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"web3"),": 1.6.0")))))),(0,r.kt)("p",null,"You can install ",(0,r.kt)("inlineCode",{parentName:"p"},"Nodejs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Solidity")," in your ",(0,r.kt)("strong",{parentName:"p"},"Linux/Windows")," with your package manager. in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"Pacman")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -S nodejs geth\nsudo npm install -g solc\nsolcjs --version\n")),(0,r.kt)("p",null,"Clone the repo and install dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/mlibre/blockchain\ncd Ethereum/ERC1155/\nnpm i\n")),(0,r.kt)("h1",{id:"files"},"Files"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ERC1155Basic.sol"),": The contract source code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"main.js"),": A contract deployer written in ",(0,r.kt)("strong",{parentName:"li"},"Nodejs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bin"),": Compile's output"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MLB.json"),": The tokens metadata. I have uploaded ",(0,r.kt)("a",{parentName:"li",href:"https://siasky.net/AAC4OM8JRWH3DAx3bQ7qjAcVcpYD52WXzICO11KfvD4i3w"},"here"))),(0,r.kt)("h1",{id:"getting-start"},"Getting start"),(0,r.kt)("p",null,"As you may have already noticed, we are using the ",(0,r.kt)("strong",{parentName:"p"},"openzeppelin")," contracts V4.",(0,r.kt)("br",{parentName:"p"}),"\n","So the contract code, ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC1155Basic.sol")," is basically is few lines of codes!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport "./node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol";\nimport "./node_modules/@openzeppelin/contracts/access/Ownable.sol";\n\ncontract MLBs is ERC1155, Ownable {\n    uint256 public constant MLBFun = 0;\n    uint256 public constant MLBNFun = 1;\n    \n    constructor(uint256 MLBFunIS)\n    ERC1155("https://siasky.net/AAC4OM8JRWH3DAx3bQ7qjAcVcpYD52WXzICO11KfvD4i3w") {\n        _mint(msg.sender, MLBFun, MLBFunIS * (10 **18), "");\n        _mint(msg.sender, MLBNFun, 1, "");\n    }\n\n    function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n    }\n\n    function mint(address account, uint256 id, uint256 amount, bytes memory data)\n        public\n        onlyOwner\n    {\n        _mint(account, id, amount, data);\n    }\n\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\n        public\n        onlyOwner\n    {\n        _mintBatch(to, ids, amounts, data);\n    }\n}\n')),(0,r.kt)("p",null,"Here we have ",(0,r.kt)("inlineCode",{parentName:"p"},"MLBFun")," that is a normal fungible token with id ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),".",(0,r.kt)("br",{parentName:"p"}),"\n","And ",(0,r.kt)("inlineCode",{parentName:"p"},"MLBNFun"),", that is a normal non-fungible token with id ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,r.kt)("h1",{id:"compile-via-solc"},"Compile via Solc"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You don't have to compile the contract with ",(0,r.kt)("inlineCode",{parentName:"p"},"solc")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract Deployer.js")," will compile it itself. but it is good to see if there are any errors.  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"solc ERC1155Basic.sol  -o ./bin/ --combined-json=abi,bin,metadata --pretty-json --optimize --metadata --gas --abi --bin --overwrite --color\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--metadata"),": creates metadata"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--abi"),": creates abi"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--bin"),": creates bin"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--combined-json=abi,bin,metadata"),": creates a json containing all above")),(0,r.kt)("h1",{id:"deploying-on-goerli"},"Deploying on Goerli"),(0,r.kt)("p",null,"If everything went well. it is time to deploy our contract on the Blockchain!"),(0,r.kt)("h2",{id:"importing-an-account-into-geth"},"Importing an account into Geth"),(0,r.kt)("p",null,"If you have not added your account in the local ",(0,r.kt)("inlineCode",{parentName:"p"},"Geth")," before"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# rm -r /home/mlibre/.ethereum/goerli/geth/\n# rm -r /home/mlibre/.ethereum/geth\ngeth account import ~/Data/myself/cryptocurrency-info-recovery/metamask/mforgood/D8_private_key\n# Set a password\n")),(0,r.kt)("h2",{id:"unlocking-an-account-in-geth"},"Unlocking an account in ",(0,r.kt)("strong",{parentName:"h2"},"Geth")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'geth --goerli --http --syncmode=light --http.api="eth,net,web3,personal,txpool" --allow-insecure-unlock  --http.corsdomain "*"\ngeth attach http://127.0.0.1:8545\nweb3.personal.importRawKey("AccountPrivateKey", "ThePasswordYouJustSet")\n# copy the address\npersonal.unlockAccount("TheAddress")\n# Type the password\n')),(0,r.kt)("h2",{id:"run-geth"},"Run Geth"),(0,r.kt)("p",null,"If you have not run ",(0,r.kt)("strong",{parentName:"p"},"Geth")," already:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'geth --goerli --http --syncmode=light --http.api="eth,net,web3,personal,txpool" --allow-insecure-unlock  --http.corsdomain "*"\n')),(0,r.kt)("h2",{id:"running-deployer"},"Running Deployer"),(0,r.kt)("p",null,"Now It is time to deploy the contract on the blockchain.",(0,r.kt)("br",{parentName:"p"}),"\n","Open the ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," file and set the Deployer's arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node main.js \n")),(0,r.kt)("p",null,"Congrats! it is done :)\nthe output should be something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Network Name:  goerli\nNetwork Peers:  17\n\nSolidity Version: 0.8.9\nCompiling contract ERC1155Basic.sol -> MLBs\n\nETH balance:  5.824729999401939589\nGas:  3103808\nGas Price in ETH:  0.000000004\nTotal Cost in ETH:  0.012415232\nETH balance after deploying:  5.812314767401939\n\nDeploying Contract ...\nArguments:  [ 7 ]\n\nTransaction hash: 0x3964c8a6c1138567f342e7c091c975fd3460a87bd7eeb7b5b89d487b2d129d4a\nConfirmation Number: 0\nOwner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C\nContract Address: 0xEDB1a4059b2E46280d2e1F646977b1715EC923c5\nEtherscan.io: https://goerli.etherscan.io/address/0xEDB1a4059b2E46280d2e1F646977b1715EC923c5\n")),(0,r.kt)("p",null,"If you click on the last link you will find the token."),(0,r.kt)("h1",{id:"verifying-the-contract"},"Verifying the contract"),(0,r.kt)("p",null,"So first copy all the files contract uses, and then change the ",(0,r.kt)("inlineCode",{parentName:"p"},"imports' paths"),".",(0,r.kt)("br",{parentName:"p"}),"\n","I have done it for this example. you can find all the modified files in ",(0,r.kt)("strong",{parentName:"p"},"combined")," folder.",(0,r.kt)("br",{parentName:"p"}),"\n","If ",(0,r.kt)("strong",{parentName:"p"},"etherscan")," was unable to detect the constructor parameters. you can use ",(0,r.kt)("a",{parentName:"p",href:"https://abi.hashex.org/"},"hashex"),". copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"TOKENNAME_abi.json")," file that the deployer has made. and paste it in ",(0,r.kt)("strong",{parentName:"p"},"hashex"),". We passed the value '7' to the contract constructor.  "),(0,r.kt)("p",null,"Open ",(0,r.kt)("a",{parentName:"p",href:"https://goerli.etherscan.io/verifyContract"},"goerli.etherscan.io/verifyContract")),(0,r.kt)("h2",{id:"settings"},"Settings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract Address: 0x11C47A4F19cc52923b9C495080ADB441ADe38883 (YOUR CONTRACT ADDRESS)"),(0,r.kt)("li",{parentName:"ul"},"Compiler Type: Multi part file"),(0,r.kt)("li",{parentName:"ul"},"Compiler Version: 0.8.9"),(0,r.kt)("li",{parentName:"ul"},"License MIT"),(0,r.kt)("li",{parentName:"ul"},"Optimization: No")),(0,r.kt)("h2",{id:"images"},"Images"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Settings"),(0,r.kt)("p",{parentName:"li"}," ",(0,r.kt)("img",{alt:"verify settings",src:n(8309).Z,width:"1135",height:"750"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Files upload. Files are necessary always like this. These photos just show the whole idea."),(0,r.kt)("p",{parentName:"li"}," ",(0,r.kt)("img",{alt:"Upload Files",src:n(4659).Z,width:"1397",height:"880"}),"  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Verified"),(0,r.kt)("p",{parentName:"li"}," ",(0,r.kt)("img",{alt:"Verify",src:n(9339).Z,width:"1439",height:"821"})))),(0,r.kt)("h2",{id:"interacting-via-geth"},"Interacting via Geth"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'geth attach http://127.0.0.1:8545\npersonal.unlockAccount("0xd8f24d419153e5d03d614c5155f900f4b5c8a65c")\n\nvar abi = [{"inputs":[{"internalType":"uint256","nam"\nvar MyContract = web3.eth.contract(abi);\n# Copy Contract Address\nvar MyContractInstance = MyContract.at(\'0x11C47A4F19cc52923b9C495080ADB441ADe38883\');\nMyContractInstance.balanceOf("0xd8f24d419153e5d03d614c5155f900f4b5c8a65c" , {from: eth.accounts[0]});\nMyContractInstance.transfer(\'10\', "0x9998B1Eea4326FF00D77Efd9779Aac84d1bBA259" , {from: eth.accounts[0]});\n')),(0,r.kt)("h2",{id:"interacting-via-web3js"},"Interacting via web3js"),(0,r.kt)("p",null,"If you like to call contract functions like ",(0,r.kt)("inlineCode",{parentName:"p"},"mint"),", I have also implemented some in ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," like ",(0,r.kt)("inlineCode",{parentName:"p"},"getBalance")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mint")," ",(0,r.kt)("strong",{parentName:"p"},"functions"),"."))}m.isMDXComponent=!0},4659:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-36668ccb6980d56a96a84dd626b0ff74.png"},8309:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify_0-bf4dcb60c832c51fcbb581f44945d2f6.png"},9339:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify_2-dfb2fe2d883206f47ce771b94bb64f67.png"}}]);