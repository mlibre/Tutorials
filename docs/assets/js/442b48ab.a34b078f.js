"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5510],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>d});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function f(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},s=Object.keys(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=r.createContext({}),a=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):f(f({},e),n)),t},l=function(n){var e=a(n.components);return r.createElement(i.Provider,{value:e},n.children)},c="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,s=n.originalType,i=n.parentName,l=u(n,["components","mdxType","originalType","parentName"]),c=a(t),h=o,d=c["".concat(i,".").concat(h)]||c[h]||p[h]||s;return t?r.createElement(d,f(f({ref:e},l),{},{components:t})):r.createElement(d,f({ref:e},l))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var s=t.length,f=new Array(s);f[0]=h;var u={};for(var i in e)hasOwnProperty.call(e,i)&&(u[i]=e[i]);u.originalType=n,u[c]="string"==typeof n?n:o,f[1]=u;for(var a=2;a<s;a++)f[a]=t[a];return r.createElement.apply(null,f)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},888:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>f,default:()=>p,frontMatter:()=>s,metadata:()=>u,toc:()=>a});var r=t(7462),o=(t(7294),t(3905));const s={sidebar_position:3,tags:["Linux","VPN","openVPN"]},f="VPN",u={unversionedId:"network/vpn",id:"network/vpn",title:"VPN",description:"Tor",source:"@site/docs/network/vpn.md",sourceDirName:"network",slug:"/network/vpn",permalink:"/Wisdom-Hub/network/vpn",draft:!1,tags:[{label:"Linux",permalink:"/Wisdom-Hub/tags/linux"},{label:"VPN",permalink:"/Wisdom-Hub/tags/vpn"},{label:"openVPN",permalink:"/Wisdom-Hub/tags/open-vpn"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["Linux","VPN","openVPN"]},sidebar:"tutorialSidebar",previous:{title:"SSH",permalink:"/Wisdom-Hub/network/ssh"},next:{title:"DNS",permalink:"/Wisdom-Hub/network/dns"}},i={},a=[{value:"Tor",id:"tor",level:2},{value:"SSH",id:"ssh",level:2},{value:"Socks proxy over SSH",id:"socks-proxy-over-ssh",level:3},{value:"VPN over SSH",id:"vpn-over-ssh",level:2},{value:"openVPN Over Socks",id:"openvpn-over-socks",level:2},{value:"OpenVpn Server",id:"openvpn-server",level:2},{value:"V2Ray VPN/Proxy Server",id:"v2ray-vpnproxy-server",level:2},{value:"disable ping",id:"disable-ping",level:3},{value:"Change server hostname",id:"change-server-hostname",level:3},{value:"Add domain to the cloudflare",id:"add-domain-to-the-cloudflare",level:3},{value:"XUI Panel",id:"xui-panel",level:3},{value:"Nekoray",id:"nekoray",level:3},{value:"Cloudflare worker",id:"cloudflare-worker",level:3}],l={toc:a},c="wrapper";function p(n){let{components:e,...t}=n;return(0,o.kt)(c,(0,r.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vpn"},"VPN"),(0,o.kt)("h2",{id:"tor"},"Tor"),(0,o.kt)("p",null,"In VPS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install tor\nsudo systemctl enable tor\nsudo systemctl restart tor\nsudo nano /etc/tor/torrc\nSocksPort 0.0.0.0:9050 # Bind to this address:port too.\nSocksPolicy accept *\n\nsudo systemctl restart tor\njournalctl -u tor\ncurl --socks5 localhost:9050 https://check.torproject.org/\n\n")),(0,o.kt)("p",null,"In local Linux:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -L 9050:localhost:9050 -N mlibre@176.124.193.114\n")),(0,o.kt)("h2",{id:"ssh"},"SSH"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Configure the client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/sshtunnel.service\n\n[Unit]\nDescription=SSH Tunnels\nAfter=network.target\n\n[Service]\nUser=mlibre\nRestart=always\nRestartSec=20\nExecStart=ssh -L 0.0.0.0:1234:localhost:3128 -N amita@95.216.208.60 -p 8756\n\n[Install]\nWantedBy=graphical.target\n")),(0,o.kt)("h3",{id:"socks-proxy-over-ssh"},"Socks proxy over SSH"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/sshtunnelsocks.service\n[Unit]\nDescription=SSH Tunnels\nAfter=network.target\n\n[Service]\nUser=mlibre\nRestart=always\nRestartSec=20\nExecStart=ssh -D 3080 -C -N amita@95.216.208.60 -p 8756\n\n[Install]\nWantedBy=graphical.target\n")),(0,o.kt)("h2",{id:"vpn-over-ssh"},"VPN over SSH"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -S sshuttle\n\nsudo sshuttle -v -r mlibre@51.89.88.80 0/0 -x 51.89.88.80 --disable-ipv6\n# sudo sshuttle -vvvv -r mlibre@51.89.88.80 0/0 -x 51.89.88.80 --dns --disable-ipv6\n# sudo sshuttle -vvvv -r mlibre@51.89.88.80 0.0.0.0/0 --dns --disable-ipv6\n")),(0,o.kt)("h2",{id:"openvpn-over-socks"},"openVPN Over Socks"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"SS server address: 87.80.80.80")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nano mlibre.ovpn\nsocks-proxy 127.0.0.1 1090\nroute 87.80.80.80 255.255.255.255 net_gateway\nroute 192.168.0.0 255.255.0.0 net_gateway\n")),(0,o.kt)("h2",{id:"openvpn-server"},"OpenVpn Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'https://github.com/mlibre/openvpn-install\ncurl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh\nchmod +x openvpn-install.sh\nsudo ./openvpn-install.sh\nport: random, tcp, curreny system resolver, compression yes\nscp -P 2138 mlibre@87.107.164.69:/home/mlibre/mlibre.ovpn .\n\nDNS_SERVER="1.1.1.1"\nsudo sh -c "echo nameserver $DNS_SERVER > /etc/resolv.conf"\nsudo sed -i \'/^\\s*#*DNS=/d\' /etc/systemd/resolved.conf && sudo sed -i \'$ a\\DNS=\'"$DNS_SERVER" /etc/systemd/resolved.conf\nsudo systemctl daemon-reload; wait;\nsudo systemctl restart systemd-networkd; wait;\nsudo systemctl restart systemd-resolved; wait;\nsudo systemd-resolve --flush-caches\nsudo resolvectl flush-caches\nsudo resolvectl dns eth0 "$DNS_SERVER"\nsudo resolvectl dns tun0 "$DNS_SERVER"\nsudo resolvectl dns enp3s0 "$DNS_SERVER"\nsudo resolvectl dns enp5s0 "$DNS_SERVER"\nsudo resolvectl dns docker0 "$DNS_SERVER"\nsudo resolvectl dns\nGlobal: 1.1.1.1\nLink 2 (enp3s0): 1.1.1.1\nLink 8 (tun0): 1.1.1.1\n\n\nAdd these lines to your .ovpn file:\n\nsocks-proxy 127.0.0.1 1080\nroute SHADOWSOCKS_SERVER_IP 255.255.255.255 net_gateway\n')),(0,o.kt)("h2",{id:"v2ray-vpnproxy-server"},"V2Ray VPN/Proxy Server"),(0,o.kt)("h3",{id:"disable-ping"},"disable ping"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/sysctl.conf\nnet.ipv4.conf.icmp_echo_ignore_all = 1\n\nsudo nano /etc/sysctl.d/sys.conf\nnet.ipv4.conf.icmp_echo_ignore_all = 1\n")),(0,o.kt)("h3",{id:"change-server-hostname"},"Change server hostname"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"vultr.com -> server setting -> ipv4 -> reverse DNS")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  proxychains ssh -p port true@000.000.13.13\n\n  sudo nano /etc/cloud/cloud.cfg\n  # preserve_hostname: true\n  \n  sudo nano /etc/hostname\n  domain.ga\n\n  sudo nano /etc/hosts\n  127.0.1.1 domain.ga\n\n  sudo hostnamectl set-hostname domain.ga\n")),(0,o.kt)("h3",{id:"add-domain-to-the-cloudflare"},"Add domain to the cloudflare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"SSL/TLS: Full"),(0,o.kt)("li",{parentName:"ul"},"Disable DNSSEC, Always Use HTTPS, Automatic HTTPS Rewrites"),(0,o.kt)("li",{parentName:"ul"},"Enable TLS 1.3, HTTP2/3, GRPC, WS and ... in Network/SSL tab"),(0,o.kt)("li",{parentName:"ul"},"Enable Development mode"),(0,o.kt)("li",{parentName:"ul"},'Add a "A" DNS record: domain.ga, DNS only ( no proxy )'),(0,o.kt)("li",{parentName:"ul"},'Add a "A" DNS record: v4p.domain.ga, proxy'),(0,o.kt)("li",{parentName:"ul"},'Add a "AAAA" DNS record: v6.domain.ga, proxy ( don\'t make dns-only for ipv6 )')),(0,o.kt)("h3",{id:"xui-panel"},"XUI Panel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ssh root@ip\napt update\napt purge snapd ufw firewalld\napt dist-upgrade\napt install sudo git bash-completion zip unzip aria2 curl nano htop\nadduser mlibre\nusermod -a -G sudo mlibre\nsudo sh -c \"echo 'mlibre ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\"\n# passwd mlibre\nreboot\n\nsudo ufw allow 2053\nsudo ufw allow 2053/udp\nsudo ufw allow 2053/tcp\nsudo ufw allow 35400\nsudo ufw allow 35400/udp\nsudo ufw allow 35400/tcp\nsudo ufw allow 2087\nsudo ufw allow 2087/udp\nsudo ufw allow 2087/tcp\nsudo ufw allow 2096\nsudo ufw allow 2096/udp\nsudo ufw allow 2096/tcp\nsudo ufw allow 8443\nsudo ufw allow 8443/udp\nsudo ufw allow 8443/tcp\nsudo ufw allow 2053\nsudo ufw allow 2053/udp\nsudo ufw allow 2053/tcp\nsudo ufw allow 3678\nsudo ufw allow 3678/udp\nsudo ufw allow 3678/tcp\nsudo ufw allow 2289\nsudo ufw allow 2289/udp\nsudo ufw allow 2289/tcp\nsudo ufw allow 9090\nsudo ufw allow 9090/udp\nsudo ufw allow 9090/tcp\nsudo ufw allow 1080\nsudo ufw allow 1080/udp\nsudo ufw allow 1080/tcp\nsudo ufw allow 443\nsudo ufw allow 443/tcp\nsudo ufw allow 443/udp\nsudo ufw allow 80\nsudo ufw allow 80/tcp\nsudo ufw allow 80/udp\nsudo ufw allow 5353\nsudo ufw allow 5353/tcp\nsudo ufw allow 5353/udp\nsudo ufw allow 53\nsudo ufw allow 53/tcp\nsudo ufw allow 53/udp\nsudo ufw allow OpenSSH\nsudo ufw allow https\nsudo ufw allow ssh\nsudo ufw allow www\nsudo ufw allow bootps\nsudo ufw allow dns\n\n\ncd\nbash <(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)\n# cat /usr/local/x-ui/bin/config.json\n# tar -czvf x-ui.tgz /usr/local/x-ui/\n# proxychains scp -P 3612 true@199.247.13.13:x-ui.tgz .\n# proxychains scp -P 3612 root@199.247.13.13:cert.crt .\n# proxychains scp -P 3612 root@199.247.13.13:private.key .\n\n\nsudo su\nx-ui\n# Open ports, active firewall\n# install BBR, WARP\n\n    # warp u => Uninstall Warp\n    # warp a => Change Warp Account Type (free, plus, ...)\n    # warp y => Turn on/off WireProxy\n\n# revoke certificate the root domain\n# issue certificate\n# Set Panel port 8443\n# Set the certs for panel\nls\nacme.sh --info\nacme.sh --list\n# lsof -i :80\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open Panel (",(0,o.kt)("a",{parentName:"li",href:"https://domain.ga:8443/xui/inbounds"},"https://domain.ga:8443/xui/inbounds"),")"),(0,o.kt)("li",{parentName:"ul"},"vless-2096-h2-reality-no-sniff-stackoverflow.com:443"),(0,o.kt)("li",{parentName:"ul"},"trojan-tls-TCP-443-allow-insecure-alp-all-sni-stackoverflow.com"),(0,o.kt)("li",{parentName:"ul"},"vmess-ws-tls-2053-allow-insecure-aph-all"),(0,o.kt)("li",{parentName:"ul"},"vmess-h2-TLS-H2-HTTP1-allow-insecure-stackoverflow.com-80"),(0,o.kt)("li",{parentName:"ul"},"vmess-h2-TLS-H2-allow-insecure-8443"),(0,o.kt)("li",{parentName:"ul"},"In firefox: Check Proxy DNS when using SOCKS v5")),(0,o.kt)("h3",{id:"nekoray"},"Nekoray"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Nekoray Supports SS, Vmess and ...."),(0,o.kt)("li",{parentName:"ul"},"Download from ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Matsuridayo/nekoray/releases"},"https://github.com/Matsuridayo/nekoray/releases"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'aria2c -x 10 "https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-linux64.zip"\nunzip nekoray-2.9-2022-12-19-linux64.zip\ncd nekoray\n./nekoray\n# Settings -> security -> Skip TLS certificate\n# paste vmess setting. Address: portal.domain.ga, host: portal.domain.ga\n# paste vmess setting. Address: iv6.domain.ga, host: iv6.domain.ga\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open Nekoray -> Routing Settings -> remote DNS: localhost")),(0,o.kt)("h3",{id:"cloudflare-worker"},"Cloudflare worker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'/*!\n  * v2ray Subscription Worker v1.7a\n  * Copyright 2023 Vahid Farid (https://twitter.com/vahidfarid)\n  * Licensed under GPLv3 (https://github.com/vfarid/v2ray-worker-sub/blob/main/Licence.md)\n  */\n\nvar MAX_CONFIGS = 2;\nvar INCLUDE_ORIGINAL = true;\nvar ONLY_ORIGINAL = false;\nvar SELECTED_TYPES = ["vmess", "vless", "trojan"];\nvar SELECTED_PROVIDERS = [];\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/base64-js/index.js\nvar require_base64_js = __commonJS({\n  "node_modules/base64-js/index.js"(exports) {\n    "use strict";\n    exports.byteLength = byteLength;\n    exports.toByteArray = toByteArray;\n    exports.fromByteArray = fromByteArray;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;\n    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";\n    for (i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n    var i;\n    var len;\n    revLookup["-".charCodeAt(0)] = 62;\n    revLookup["_".charCodeAt(0)] = 63;\n    function getLens(b64) {\n      var len2 = b64.length;\n      if (len2 % 4 > 0) {\n        throw new Error("Invalid string. Length must be a multiple of 4");\n      }\n      var validLen = b64.indexOf("=");\n      if (validLen === -1)\n        validLen = len2;\n      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n      return [validLen, placeHoldersLen];\n    }\n    function byteLength(b64) {\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function _byteLength(b64, validLen, placeHoldersLen) {\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function toByteArray(b64) {\n      var tmp;\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n      var curByte = 0;\n      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n      var i2;\n      for (i2 = 0; i2 < len2; i2 += 4) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      return arr;\n    }\n    function tripletToBase64(num) {\n      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n    }\n    function encodeChunk(uint8, start, end) {\n      var tmp;\n      var output = [];\n      for (var i2 = start; i2 < end; i2 += 3) {\n        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n        output.push(tripletToBase64(tmp));\n      }\n      return output.join("");\n    }\n    function fromByteArray(uint8) {\n      var tmp;\n      var len2 = uint8.length;\n      var extraBytes = len2 % 3;\n      var parts = [];\n      var maxChunkLength = 16383;\n      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n      }\n      if (extraBytes === 1) {\n        tmp = uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="\n        );\n      } else if (extraBytes === 2) {\n        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="\n        );\n      }\n      return parts.join("");\n    }\n  }\n});\n\n// node_modules/ieee754/index.js\nvar require_ieee754 = __commonJS({\n  "node_modules/ieee754/index.js"(exports) {\n    exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n      var e, m;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var nBits = -7;\n      var i = isLE ? nBytes - 1 : 0;\n      var d = isLE ? -1 : 1;\n      var s = buffer[offset + i];\n      i += d;\n      e = s & (1 << -nBits) - 1;\n      s >>= -nBits;\n      nBits += eLen;\n      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      m = e & (1 << -nBits) - 1;\n      e >>= -nBits;\n      nBits += mLen;\n      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      if (e === 0) {\n        e = 1 - eBias;\n      } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n      } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n      }\n      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n    };\n    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n      var e, m, c;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n      var i = isLE ? 0 : nBytes - 1;\n      var d = isLE ? 1 : -1;\n      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n      value = Math.abs(value);\n      if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n      } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n          e--;\n          c *= 2;\n        }\n        if (e + eBias >= 1) {\n          value += rt / c;\n        } else {\n          value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n          e++;\n          c /= 2;\n        }\n        if (e + eBias >= eMax) {\n          m = 0;\n          e = eMax;\n        } else if (e + eBias >= 1) {\n          m = (value * c - 1) * Math.pow(2, mLen);\n          e = e + eBias;\n        } else {\n          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n          e = 0;\n        }\n      }\n      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n      }\n      e = e << mLen | m;\n      eLen += mLen;\n      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n      }\n      buffer[offset + i - d] |= s * 128;\n    };\n  }\n});\n\n// node_modules/buffer/index.js\nvar require_buffer = __commonJS({\n  "node_modules/buffer/index.js"(exports) {\n    "use strict";\n    var base64 = require_base64_js();\n    var ieee754 = require_ieee754();\n    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;\n    exports.Buffer = Buffer3;\n    exports.SlowBuffer = SlowBuffer;\n    exports.INSPECT_MAX_BYTES = 50;\n    var K_MAX_LENGTH = 2147483647;\n    exports.kMaxLength = K_MAX_LENGTH;\n    Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();\n    if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {\n      console.error(\n        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."\n      );\n    }\n    function typedArraySupport() {\n      try {\n        const arr = new Uint8Array(1);\n        const proto = { foo: function() {\n          return 42;\n        } };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n      } catch (e) {\n        return false;\n      }\n    }\n    Object.defineProperty(Buffer3.prototype, "parent", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer3.isBuffer(this))\n          return void 0;\n        return this.buffer;\n      }\n    });\n    Object.defineProperty(Buffer3.prototype, "offset", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer3.isBuffer(this))\n          return void 0;\n        return this.byteOffset;\n      }\n    });\n    function createBuffer(length) {\n      if (length > K_MAX_LENGTH) {\n        throw new RangeError(\'The value "\' + length + \'" is invalid for option "size"\');\n      }\n      const buf = new Uint8Array(length);\n      Object.setPrototypeOf(buf, Buffer3.prototype);\n      return buf;\n    }\n    function Buffer3(arg, encodingOrOffset, length) {\n      if (typeof arg === "number") {\n        if (typeof encodingOrOffset === "string") {\n          throw new TypeError(\n            \'The "string" argument must be of type string. Received type number\'\n          );\n        }\n        return allocUnsafe(arg);\n      }\n      return from(arg, encodingOrOffset, length);\n    }\n    Buffer3.poolSize = 8192;\n    function from(value, encodingOrOffset, length) {\n      if (typeof value === "string") {\n        return fromString(value, encodingOrOffset);\n      }\n      if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n      }\n      if (value == null) {\n        throw new TypeError(\n          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value\n        );\n      }\n      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof value === "number") {\n        throw new TypeError(\n          \'The "value" argument must not be of type number. Received type number\'\n        );\n      }\n      const valueOf = value.valueOf && value.valueOf();\n      if (valueOf != null && valueOf !== value) {\n        return Buffer3.from(valueOf, encodingOrOffset, length);\n      }\n      const b = fromObject(value);\n      if (b)\n        return b;\n      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {\n        return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);\n      }\n      throw new TypeError(\n        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value\n      );\n    }\n    Buffer3.from = function(value, encodingOrOffset, length) {\n      return from(value, encodingOrOffset, length);\n    };\n    Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(Buffer3, Uint8Array);\n    function assertSize(size) {\n      if (typeof size !== "number") {\n        throw new TypeError(\'"size" argument must be of type number\');\n      } else if (size < 0) {\n        throw new RangeError(\'The value "\' + size + \'" is invalid for option "size"\');\n      }\n    }\n    function alloc(size, fill, encoding) {\n      assertSize(size);\n      if (size <= 0) {\n        return createBuffer(size);\n      }\n      if (fill !== void 0) {\n        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n      }\n      return createBuffer(size);\n    }\n    Buffer3.alloc = function(size, fill, encoding) {\n      return alloc(size, fill, encoding);\n    };\n    function allocUnsafe(size) {\n      assertSize(size);\n      return createBuffer(size < 0 ? 0 : checked(size) | 0);\n    }\n    Buffer3.allocUnsafe = function(size) {\n      return allocUnsafe(size);\n    };\n    Buffer3.allocUnsafeSlow = function(size) {\n      return allocUnsafe(size);\n    };\n    function fromString(string, encoding) {\n      if (typeof encoding !== "string" || encoding === "") {\n        encoding = "utf8";\n      }\n      if (!Buffer3.isEncoding(encoding)) {\n        throw new TypeError("Unknown encoding: " + encoding);\n      }\n      const length = byteLength(string, encoding) | 0;\n      let buf = createBuffer(length);\n      const actual = buf.write(string, encoding);\n      if (actual !== length) {\n        buf = buf.slice(0, actual);\n      }\n      return buf;\n    }\n    function fromArrayLike(array) {\n      const length = array.length < 0 ? 0 : checked(array.length) | 0;\n      const buf = createBuffer(length);\n      for (let i = 0; i < length; i += 1) {\n        buf[i] = array[i] & 255;\n      }\n      return buf;\n    }\n    function fromArrayView(arrayView) {\n      if (isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n      }\n      return fromArrayLike(arrayView);\n    }\n    function fromArrayBuffer(array, byteOffset, length) {\n      if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError(\'"offset" is outside of buffer bounds\');\n      }\n      if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError(\'"length" is outside of buffer bounds\');\n      }\n      let buf;\n      if (byteOffset === void 0 && length === void 0) {\n        buf = new Uint8Array(array);\n      } else if (length === void 0) {\n        buf = new Uint8Array(array, byteOffset);\n      } else {\n        buf = new Uint8Array(array, byteOffset, length);\n      }\n      Object.setPrototypeOf(buf, Buffer3.prototype);\n      return buf;\n    }\n    function fromObject(obj) {\n      if (Buffer3.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n          return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n      }\n      if (obj.length !== void 0) {\n        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {\n          return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n      }\n      if (obj.type === "Buffer" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n      }\n    }\n    function checked(length) {\n      if (length >= K_MAX_LENGTH) {\n        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");\n      }\n      return length | 0;\n    }\n    function SlowBuffer(length) {\n      if (+length != length) {\n        length = 0;\n      }\n      return Buffer3.alloc(+length);\n    }\n    Buffer3.isBuffer = function isBuffer(b) {\n      return b != null && b._isBuffer === true && b !== Buffer3.prototype;\n    };\n    Buffer3.compare = function compare(a, b) {\n      if (isInstance(a, Uint8Array))\n        a = Buffer3.from(a, a.offset, a.byteLength);\n      if (isInstance(b, Uint8Array))\n        b = Buffer3.from(b, b.offset, b.byteLength);\n      if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {\n        throw new TypeError(\n          \'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array\'\n        );\n      }\n      if (a === b)\n        return 0;\n      let x = a.length;\n      let y = b.length;\n      for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n          x = a[i];\n          y = b[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    Buffer3.isEncoding = function isEncoding(encoding) {\n      switch (String(encoding).toLowerCase()) {\n        case "hex":\n        case "utf8":\n        case "utf-8":\n        case "ascii":\n        case "latin1":\n        case "binary":\n        case "base64":\n        case "ucs2":\n        case "ucs-2":\n        case "utf16le":\n        case "utf-16le":\n          return true;\n        default:\n          return false;\n      }\n    };\n    Buffer3.concat = function concat(list, length) {\n      if (!Array.isArray(list)) {\n        throw new TypeError(\'"list" argument must be an Array of Buffers\');\n      }\n      if (list.length === 0) {\n        return Buffer3.alloc(0);\n      }\n      let i;\n      if (length === void 0) {\n        length = 0;\n        for (i = 0; i < list.length; ++i) {\n          length += list[i].length;\n        }\n      }\n      const buffer = Buffer3.allocUnsafe(length);\n      let pos = 0;\n      for (i = 0; i < list.length; ++i) {\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n          if (pos + buf.length > buffer.length) {\n            if (!Buffer3.isBuffer(buf))\n              buf = Buffer3.from(buf);\n            buf.copy(buffer, pos);\n          } else {\n            Uint8Array.prototype.set.call(\n              buffer,\n              buf,\n              pos\n            );\n          }\n        } else if (!Buffer3.isBuffer(buf)) {\n          throw new TypeError(\'"list" argument must be an Array of Buffers\');\n        } else {\n          buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n      }\n      return buffer;\n    };\n    function byteLength(string, encoding) {\n      if (Buffer3.isBuffer(string)) {\n        return string.length;\n      }\n      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n      }\n      if (typeof string !== "string") {\n        throw new TypeError(\n          \'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type \' + typeof string\n        );\n      }\n      const len = string.length;\n      const mustMatch = arguments.length > 2 && arguments[2] === true;\n      if (!mustMatch && len === 0)\n        return 0;\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case "ascii":\n          case "latin1":\n          case "binary":\n            return len;\n          case "utf8":\n          case "utf-8":\n            return utf8ToBytes(string).length;\n          case "ucs2":\n          case "ucs-2":\n          case "utf16le":\n          case "utf-16le":\n            return len * 2;\n          case "hex":\n            return len >>> 1;\n          case "base64":\n            return base64ToBytes(string).length;\n          default:\n            if (loweredCase) {\n              return mustMatch ? -1 : utf8ToBytes(string).length;\n            }\n            encoding = ("" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer3.byteLength = byteLength;\n    function slowToString(encoding, start, end) {\n      let loweredCase = false;\n      if (start === void 0 || start < 0) {\n        start = 0;\n      }\n      if (start > this.length) {\n        return "";\n      }\n      if (end === void 0 || end > this.length) {\n        end = this.length;\n      }\n      if (end <= 0) {\n        return "";\n      }\n      end >>>= 0;\n      start >>>= 0;\n      if (end <= start) {\n        return "";\n      }\n      if (!encoding)\n        encoding = "utf8";\n      while (true) {\n        switch (encoding) {\n          case "hex":\n            return hexSlice(this, start, end);\n          case "utf8":\n          case "utf-8":\n            return utf8Slice(this, start, end);\n          case "ascii":\n            return asciiSlice(this, start, end);\n          case "latin1":\n          case "binary":\n            return latin1Slice(this, start, end);\n          case "base64":\n            return base64Slice(this, start, end);\n          case "ucs2":\n          case "ucs-2":\n          case "utf16le":\n          case "utf-16le":\n            return utf16leSlice(this, start, end);\n          default:\n            if (loweredCase)\n              throw new TypeError("Unknown encoding: " + encoding);\n            encoding = (encoding + "").toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer3.prototype._isBuffer = true;\n    function swap(b, n, m) {\n      const i = b[n];\n      b[n] = b[m];\n      b[m] = i;\n    }\n    Buffer3.prototype.swap16 = function swap16() {\n      const len = this.length;\n      if (len % 2 !== 0) {\n        throw new RangeError("Buffer size must be a multiple of 16-bits");\n      }\n      for (let i = 0; i < len; i += 2) {\n        swap(this, i, i + 1);\n      }\n      return this;\n    };\n    Buffer3.prototype.swap32 = function swap32() {\n      const len = this.length;\n      if (len % 4 !== 0) {\n        throw new RangeError("Buffer size must be a multiple of 32-bits");\n      }\n      for (let i = 0; i < len; i += 4) {\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n      }\n      return this;\n    };\n    Buffer3.prototype.swap64 = function swap64() {\n      const len = this.length;\n      if (len % 8 !== 0) {\n        throw new RangeError("Buffer size must be a multiple of 64-bits");\n      }\n      for (let i = 0; i < len; i += 8) {\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n      }\n      return this;\n    };\n    Buffer3.prototype.toString = function toString() {\n      const length = this.length;\n      if (length === 0)\n        return "";\n      if (arguments.length === 0)\n        return utf8Slice(this, 0, length);\n      return slowToString.apply(this, arguments);\n    };\n    Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;\n    Buffer3.prototype.equals = function equals(b) {\n      if (!Buffer3.isBuffer(b))\n        throw new TypeError("Argument must be a Buffer");\n      if (this === b)\n        return true;\n      return Buffer3.compare(this, b) === 0;\n    };\n    Buffer3.prototype.inspect = function inspect() {\n      let str = "";\n      const max = exports.INSPECT_MAX_BYTES;\n      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();\n      if (this.length > max)\n        str += " ... ";\n      return "<Buffer " + str + ">";\n    };\n    if (customInspectSymbol) {\n      Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;\n    }\n    Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n      if (isInstance(target, Uint8Array)) {\n        target = Buffer3.from(target, target.offset, target.byteLength);\n      }\n      if (!Buffer3.isBuffer(target)) {\n        throw new TypeError(\n          \'The "target" argument must be one of type Buffer or Uint8Array. Received type \' + typeof target\n        );\n      }\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = target ? target.length : 0;\n      }\n      if (thisStart === void 0) {\n        thisStart = 0;\n      }\n      if (thisEnd === void 0) {\n        thisEnd = this.length;\n      }\n      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError("out of range index");\n      }\n      if (thisStart >= thisEnd && start >= end) {\n        return 0;\n      }\n      if (thisStart >= thisEnd) {\n        return -1;\n      }\n      if (start >= end) {\n        return 1;\n      }\n      start >>>= 0;\n      end >>>= 0;\n      thisStart >>>= 0;\n      thisEnd >>>= 0;\n      if (this === target)\n        return 0;\n      let x = thisEnd - thisStart;\n      let y = end - start;\n      const len = Math.min(x, y);\n      const thisCopy = this.slice(thisStart, thisEnd);\n      const targetCopy = target.slice(start, end);\n      for (let i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n          x = thisCopy[i];\n          y = targetCopy[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n      if (buffer.length === 0)\n        return -1;\n      if (typeof byteOffset === "string") {\n        encoding = byteOffset;\n        byteOffset = 0;\n      } else if (byteOffset > 2147483647) {\n        byteOffset = 2147483647;\n      } else if (byteOffset < -2147483648) {\n        byteOffset = -2147483648;\n      }\n      byteOffset = +byteOffset;\n      if (numberIsNaN(byteOffset)) {\n        byteOffset = dir ? 0 : buffer.length - 1;\n      }\n      if (byteOffset < 0)\n        byteOffset = buffer.length + byteOffset;\n      if (byteOffset >= buffer.length) {\n        if (dir)\n          return -1;\n        else\n          byteOffset = buffer.length - 1;\n      } else if (byteOffset < 0) {\n        if (dir)\n          byteOffset = 0;\n        else\n          return -1;\n      }\n      if (typeof val === "string") {\n        val = Buffer3.from(val, encoding);\n      }\n      if (Buffer3.isBuffer(val)) {\n        if (val.length === 0) {\n          return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n      } else if (typeof val === "number") {\n        val = val & 255;\n        if (typeof Uint8Array.prototype.indexOf === "function") {\n          if (dir) {\n            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n          } else {\n            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n          }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n      }\n      throw new TypeError("val must be string, number or Buffer");\n    }\n    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n      let indexSize = 1;\n      let arrLength = arr.length;\n      let valLength = val.length;\n      if (encoding !== void 0) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {\n          if (arr.length < 2 || val.length < 2) {\n            return -1;\n          }\n          indexSize = 2;\n          arrLength /= 2;\n          valLength /= 2;\n          byteOffset /= 2;\n        }\n      }\n      function read(buf, i2) {\n        if (indexSize === 1) {\n          return buf[i2];\n        } else {\n          return buf.readUInt16BE(i2 * indexSize);\n        }\n      }\n      let i;\n      if (dir) {\n        let foundIndex = -1;\n        for (i = byteOffset; i < arrLength; i++) {\n          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1)\n              foundIndex = i;\n            if (i - foundIndex + 1 === valLength)\n              return foundIndex * indexSize;\n          } else {\n            if (foundIndex !== -1)\n              i -= i - foundIndex;\n            foundIndex = -1;\n          }\n        }\n      } else {\n        if (byteOffset + valLength > arrLength)\n          byteOffset = arrLength - valLength;\n        for (i = byteOffset; i >= 0; i--) {\n          let found = true;\n          for (let j = 0; j < valLength; j++) {\n            if (read(arr, i + j) !== read(val, j)) {\n              found = false;\n              break;\n            }\n          }\n          if (found)\n            return i;\n        }\n      }\n      return -1;\n    }\n    Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {\n      return this.indexOf(val, byteOffset, encoding) !== -1;\n    };\n    Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    };\n    Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    };\n    function hexWrite(buf, string, offset, length) {\n      offset = Number(offset) || 0;\n      const remaining = buf.length - offset;\n      if (!length) {\n        length = remaining;\n      } else {\n        length = Number(length);\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n      const strLen = string.length;\n      if (length > strLen / 2) {\n        length = strLen / 2;\n      }\n      let i;\n      for (i = 0; i < length; ++i) {\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed))\n          return i;\n        buf[offset + i] = parsed;\n      }\n      return i;\n    }\n    function utf8Write(buf, string, offset, length) {\n      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    function asciiWrite(buf, string, offset, length) {\n      return blitBuffer(asciiToBytes(string), buf, offset, length);\n    }\n    function base64Write(buf, string, offset, length) {\n      return blitBuffer(base64ToBytes(string), buf, offset, length);\n    }\n    function ucs2Write(buf, string, offset, length) {\n      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    Buffer3.prototype.write = function write(string, offset, length, encoding) {\n      if (offset === void 0) {\n        encoding = "utf8";\n        length = this.length;\n        offset = 0;\n      } else if (length === void 0 && typeof offset === "string") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n      } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n          length = length >>> 0;\n          if (encoding === void 0)\n            encoding = "utf8";\n        } else {\n          encoding = length;\n          length = void 0;\n        }\n      } else {\n        throw new Error(\n          "Buffer.write(string, encoding, offset[, length]) is no longer supported"\n        );\n      }\n      const remaining = this.length - offset;\n      if (length === void 0 || length > remaining)\n        length = remaining;\n      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError("Attempt to write outside buffer bounds");\n      }\n      if (!encoding)\n        encoding = "utf8";\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case "hex":\n            return hexWrite(this, string, offset, length);\n          case "utf8":\n          case "utf-8":\n            return utf8Write(this, string, offset, length);\n          case "ascii":\n          case "latin1":\n          case "binary":\n            return asciiWrite(this, string, offset, length);\n          case "base64":\n            return base64Write(this, string, offset, length);\n          case "ucs2":\n          case "ucs-2":\n          case "utf16le":\n          case "utf-16le":\n            return ucs2Write(this, string, offset, length);\n          default:\n            if (loweredCase)\n              throw new TypeError("Unknown encoding: " + encoding);\n            encoding = ("" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    };\n    Buffer3.prototype.toJSON = function toJSON() {\n      return {\n        type: "Buffer",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function base64Slice(buf, start, end) {\n      if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n      } else {\n        return base64.fromByteArray(buf.slice(start, end));\n      }\n    }\n    function utf8Slice(buf, start, end) {\n      end = Math.min(buf.length, end);\n      const res = [];\n      let i = start;\n      while (i < end) {\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n          let secondByte, thirdByte, fourthByte, tempCodePoint;\n          switch (bytesPerSequence) {\n            case 1:\n              if (firstByte < 128) {\n                codePoint = firstByte;\n              }\n              break;\n            case 2:\n              secondByte = buf[i + 1];\n              if ((secondByte & 192) === 128) {\n                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                if (tempCodePoint > 127) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 3:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 4:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              fourthByte = buf[i + 3];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                  codePoint = tempCodePoint;\n                }\n              }\n          }\n        }\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          res.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n      }\n      return decodeCodePointsArray(res);\n    }\n    var MAX_ARGUMENTS_LENGTH = 4096;\n    function decodeCodePointsArray(codePoints) {\n      const len = codePoints.length;\n      if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints);\n      }\n      let res = "";\n      let i = 0;\n      while (i < len) {\n        res += String.fromCharCode.apply(\n          String,\n          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n        );\n      }\n      return res;\n    }\n    function asciiSlice(buf, start, end) {\n      let ret = "";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 127);\n      }\n      return ret;\n    }\n    function latin1Slice(buf, start, end) {\n      let ret = "";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i]);\n      }\n      return ret;\n    }\n    function hexSlice(buf, start, end) {\n      const len = buf.length;\n      if (!start || start < 0)\n        start = 0;\n      if (!end || end < 0 || end > len)\n        end = len;\n      let out = "";\n      for (let i = start; i < end; ++i) {\n        out += hexSliceLookupTable[buf[i]];\n      }\n      return out;\n    }\n    function utf16leSlice(buf, start, end) {\n      const bytes = buf.slice(start, end);\n      let res = "";\n      for (let i = 0; i < bytes.length - 1; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n      }\n      return res;\n    }\n    Buffer3.prototype.slice = function slice(start, end) {\n      const len = this.length;\n      start = ~~start;\n      end = end === void 0 ? len : ~~end;\n      if (start < 0) {\n        start += len;\n        if (start < 0)\n          start = 0;\n      } else if (start > len) {\n        start = len;\n      }\n      if (end < 0) {\n        end += len;\n        if (end < 0)\n          end = 0;\n      } else if (end > len) {\n        end = len;\n      }\n      if (end < start)\n        end = start;\n      const newBuf = this.subarray(start, end);\n      Object.setPrototypeOf(newBuf, Buffer3.prototype);\n      return newBuf;\n    };\n    function checkOffset(offset, ext, length) {\n      if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError("offset is not uint");\n      if (offset + ext > length)\n        throw new RangeError("Trying to access beyond buffer length");\n    }\n    Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      return val;\n    };\n    Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        checkOffset(offset, byteLength2, this.length);\n      }\n      let val = this[offset + --byteLength2];\n      let mul = 1;\n      while (byteLength2 > 0 && (mul *= 256)) {\n        val += this[offset + --byteLength2] * mul;\n      }\n      return val;\n    };\n    Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      return this[offset];\n    };\n    Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] | this[offset + 1] << 8;\n    };\n    Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] << 8 | this[offset + 1];\n    };\n    Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n    };\n    Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n    };\n    Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, "offset");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n      return BigInt(lo) + (BigInt(hi) << BigInt(32));\n    });\n    Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, "offset");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n      return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n    });\n    Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let i = byteLength2;\n      let mul = 1;\n      let val = this[offset + --i];\n      while (i > 0 && (mul *= 256)) {\n        val += this[offset + --i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      if (!(this[offset] & 128))\n        return this[offset];\n      return (255 - this[offset] + 1) * -1;\n    };\n    Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset] | this[offset + 1] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset + 1] | this[offset] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n    };\n    Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n    };\n    Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, "offset");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n    });\n    Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, "offset");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n    });\n    Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, true, 23, 4);\n    };\n    Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, false, 23, 4);\n    };\n    Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, true, 52, 8);\n    };\n    Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, false, 52, 8);\n    };\n    function checkInt(buf, value, offset, ext, max, min) {\n      if (!Buffer3.isBuffer(buf))\n        throw new TypeError(\'"buffer" argument must be a Buffer instance\');\n      if (value > max || value < min)\n        throw new RangeError(\'"value" argument is out of bounds\');\n      if (offset + ext > buf.length)\n        throw new RangeError("Index out of range");\n    }\n    Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let mul = 1;\n      let i = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 255, 0);\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 255;\n      return offset + 4;\n    };\n    Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    function wrtBigUInt64LE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      return offset;\n    }\n    function wrtBigUInt64BE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset + 7] = lo;\n      lo = lo >> 8;\n      buf[offset + 6] = lo;\n      lo = lo >> 8;\n      buf[offset + 5] = lo;\n      lo = lo >> 8;\n      buf[offset + 4] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset + 3] = hi;\n      hi = hi >> 8;\n      buf[offset + 2] = hi;\n      hi = hi >> 8;\n      buf[offset + 1] = hi;\n      hi = hi >> 8;\n      buf[offset] = hi;\n      return offset + 8;\n    }\n    Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));\n    });\n    Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));\n    });\n    Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = 0;\n      let mul = 1;\n      let sub = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      let sub = 0;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 127, -128);\n      if (value < 0)\n        value = 255 + value + 1;\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n      return offset + 4;\n    };\n    Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      if (value < 0)\n        value = 4294967295 + value + 1;\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));\n    });\n    Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));\n    });\n    function checkIEEE754(buf, value, offset, ext, max, min) {\n      if (offset + ext > buf.length)\n        throw new RangeError("Index out of range");\n      if (offset < 0)\n        throw new RangeError("Index out of range");\n    }\n    function writeFloat(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 23, 4);\n      return offset + 4;\n    }\n    Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, true, noAssert);\n    };\n    Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, false, noAssert);\n    };\n    function writeDouble(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 52, 8);\n      return offset + 8;\n    }\n    Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, true, noAssert);\n    };\n    Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, false, noAssert);\n    };\n    Buffer3.prototype.copy = function copy(target, targetStart, start, end) {\n      if (!Buffer3.isBuffer(target))\n        throw new TypeError("argument should be a Buffer");\n      if (!start)\n        start = 0;\n      if (!end && end !== 0)\n        end = this.length;\n      if (targetStart >= target.length)\n        targetStart = target.length;\n      if (!targetStart)\n        targetStart = 0;\n      if (end > 0 && end < start)\n        end = start;\n      if (end === start)\n        return 0;\n      if (target.length === 0 || this.length === 0)\n        return 0;\n      if (targetStart < 0) {\n        throw new RangeError("targetStart out of bounds");\n      }\n      if (start < 0 || start >= this.length)\n        throw new RangeError("Index out of range");\n      if (end < 0)\n        throw new RangeError("sourceEnd out of bounds");\n      if (end > this.length)\n        end = this.length;\n      if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n      }\n      const len = end - start;\n      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {\n        this.copyWithin(targetStart, start, end);\n      } else {\n        Uint8Array.prototype.set.call(\n          target,\n          this.subarray(start, end),\n          targetStart\n        );\n      }\n      return len;\n    };\n    Buffer3.prototype.fill = function fill(val, start, end, encoding) {\n      if (typeof val === "string") {\n        if (typeof start === "string") {\n          encoding = start;\n          start = 0;\n          end = this.length;\n        } else if (typeof end === "string") {\n          encoding = end;\n          end = this.length;\n        }\n        if (encoding !== void 0 && typeof encoding !== "string") {\n          throw new TypeError("encoding must be a string");\n        }\n        if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {\n          throw new TypeError("Unknown encoding: " + encoding);\n        }\n        if (val.length === 1) {\n          const code = val.charCodeAt(0);\n          if (encoding === "utf8" && code < 128 || encoding === "latin1") {\n            val = code;\n          }\n        }\n      } else if (typeof val === "number") {\n        val = val & 255;\n      } else if (typeof val === "boolean") {\n        val = Number(val);\n      }\n      if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError("Out of range index");\n      }\n      if (end <= start) {\n        return this;\n      }\n      start = start >>> 0;\n      end = end === void 0 ? this.length : end >>> 0;\n      if (!val)\n        val = 0;\n      let i;\n      if (typeof val === "number") {\n        for (i = start; i < end; ++i) {\n          this[i] = val;\n        }\n      } else {\n        const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) {\n          throw new TypeError(\'The value "\' + val + \'" is invalid for argument "value"\');\n        }\n        for (i = 0; i < end - start; ++i) {\n          this[i + start] = bytes[i % len];\n        }\n      }\n      return this;\n    };\n    var errors = {};\n    function E(sym, getMessage, Base) {\n      errors[sym] = class NodeError extends Base {\n        constructor() {\n          super();\n          Object.defineProperty(this, "message", {\n            value: getMessage.apply(this, arguments),\n            writable: true,\n            configurable: true\n          });\n          this.name = `${this.name} [${sym}]`;\n          this.stack;\n          delete this.name;\n        }\n        get code() {\n          return sym;\n        }\n        set code(value) {\n          Object.defineProperty(this, "code", {\n            configurable: true,\n            enumerable: true,\n            value,\n            writable: true\n          });\n        }\n        toString() {\n          return `${this.name} [${sym}]: ${this.message}`;\n        }\n      };\n    }\n    E(\n      "ERR_BUFFER_OUT_OF_BOUNDS",\n      function(name) {\n        if (name) {\n          return `${name} is outside of buffer bounds`;\n        }\n        return "Attempt to access memory outside buffer bounds";\n      },\n      RangeError\n    );\n    E(\n      "ERR_INVALID_ARG_TYPE",\n      function(name, actual) {\n        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;\n      },\n      TypeError\n    );\n    E(\n      "ERR_OUT_OF_RANGE",\n      function(str, range, input) {\n        let msg = `The value of "${str}" is out of range.`;\n        let received = input;\n        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n          received = addNumericalSeparator(String(input));\n        } else if (typeof input === "bigint") {\n          received = String(input);\n          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n            received = addNumericalSeparator(received);\n          }\n          received += "n";\n        }\n        msg += ` It must be ${range}. Received ${received}`;\n        return msg;\n      },\n      RangeError\n    );\n    function addNumericalSeparator(val) {\n      let res = "";\n      let i = val.length;\n      const start = val[0] === "-" ? 1 : 0;\n      for (; i >= start + 4; i -= 3) {\n        res = `_${val.slice(i - 3, i)}${res}`;\n      }\n      return `${val.slice(0, i)}${res}`;\n    }\n    function checkBounds(buf, offset, byteLength2) {\n      validateNumber(offset, "offset");\n      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n        boundsError(offset, buf.length - (byteLength2 + 1));\n      }\n    }\n    function checkIntBI(value, min, max, buf, offset, byteLength2) {\n      if (value > max || value < min) {\n        const n = typeof min === "bigint" ? "n" : "";\n        let range;\n        if (byteLength2 > 3) {\n          if (min === 0 || min === BigInt(0)) {\n            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n          } else {\n            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n          }\n        } else {\n          range = `>= ${min}${n} and <= ${max}${n}`;\n        }\n        throw new errors.ERR_OUT_OF_RANGE("value", range, value);\n      }\n      checkBounds(buf, offset, byteLength2);\n    }\n    function validateNumber(value, name) {\n      if (typeof value !== "number") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);\n      }\n    }\n    function boundsError(value, length, type) {\n      if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);\n      }\n      if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n      }\n      throw new errors.ERR_OUT_OF_RANGE(\n        type || "offset",\n        `>= ${type ? 1 : 0} and <= ${length}`,\n        value\n      );\n    }\n    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n    function base64clean(str) {\n      str = str.split("=")[0];\n      str = str.trim().replace(INVALID_BASE64_RE, "");\n      if (str.length < 2)\n        return "";\n      while (str.length % 4 !== 0) {\n        str = str + "=";\n      }\n      return str;\n    }\n    function utf8ToBytes(string, units) {\n      units = units || Infinity;\n      let codePoint;\n      const length = string.length;\n      let leadSurrogate = null;\n      const bytes = [];\n      for (let i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n        if (codePoint > 55295 && codePoint < 57344) {\n          if (!leadSurrogate) {\n            if (codePoint > 56319) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            } else if (i + 1 === length) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n          if (codePoint < 56320) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n            leadSurrogate = codePoint;\n            continue;\n          }\n          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n        } else if (leadSurrogate) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n        }\n        leadSurrogate = null;\n        if (codePoint < 128) {\n          if ((units -= 1) < 0)\n            break;\n          bytes.push(codePoint);\n        } else if (codePoint < 2048) {\n          if ((units -= 2) < 0)\n            break;\n          bytes.push(\n            codePoint >> 6 | 192,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 65536) {\n          if ((units -= 3) < 0)\n            break;\n          bytes.push(\n            codePoint >> 12 | 224,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 1114112) {\n          if ((units -= 4) < 0)\n            break;\n          bytes.push(\n            codePoint >> 18 | 240,\n            codePoint >> 12 & 63 | 128,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else {\n          throw new Error("Invalid code point");\n        }\n      }\n      return bytes;\n    }\n    function asciiToBytes(str) {\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        byteArray.push(str.charCodeAt(i) & 255);\n      }\n      return byteArray;\n    }\n    function utf16leToBytes(str, units) {\n      let c, hi, lo;\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0)\n          break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n      }\n      return byteArray;\n    }\n    function base64ToBytes(str) {\n      return base64.toByteArray(base64clean(str));\n    }\n    function blitBuffer(src, dst, offset, length) {\n      let i;\n      for (i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length)\n          break;\n        dst[i + offset] = src[i];\n      }\n      return i;\n    }\n    function isInstance(obj, type) {\n      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n    }\n    function numberIsNaN(obj) {\n      return obj !== obj;\n    }\n    var hexSliceLookupTable = function() {\n      const alphabet = "0123456789abcdef";\n      const table = new Array(256);\n      for (let i = 0; i < 16; ++i) {\n        const i16 = i * 16;\n        for (let j = 0; j < 16; ++j) {\n          table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n      }\n      return table;\n    }();\n    function defineBigIntMethod(fn) {\n      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;\n    }\n    function BufferBigIntNotDefined() {\n      throw new Error("BigInt not supported");\n    }\n  }\n});\n\n// src/index.ts\nvar import_buffer = __toESM(require_buffer(), 1);\nvar configProviders = [\n  {\n    name: "vpei",\n    type: "b64",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/vpei/Free-Node-Merge/main/o/node.txt"\n    ]\n  },\n  {\n    name: "mfuu",\n    type: "b64",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/mfuu/v2ray/master/v2ray"\n    ]\n  },\n  {\n    name: "peasoft",\n    type: "raw",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/peasoft/NoMoreWalls/master/list_raw.txt"\n    ]\n  },\n  {\n    name: "ermaozi",\n    type: "b64",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/ermaozi/get_subscribe/main/subscribe/v2ray.txt"\n    ]\n  },\n  {\n    name: "aiboboxx",\n    type: "b64",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/aiboboxx/v2rayfree/main/v2"\n    ]\n  },\n  {\n    name: "mahdibland",\n    type: "raw",\n    random: false,\n    urls: [\n      "https://raw.githubusercontent.com/mahdibland/V2RayAggregator/master/sub/splitted/vmess.txt",\n      "https://raw.githubusercontent.com/mahdibland/V2RayAggregator/master/sub/splitted/trojan.txt"\n    ]\n  },\n  {\n    name: "autoproxy",\n    type: "b64",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription1",\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription2",\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription3",\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription4",\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription5",\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription6",\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription7",\n      "https://raw.githubusercontent.com/w1770946466/Auto_proxy/main/Long_term_subscription8"\n    ]\n  },\n  {\n    name: "freefq",\n    type: "b64",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/freefq/free/master/v2"\n    ]\n  },\n  {\n    name: "pawdroid",\n    type: "b64",\n    random: true,\n    urls: [\n      "https://raw.githubusercontent.com/Pawdroid/Free-servers/main/sub"\n    ]\n  }\n];\nvar ipProviderLink = "https://raw.githubusercontent.com/vfarid/cf-clean-ips/main/list.json";\nvar selectedTypes = SELECTED_TYPES;\nvar selectedProviders = SELECTED_PROVIDERS;\nvar operators = [];\nvar cleanIPs = [];\nvar maxConfigs = MAX_CONFIGS;\nvar includeOriginalConfigs = INCLUDE_ORIGINAL;\nvar onlyOriginalConfigs = ONLY_ORIGINAL;\nvar alpnList = [\n  "h2,http/1.1",\n  "h2,http/1.1",\n  "h2,http/1.1",\n  "http/1.1"\n];\nvar fpList = [\n  "chrome",\n  "chrome",\n  "chrome",\n  "firefox",\n  "safari",\n  "edge",\n  "ios",\n  "android",\n  "random"\n];\nvar domainList = [\n  "discord.com",\n  "laravel.com",\n  "cdnjs.com",\n  "www.speedtest.net",\n  "workers.dev",\n  "nginx.com",\n  "chat.openai.com",\n  "auth0.openai.com",\n  "codepen.io",\n  "api.jquery.com"\n];\nvar src_default = {\n  async fetch(request) {\n    const url = new URL(request.url);\n    const path = url.pathname.replace(/^\\/|\\/$/g, "");\n    const parts = path.split("/");\n    const type = parts[0].toLowerCase();\n    if (type === "sub") {\n      if (parts[1] !== void 0) {\n        if (parts[1].includes(".") || parts[1].includes(":")) {\n          cleanIPs = parts[1].toLowerCase().trim().split(",").map((ip2) => {\n            return { ip: ip2, operator: "IP" };\n          });\n          operators = ["IP"];\n        } else {\n          try {\n            operators = parts[1].toUpperCase().trim().split(",");\n            cleanIPs = await fetch(ipProviderLink).then((r) => r.json()).then((j) => j.ipv4);\n            cleanIPs = cleanIPs.filter((el) => operators.includes(el.operator));\n          } catch (e) {\n          }\n        }\n      }\n      if (url.searchParams.has("max")) {\n        maxConfigs = parseInt(url.searchParams.get("max"));\n        if (!maxConfigs) {\n          maxConfigs = MAX_CONFIGS;\n        }\n      }\n      if (url.searchParams.has("original")) {\n        const original = url.searchParams.get("original");\n        includeOriginalConfigs = ["1", "true", "yes", "y"].includes(original.toLowerCase());\n      }\n      if (includeOriginalConfigs && url.searchParams.has("merge")) {\n        const merge = url.searchParams.get("merge");\n        onlyOriginalConfigs = !["1", "true", "yes", "y"].includes(merge.toLowerCase());\n      }\n      if (url.searchParams.has("fp")) {\n        fpList = [url.searchParams.get("fp").toLocaleLowerCase().trim()];\n      }\n      if (url.searchParams.has("alpn")) {\n        alpnList = [url.searchParams.get("alpn").toLocaleLowerCase().trim()];\n      }\n      if (url.searchParams.has("type")) {\n        selectedTypes = url.searchParams.get("type").toLocaleLowerCase().split(",").map((s) => s.trim());\n      }\n      if (url.searchParams.has("provider")) {\n        selectedProviders = url.searchParams.get("provider").toLocaleLowerCase().split(",").map((s) => s.trim());\n      }\n      if (includeOriginalConfigs && !onlyOriginalConfigs) {\n        maxConfigs = Math.floor(maxConfigs / 2);\n      }\n      var configList = [];\n      var acceptableConfigList = [];\n      var finalConfigList = [];\n      var newConfigs;\n      const configPerList = Math.floor(maxConfigs / configProviders.length);\n      for (const sub of configProviders) {\n        try {\n          if (selectedProviders.length > 0 && !selectedProviders.includes(sub.name)) {\n            continue;\n          }\n          newConfigs = [];\n          for (const link of sub.urls) {\n            var content = await fetch(link).then((r) => r.text());\n            if (sub.type === "b64") {\n              content = import_buffer.Buffer.from(content, "base64").toString("utf-8");\n            }\n            newConfigs.push(content);\n          }\n          newConfigs = newConfigs.join("\\n").split("\\n");\n          if (!onlyOriginalConfigs) {\n            acceptableConfigList.push({\n              name: sub.name,\n              random: sub.random,\n              count: configPerList,\n              configs: newConfigs.filter((cnf) => cnf.match(/^(vmess|vless|trojan):\\/\\//i)),\n              mergedConfigs: null\n            });\n          }\n          if (includeOriginalConfigs) {\n            configList.push({\n              name: sub.name,\n              random: sub.random,\n              count: configPerList,\n              configs: newConfigs.filter((cnf) => cnf.match(new RegExp(`(${selectedTypes.join("|")})`, "i"))),\n              renamesConfigs: null\n            });\n          }\n        } catch (e) {\n        }\n      }\n      var ipList = [];\n      if (!cleanIPs.length) {\n        operators = ["General"];\n        cleanIPs = [{ ip: "", operator: "General" }];\n      }\n      for (const operator of operators) {\n        var ipList = cleanIPs.filter((el) => el.operator == operator).slice(0, 5);\n        var ip = ipList[Math.floor(Math.random() * ipList.length)].ip;\n        for (const i2 in acceptableConfigList) {\n          const el = acceptableConfigList[i2];\n          acceptableConfigList[i2].mergedConfigs = el.configs.map(decodeConfig).map((cnf) => mixConfig(cnf, url, ip, operator, el.name)).filter((cnf) => !!cnf && cnf.id).map(encodeConfig).filter((cnf) => !!cnf);\n        }\n        var remaining = 0;\n        for (var i = 0; i < 5; i++) {\n          for (const el of acceptableConfigList) {\n            if (el.count > el.mergedConfigs.length) {\n              remaining = remaining + el.count - el.mergedConfigs.length;\n              el.count = el.mergedConfigs.length;\n            } else if (el.count < el.mergedConfigs.length && remaining > 0) {\n              el.count = el.count + Math.ceil(remaining / 3);\n              remaining = remaining - Math.ceil(remaining / 3);\n            }\n          }\n        }\n        for (const el of acceptableConfigList) {\n          finalConfigList = finalConfigList.concat(\n            el.random ? getMultipleRandomElements(el.mergedConfigs, el.count) : el.mergedConfigs.slice(0, el.count)\n          );\n        }\n      }\n      if (includeOriginalConfigs) {\n        for (const i2 in configList) {\n          const el = configList[i2];\n          configList[i2].renamedConfigs = el.configs.map(decodeConfig).map((cnf) => renameConfig(cnf, el.name)).filter((cnf) => !!cnf && cnf.id).map(encodeConfig).filter((cnf) => !!cnf);\n        }\n        var remaining = 0;\n        for (var i = 0; i < 5; i++) {\n          for (const el of configList) {\n            if (el.count > el.renamedConfigs.length) {\n              remaining = remaining + el.count - el.renamedConfigs.length;\n              el.count = el.renamedConfigs.length;\n            } else if (el.count < el.renamedConfigs.length && remaining > 0) {\n              el.count = el.count + Math.ceil(remaining / 3);\n              remaining = remaining - Math.ceil(remaining / 3);\n            }\n          }\n        }\n        for (const el of configList) {\n          finalConfigList = finalConfigList.concat(\n            el.random ? getMultipleRandomElements(el.renamedConfigs, el.count) : el.renamedConfigs.slice(0, el.count)\n          );\n        }\n      }\n      return new Response(import_buffer.Buffer.from(finalConfigList.join("\\n"), "utf-8").toString("base64"));\n    } else if (path) {\n      const addrPath = url.pathname.replace(/^\\/|\\/$/g, "");\n      const newUrl = new URL("https://" + addrPath);\n      return fetch(new Request(newUrl, request));\n    } else {\n      return new Response(`<!DOCTYPE html>\n<body dir="rtl">\n  <h3><font color="green">\\u0647\\u0645\\u0647 \\u0686\\u06CC \\u062F\\u0631\\u0633\\u062A\\u0647</font></h3>\n  <p />\n  <p>\n    \\u0627\\u06CC\\u0646 \\u0644\\u06CC\\u0646\\u06A9 sub \\u0631\\u0627 \\u062F\\u0631 \\u0627\\u067E v2ray \\u062E\\u0648\\u062F \\u0628\\u0647 \\u0634\\u06A9\\u0644 \\u0632\\u06CC\\u0631 \\u06A9\\u067E\\u06CC \\u06A9\\u0646\\u06CC\\u062F. \\u062F\\u0631 \\u0627\\u06CC\\u0646 \\u0635\\u0648\\u0631\\u062A \\u06CC\\u06A9 \\u062F\\u0627\\u0645\\u06CC\\u0646 \\u0627\\u062A\\u0641\\u0627\\u0642\\u06CC \\u0627\\u0632 \\u062E\\u0648\\u062F \\u0648\\u0631\\u06A9\\u0631 \\u0628\\u0647 \\u0639\\u0646\\u0648\\u0627\\u0646 \\u0622\\u06CC\\u200C\\u067E\\u06CC \\u062A\\u0645\\u06CC\\u0632 \\u0627\\u0646\\u062A\\u062E\\u0627\\u0628 \\u0634\\u062F\\u0647 \\u0648 \\u0631\\u0648\\u06CC \\u0628\\u06CC\\u0634\\u062A\\u0631 \\u0627\\u0648\\u067E\\u0631\\u0627\\u062A\\u0648\\u0631\\u0647\\u0627 \\u0628\\u0627 \\u06A9\\u06CC\\u0641\\u06CC\\u062A \\u062E\\u0648\\u0628 \\u067E\\u0627\\u0633\\u062E \\u062E\\u0648\\u0627\\u0647\\u062F \\u062F\\u0627\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub">https://${url.hostname}/sub</a>\n  </p>\n  <p>\n    \\u0627\\u06CC\\u0646 \\u0644\\u06CC\\u0646\\u06A9 sub \\u0631\\u0627 \\u0647\\u0645\\u0631\\u0627\\u0647 \\u0628\\u0627 \\u06A9\\u062F \\u0627\\u067E\\u0631\\u0627\\u062A\\u0648\\u0631 \\u062F\\u0631 \\u0627\\u067E v2ray \\u062E\\u0648\\u062F \\u06A9\\u067E\\u06CC \\u06A9\\u0646\\u06CC\\u062F. \\u0628\\u0631\\u0627\\u06CC \\u0645\\u062B\\u0627\\u0644 \\u062F\\u0631 \\u0647\\u0645\\u0631\\u0627\\u0647 \\u0627\\u0648\\u0644 \\u0628\\u0647 \\u0634\\u06A9\\u0644 \\u0632\\u06CC\\u0631 \\u062E\\u0648\\u0627\\u0647\\u062F \\u0628\\u0648\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub/mci">https://${url.hostname}/sub/mci</a>\n  </p>\n  <p>\n    \\u0648 \\u06CC\\u0627 \\u0647\\u0645\\u06CC\\u0646 \\u0644\\u06CC\\u0646\\u06A9 \\u0631\\u0627 \\u0647\\u0645\\u0631\\u0627\\u0647 \\u0622\\u06CC\\u200C\\u067E\\u06CC \\u062A\\u0645\\u06CC\\u0632 \\u062F\\u0631 \\u0627\\u067E \\u062E\\u0648\\u062F \\u0627\\u0636\\u0627\\u0641\\u0647 \\u06A9\\u0646\\u06CC\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub/1.2.3.4">https://${url.hostname}/sub/1.2.3.4</a>\n  </p>\n  <p>\n    \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u0686\\u0646\\u062F \\u0622\\u06CC\\u200C\\u067E\\u06CC \\u062A\\u0645\\u06CC\\u0632 \\u0631\\u0627 \\u0628\\u0627 \\u06A9\\u0627\\u0645\\u0627 \\u062C\\u062F\\u0627 \\u06A9\\u0646\\u06CC\\u062F. \\u062F\\u0631 \\u0627\\u06CC\\u0646 \\u0635\\u0648\\u0631\\u062A \\u0628\\u0631\\u0627\\u06CC \\u0647\\u0631 \\u0622\\u06CC\\u200C\\u067E\\u06CC \\u062A\\u0645\\u06CC\\u0632 \\u0628\\u0647 \\u062A\\u0639\\u062F\\u0627\\u062F \\u0642\\u062F\\u06CC\\u062F \\u0634\\u062F\\u0647\\u060C \\u06A9\\u0627\\u0646\\u0641\\u06CC\\u06A9 \\u062A\\u0631\\u06A9\\u06CC\\u0628 \\u0634\\u062F\\u0647 \\u0628\\u0627 \\u0648\\u0631\\u06A9\\u0631 \\u062A\\u062D\\u0648\\u06CC\\u0644 \\u0645\\u06CC \\u062F\\u0647\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub/1.2.3.4,9.8.7.6">https://${url.hostname}/sub/1.2.3.4,9.8.7.6</a>\n  </p>\n  <p>\n    \\u062F\\u0642\\u06CC\\u0642\\u0627 \\u0628\\u0627 \\u0647\\u0645\\u06CC\\u0646 \\u0645\\u062F\\u0644 \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u062F\\u0627\\u0645\\u06CC\\u0646 \\u0622\\u06CC\\u200C\\u067E\\u06CC \\u062A\\u0645\\u06CC\\u0632 \\u0646\\u06CC\\u0632 \\u0627\\u0633\\u062A\\u0641\\u0627\\u062F\\u0647 \\u06A9\\u0646\\u06CC\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub/mci.ircf.space">https://${url.hostname}/sub/mci.ircf.space</a>\n  </p>\n  <p>\n    \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u0627\\u0632 \\u0686\\u0646\\u062F \\u0633\\u0627\\u0628\\u062F\\u0627\\u0645\\u0646\\u06CC\\u0646 \\u0622\\u06CC\\u0621\\u06CC \\u062A\\u0645\\u06CC\\u0632 \\u0646\\u06CC\\u0632 \\u0627\\u0633\\u062A\\u0641\\u0627\\u062F\\u0647 \\u06A9\\u0646\\u06CC\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub/mci.ircf.space,my.domain.me">https://${url.hostname}/sub/mci.ircf.space,my.domain.me</a>\n  </p>\n  <p>\n    \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u0628\\u0627 \\u0645\\u062A\\u063A\\u06CC\\u0631 max \\u062A\\u0639\\u062F\\u0627\\u062F \\u06A9\\u0627\\u0646\\u0641\\u06CC\\u06AF \\u0631\\u0627 \\u0645\\u0634\\u062E\\u0635 \\u06A9\\u0646\\u06CC\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub?max=200">https://${url.hostname}/sub?max=200</a>\n  </p>\n  <p>\n    \\u0647\\u0645\\u0686\\u0646\\u06CC\\u0646 \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u0628\\u0627 \\u0645\\u062A\\u063A\\u06CC\\u0631 original \\u0628\\u0627 \\u0639\\u062F\\u062F 0 \\u06CC\\u0627 1 \\u0648 \\u06CC\\u0627 \\u0628\\u0627 yes/no \\u0645\\u0634\\u062E\\u0635 \\u06A9\\u0646\\u06CC\\u062F \\u06A9\\u0647 \\u06A9\\u0627\\u0646\\u0641\\u06CC\\u06AF\\u200C\\u0647\\u0627\\u06CC \\u0627\\u0635\\u0644\\u06CC (\\u062A\\u0631\\u06A9\\u06CC\\u0628 \\u0646\\u0634\\u062F\\u0647 \\u0628\\u0627 \\u0648\\u0631\\u06A9\\u0631) \\u0647\\u0645 \\u062F\\u0631 \\u062E\\u0631\\u0648\\u062C\\u06CC \\u0622\\u0648\\u0631\\u062F\\u0647 \\u0634\\u0648\\u0646\\u062F \\u06CC\\u0627 \\u0646\\u0647:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub/1.2.3.4?max=200&original=yes">https://${url.hostname}/sub/1.2.3.4?max=200&original=yes</a>\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub?max=200&original=0">https://${url.hostname}/sub?max=200&original=0</a>\n  </p>\n  <p>\n    \\u062F\\u0631 \\u0635\\u0648\\u0631\\u062A \\u0644\\u0632\\u0648\\u0645 \\u0645\\u06CC \\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u0628\\u0627 \\u0645\\u062A\\u063A\\u06CC\\u0631 merge \\u0645\\u0634\\u062E\\u0635 \\u06A9\\u0646\\u06CC\\u062F \\u06A9\\u0647 \\u06A9\\u0627\\u0646\\u0641\\u06CC\\u06AF\\u200C\\u0647\\u0627\\u06CC \\u062A\\u0631\\u06A9\\u06CC\\u0628\\u06CC \\u062D\\u0630\\u0641 \\u0634\\u0648\\u0646\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub?max=200&original=yes&merge=no">https://${url.hostname}/sub?max=200&original=yes&merge=no</a>\n  </p>\n  <p>\n    \\u0647\\u0645\\u0686\\u0646\\u06CC\\u0646 \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F fp \\u0648 alpn \\u0631\\u0627 \\u0646\\u06CC\\u0632 \\u0645\\u0634\\u062E\\u0635 \\u06A9\\u0646\\u06CC\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub?max=200&fp=chrome&alpn=h2,http/1.1">https://${url.hostname}/sub?max=200&fp=chrome&alpn=h2,http/1.1</a>\n  </p>\n  <p>\n    \\u062F\\u0631 \\u0635\\u0648\\u0631\\u062A \\u0646\\u06CC\\u0627\\u0632 \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u0628\\u0631\\u0627\\u06CC \\u06A9\\u0627\\u0646\\u0641\\u06CC\\u06AF\\u200C\\u0647\\u0627\\u06CC \\u0627\\u0635\\u0644\\u06CC\\u060C \\u062A\\u0639\\u06CC\\u06CC\\u0646 \\u06A9\\u0646\\u06CC\\u062F \\u06A9\\u0647 \\u06A9\\u062F\\u0627\\u0645 \\u0646\\u0648\\u0639 \\u0627\\u0632 \\u06A9\\u0627\\u0646\\u0641\\u06CC\\u06AF\\u200C\\u0647\\u0627 \\u0631\\u0627 \\u0628\\u0631\\u0627\\u06CC \\u0634\\u0645\\u0627 \\u0644\\u06CC\\u0633\\u062A \\u06A9\\u0646\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub?max=200&type=vmess,ss,ssr,vless">https://${url.hostname}/sub?max=200&type=vmess,ss,ssr,vless</a>\n  </p>\n  <p>\n    \\u062F\\u0631 \\u0635\\u0648\\u0631\\u062A \\u0646\\u06CC\\u0627\\u0632 \\u0645\\u06CC\\u200C\\u062A\\u0648\\u0627\\u0646\\u06CC\\u062F \\u0644\\u06CC\\u0633\\u062A \\u067E\\u0631\\u0648\\u0648\\u0627\\u06CC\\u062F\\u0631\\u0647\\u0627 \\u0631\\u0627 \\u0645\\u062D\\u062F\\u0648\\u062F \\u06A9\\u0646\\u06CC\\u062F:\n  </p>\n  <p>\n    <a href="https://${url.hostname}/sub?provider=mahdibland,vpei">https://${url.hostname}/sub?provider=mahdibland,vpei</a>\n  </p>\n</body>`, {\n        headers: {\n          "content-type": "text/html;charset=UTF-8"\n        }\n      });\n    }\n  }\n};\nfunction encodeConfig(conf) {\n  var configStr = null;\n  try {\n    if (conf.protocol === "vmess") {\n      delete conf.protocol;\n      configStr = "vmess://" + import_buffer.Buffer.from(JSON.stringify(conf), "utf-8").toString("base64");\n    } else if (["vless", "trojan"].includes(conf?.protocol)) {\n      configStr = `${conf.protocol}://${conf.id}@${conf.add}:${conf.port}?security=${conf.tls}&type=${conf.net}&path=${encodeURIComponent(conf.path)}&host=${encodeURIComponent(conf.host)}&tls=${conf.tls}&sni=${conf.sni}#${encodeURIComponent(conf.ps)}`;\n    }\n  } catch (e) {\n  }\n  return configStr;\n}\nfunction decodeConfig(configStr) {\n  var match = null;\n  var conf = null;\n  if (configStr.startsWith("vmess://")) {\n    try {\n      conf = JSON.parse(import_buffer.Buffer.from(configStr.substring(8), "base64").toString("utf-8"));\n      conf.protocol = "vmess";\n    } catch (e) {\n    }\n  } else if (match = configStr.match(/^(?<protocol>trojan|vless):\\/\\/(?<id>.*)@(?<add>.*):(?<port>\\d+)\\??(?<options>.*)#(?<ps>.*)$/)) {\n    try {\n      const optionsArr = match.groups.options.split("&") ?? [];\n      const optionsObj = optionsArr.reduce((obj, option) => {\n        const [key, value] = option.split("=");\n        obj[key] = decodeURIComponent(value);\n        return obj;\n      }, {});\n      conf = {\n        protocol: match.groups.protocol,\n        id: match.groups.id,\n        add: match.groups?.add,\n        port: match.groups.port ?? 443,\n        ps: match.groups?.ps,\n        net: optionsObj.type ?? (optionsObj.net ?? "tcp"),\n        host: optionsObj?.host,\n        path: optionsObj?.path,\n        tls: optionsObj.security ?? "none",\n        sni: optionsObj?.sni,\n        alpn: optionsObj?.alpn\n      };\n    } catch (e) {\n    }\n  }\n  return conf;\n}\nfunction mixConfig(conf, url, ip, operator, provider) {\n  try {\n    if (conf.tls != "tls" || conf.net == "tcp") {\n      return {};\n    }\n    var addr = conf.sni;\n    if (!addr) {\n      if (conf.host && !isIp(conf.host)) {\n        addr = conf.host;\n      } else if (conf.add && !isIp(conf.add)) {\n        addr = conf.add;\n      }\n    }\n    if (!addr) {\n      return {};\n    }\n    if (addr.endsWith(".workers.dev")) {\n      const part1 = conf.path.split("/").pop();\n      const part2 = conf.path.substring(0, conf.path.length - part1.length - 1);\n      var path;\n      if (part1.includes(":")) {\n        addr = part1.replace(/^\\//g, "").split(":");\n        conf.port = parseInt(addr[1]);\n        addr = addr[0];\n        path = "/" + part2.replace(/^\\//g, "");\n      } else if (part2.includes(":")) {\n        addr = part2.replace(/^\\//g, "").split(":");\n        conf.port = parseInt(addr[1]);\n        addr = addr[0];\n        path = "/" + part1.replace(/^\\//g, "");\n      } else if (part1.includes(".")) {\n        addr = part1.replace(/^\\//g, "");\n        conf.port = 443;\n        path = "/" + part2.replace(/^\\//g, "");\n      } else {\n        addr = part2.replace(/^\\//g, "");\n        conf.port = 443;\n        path = "/" + part1.replace(/^\\//g, "");\n      }\n      conf.path = path;\n    }\n    conf.ps = conf?.ps ? conf.ps : conf.name;\n    if (provider) {\n      conf.ps = provider + "-" + conf.ps;\n    }\n    conf.ps = conf.ps + "-worker-" + operator.toLocaleLowerCase();\n    conf.name = conf.ps;\n    conf.host = url.hostname;\n    conf.sni = url.hostname;\n    if (ip) {\n      conf.add = ip;\n    } else {\n      conf.add = domainList[Math.floor(Math.random() * domainList.length)];\n    }\n    if (conf?.port != 443) {\n      return {};\n    }\n    conf.path = "/" + addr + (conf?.path ? "/" + conf.path.replace(/^\\//g, "") : "");\n    conf.alpn = alpnList[Math.floor(Math.random() * alpnList.length)];\n    conf.fp = fpList[Math.floor(Math.random() * fpList.length)];\n    conf.utls = conf.fp;\n    return conf;\n  } catch (e) {\n    return {};\n  }\n}\nfunction renameConfig(conf, provider) {\n  try {\n    conf.ps = conf?.ps ? conf.ps : conf.name;\n    conf.ps = provider + "-" + conf.ps;\n    return conf;\n  } catch (e) {\n    return {};\n  }\n}\nfunction getMultipleRandomElements(arr, num) {\n  var shuffled = arr.slice(0, num * 2).sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, num);\n}\nfunction isIp(str) {\n  try {\n    if (str == "" || str == void 0)\n      return false;\n    if (!/^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){2}\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-4])$/.test(str)) {\n      return false;\n    }\n    var ls = str.split(".");\n    if (ls == null || ls.length != 4 || ls[3] == "0" || parseInt(ls[3]) === 0) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n  }\n  return false;\n}\nexport {\n  src_default as default\n};\n//# sourceMappingURL=index.js.map\n\n')))}p.isMDXComponent=!0}}]);