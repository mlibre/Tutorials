"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),b=i,f=p["".concat(c,".").concat(b)]||p[b]||u[b]||o;return n?a.createElement(f,r(r({ref:t},s),{},{components:n})):a.createElement(f,r({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},6189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const o={},r="CLI",l={unversionedId:"blockchain/Ethereum/CLI",id:"blockchain/Ethereum/CLI",title:"CLI",description:"it is not possible to run an execution client on its own anymore. After The Merge, both execution and consensus clients must be run together in order for a user to gain access to the Ethereum network.",source:"@site/docs/blockchain/Ethereum/CLI.md",sourceDirName:"blockchain/Ethereum",slug:"/blockchain/Ethereum/CLI",permalink:"/Wisdom-Hub/blockchain/Ethereum/CLI",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DEX from scratch",permalink:"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/"},next:{title:"ERC-1155 From Scratch",permalink:"/Wisdom-Hub/blockchain/Ethereum/ERC1155/"}},c={},d=[{value:"Table of content",id:"table-of-content",level:2},{value:"Online Providers",id:"online-providers",level:2},{value:"getblock.io",id:"getblockio",level:3},{value:"Infura",id:"infura",level:3},{value:"Testnet Node",id:"testnet-node",level:2},{value:"Geth, Clef, Consensus client",id:"geth-clef-consensus-client",level:3},{value:"Sync modes",id:"sync-modes",level:3},{value:"Installation &amp; Requirements",id:"installation--requirements",level:3},{value:"Clef",id:"clef",level:3},{value:"Geth",id:"geth",level:3},{value:"Consensus clients",id:"consensus-clients",level:3},{value:"Test the netork",id:"test-the-netork",level:3},{value:"Importing accounts",id:"importing-accounts",level:4},{value:"Interacting With Geth",id:"interacting-with-geth",level:4},{value:"Private Network",id:"private-network",level:2},{value:"Transaction Info",id:"transaction-info",level:2},{value:"Block info",id:"block-info",level:2},{value:"References",id:"references",level:2}],s={toc:d},p="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(p,(0,a.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cli"},"CLI"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"it is not possible to run an execution client on its own anymore. After The Merge, ",(0,i.kt)("strong",{parentName:"p"},"both execution and consensus clients")," must be run together in order for a user to gain access to the Ethereum network.")),(0,i.kt)("h2",{id:"table-of-content"},"Table of content"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#table-of-content"},"Table of content")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#online-providers"},"Online Providers"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getblockio"},"getblock.io")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#infura"},"Infura")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#testnet-node"},"Testnet Node"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#geth-clef-consensus-client"},"Geth, Clef, Consensus client")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sync-modes"},"Sync modes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#installation--requirements"},"Installation \\& Requirements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#clef"},"Clef")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#geth"},"Geth")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#consensus-clients"},"Consensus clients")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#test-the-netork"},"Test the netork"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#importing-accounts"},"Importing accounts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#interacting-with-geth"},"Interacting With Geth")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#private-network"},"Private Network")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#transaction-info"},"Transaction Info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#block-info"},"Block info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,i.kt)("p",null,"You can either run your ",(0,i.kt)("inlineCode",{parentName:"p"},"own")," ethereum ",(0,i.kt)("inlineCode",{parentName:"p"},"layers")," (node) or use ",(0,i.kt)("inlineCode",{parentName:"p"},"free providers"),"."),(0,i.kt)("h2",{id:"online-providers"},"Online Providers"),(0,i.kt)("h3",{id:"getblockio"},"getblock.io"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"geth attach https://eth.getblock.io/token/mainnet/\n")),(0,i.kt)("h3",{id:"infura"},"Infura"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n-H "Content-Type: application/json" \\\n--data \'{"jsonrpc": "2.0", "id": 1, "method": "eth_blockNumber", "params": []}\' \\\n"https://sepolia.infura.io/v3/api-key"\n')),(0,i.kt)("h2",{id:"testnet-node"},"Testnet Node"),(0,i.kt)("h3",{id:"geth-clef-consensus-client"},"Geth, Clef, Consensus client"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," is Official implementation of the Ethereum execution layer in ",(0,i.kt)("a",{parentName:"p",href:"https://geth.ethereum.org/"},"Go"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," is a command-line interface for the Ethereum blockchain. ",(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," is an Ethereum client written in Go. This means running ",(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," turns a computer into an ",(0,i.kt)("inlineCode",{parentName:"p"},"Ethereum node"),". Ethereum is a ",(0,i.kt)("inlineCode",{parentName:"p"},"peer-to-peer")," network where information is shared directly between nodes rather than being managed by a central server. Every 12 seconds one node is randomly selected to generate a new block containing a list of transactions that nodes receiving the block should execute. This ",(0,i.kt)("inlineCode",{parentName:"p"},"block proposer")," node sends the new block to its peers. On receiving a new block, each node checks that it is ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," and adds it to their database. The sequence of discrete blocks is called a ",(0,i.kt)("inlineCode",{parentName:"p"},"blockchain"),". The information provided in each block is used by Geth to ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," its ",(0,i.kt)("inlineCode",{parentName:"p"},"state"),".",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"Clef")," is an account management tool external to ",(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," itself that allows users to sign transactions.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," also needs to be connected to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Consensus client")," in order to function as an Ethereum node.  "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Clef",src:n(917).Z,width:"3638",height:"1249"})),(0,i.kt)("h3",{id:"sync-modes"},"Sync modes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Snap (default): Snap sync starts from a relatively recent block and syncs from there to the head of the chain,."),(0,i.kt)("li",{parentName:"ul"},"Full: An archive node is a node that retains all historical data right back to genesis"),(0,i.kt)("li",{parentName:"ul"},"Light: A light node syncs very quickly and stores the bare minimum of blockchain data")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Light")," nodes are not currently working on ",(0,i.kt)("inlineCode",{parentName:"p"},"proof-of-stake")," Ethereum")),(0,i.kt)("h3",{id:"installation--requirements"},"Installation & Requirements"),(0,i.kt)("p",null,"These commands will intall ",(0,i.kt)("inlineCode",{parentName:"p"},"geth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"clef"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"devp2p"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"abigen"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"bootnode"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"evm"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"rlpdump")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"puppeth")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Ubuntu\nsudo apt-get install -y software-properties-common\nsudo add-apt-repository -y ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install ethereum\n\n# Arch\nsudo pacman -Syyuu geth nodejs\npamac install lighthouse-ethereum-bin\n")),(0,i.kt)("p",null,"An accurate clock is required to participate in the Ethereum network"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ntpdate -s time.nist.gov\n")),(0,i.kt)("p",null,"Make sure you have the following ports open"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo iptables -I INPUT -p tcp --dport 30311 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 30311 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 30303 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 30303 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 30304 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 30304 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 37608 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 37608 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 8546 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 8546 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 8551 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 8551 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 8545 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 8545 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 3334 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 3334 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 9000 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 9000 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 9001 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 9001 -j ACCEPT\nsudo iptables -I INPUT -p tcp --dport 5052 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 5052 -j ACCEPT\nsudo iptables -I INPUT 1 -i lo -j ACCEPT\nsudo iptables -A INPUT -i ens3 -p udp -m multiport --dports 1900,5351,5353 -j ACCEPT\nsudo iptables -A INPUT -i ens3 -p tcp -m multiport --dports 49152 -j ACCEPT\n")),(0,i.kt)("h3",{id:"clef"},"Clef"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Clef")," is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Accounts Management")," and has the responsibility of generating and storing keys, and signing transactions."),(0,i.kt)("p",null,"Create a new account with ",(0,i.kt)("inlineCode",{parentName:"p"},"Clef"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir enode\nclef newaccount --keystore enode/keystore\n")),(0,i.kt)("p",null,"To start ",(0,i.kt)("inlineCode",{parentName:"p"},"Clef"),", run the ",(0,i.kt)("inlineCode",{parentName:"p"},"Clef")," executable passing as arguments the ",(0,i.kt)("inlineCode",{parentName:"p"},"keystore")," file location, config directory location and a ",(0,i.kt)("inlineCode",{parentName:"p"},"chain ID"),". The config directory was automatically created inside the geth-tutorial directory during the previous step. The chain ID is an integer that defines which Ethereum network to connect to. Ethereum mainnet has ",(0,i.kt)("inlineCode",{parentName:"p"},"chain ID 1"),". In this tutorial ",(0,i.kt)("inlineCode",{parentName:"p"},"Chain ID 11155111")," is used which is that of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Sepolia")," testnet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"clef --keystore enode/keystore --configdir enode/clef --chainid 11155111\n")),(0,i.kt)("h3",{id:"geth"},"Geth"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," is responsible for running the Ethereum node. Communicating with the network, ",(0,i.kt)("inlineCode",{parentName:"p"},"sending and validating transactions"),", and interacting with ",(0,i.kt)("inlineCode",{parentName:"p"},"Smart Contracts"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," also keep the ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," of the blockchain."),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"Geth")," uses ",(0,i.kt)("inlineCode",{parentName:"p"},"snap-sync")," which download blocks sequentially from a ",(0,i.kt)("inlineCode",{parentName:"p"},"relatively recent block"),", not the genesis block.",(0,i.kt)("br",{parentName:"p"}),"\n","Your ",(0,i.kt)("inlineCode",{parentName:"p"},"ISP")," must also allow ",(0,i.kt)("inlineCode",{parentName:"p"},"UDP")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TCP")," traffics to pass through."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'geth --sepolia --datadir enode --authrpc.addr 0.0.0.0 --authrpc.port 8551 --authrpc.vhosts "*" --authrpc.jwtsecret enode/jwtsecret --http --http.api eth,net,admin --signer enode/clef/clef.ipc --verbosity 5 --maxpeers 100 --allow-insecure-unlock --discv5 --bootnodes "enode://ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7@52.14.151.177:30303","enode://9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066@18.168.182.86:30303"\n# --nat=none --maxpendpeers 10 --nodiscover\n')),(0,i.kt)("p",null,"Get some Sepolia ETH from ",(0,i.kt)("inlineCode",{parentName:"p"},"https://www.infura.io/faucet/sepolia"),".",(0,i.kt)("br",{parentName:"p"}),"\n","Connet to your ",(0,i.kt)("inlineCode",{parentName:"p"},"geth")," node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"geth attach http://127.0.0.1:8545\n")),(0,i.kt)("p",null,"Check if ",(0,i.kt)("inlineCode",{parentName:"p"},"geth")," has connected to the network"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"admin.peers\n")),(0,i.kt)("p",null,"To manullay add static peers to the netwrok, first find the ",(0,i.kt)("inlineCode",{parentName:"p"},"enode")," address of the peer you want to connect to. for example, for ",(0,i.kt)("inlineCode",{parentName:"p"},"sepolia")," you can find some ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/eth-clients/sepolia"},"here"),", and for mainnet you can find ",(0,i.kt)("a",{parentName:"p",href:"https://etherscan.io/nodetracker/nodes"},"here")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'admin.addPeer("enode://ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7@52.14.151.177:30303")\nadmin.addPeer("enode://9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066@18.168.182.86:30303")\n')),(0,i.kt)("p",null,"Get connected accounts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"eth.accounts;\n")),(0,i.kt)("p",null,"The console will hang, because ",(0,i.kt)("inlineCode",{parentName:"p"},"Clef")," is waiting for approval. approve it.  "),(0,i.kt)("h3",{id:"consensus-clients"},"Consensus clients"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Consensus client")," is responsible for ",(0,i.kt)("inlineCode",{parentName:"p"},"Block Proposals"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Agreement Process")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Final Decision"),".",(0,i.kt)("br",{parentName:"p"}),"\n","A ",(0,i.kt)("inlineCode",{parentName:"p"},"Consensus client")," alongside ",(0,i.kt)("inlineCode",{parentName:"p"},"geth")," is required to function as an Ethereum node and start syncing the blockchain.",(0,i.kt)("br",{parentName:"p"}),"\n","One of the famous ",(0,i.kt)("inlineCode",{parentName:"p"},"Consensus clients")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Lighthouse"),". To use ",(0,i.kt)("inlineCode",{parentName:"p"},"checkpoint syncing")," you need to have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Beacon Node")," running. There is list ",(0,i.kt)("a",{parentName:"p",href:"https://eth-clients.github.io/checkpoint-sync-endpoints/"},"here"),".",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"Lighthouse")," needs to be publicly accessible to the network, otherwise it will not be able to sync the blockchain.",(0,i.kt)("br",{parentName:"p"}),"\n","You can check it you are connected to the network by running ",(0,i.kt)("inlineCode",{parentName:"p"},"curl http://localhost:5052/lighthouse/nat")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rm -r enode/lighthouse\nmkdir -p enode/lighthouse\n\nlighthouse bn \\\n    --network sepolia \\\n    --datadir enode/lighthouse \\\n    --http \\\n    --execution-endpoint http://127.0.0.1:8551 \\\n    --metrics \\\n    --validator-monitor-auto \\\n    --checkpoint-sync-url https://sepolia.beaconstate.info \\\n    --execution-jwt enode/jwtsecret --disable-deposit-contract-sync\n")),(0,i.kt)("h3",{id:"test-the-netork"},"Test the netork"),(0,i.kt)("p",null,"Check the account balance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"web3.fromWei(eth.getBalance('0x7e932ab056a3dce4bcdd73092430c3f967e1bea3'), 'ether');\n")),(0,i.kt)("p",null,"Get latest block number:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"eth.blockNumber\n")),(0,i.kt)("h4",{id:"importing-accounts"},"Importing accounts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"geth account import ~/Data/myself/cryptocurrency-info-recovery/metamask/mforgood/D8_private_key\n")),(0,i.kt)("h4",{id:"interacting-with-geth"},"Interacting With Geth"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'geth attach http://127.0.0.1:3334\nweb3.personal.importRawKey("111111111PRIVATEKEY1111111111", "password")\npersonal.unlockAccount("0xD8f24D419153E5D03d614C5155f900f4B5C8A65C")\npersonal.listAccounts\neth.getBalance("0xD8f24D419153E5D03d614C5155f900f4B5C8A65C")\neth.getBalance(eth.accounts[1])\nnet.peerCount\neth.getCode("0xE683007C5BfB5BEBA5481C3e938dD4DC47cddbFC")\nvar voter = eth.contract([{"inputs":[{"internalType":"string","name":"option","type":"string"}],"name":"addOption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getOptions","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVotes","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"options","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"remove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startVoting","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"option","type":"uint256"}],"name":"vote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"optionName","type":"string"}],"name":"vote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"votes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]).at("0xE683007C5BfB5BEBA5481C3e938dD4DC47cddbFC");\nvoter\nvoter.addOption("mlibre" , {from: "0xD8f24D419153E5D03d614C5155f900f4B5C8A65C"})\n')),(0,i.kt)("h2",{id:"private-network"},"Private Network"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nimbus.team/"},"nimbus")," has both eth1(execution) and eth2(consensus) layers."),(0,i.kt)("h2",{id:"transaction-info"},"Transaction Info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'eth.getTransaction("0x43ad3737b39356024aa13bc396237208e66b73bc5f99ab33e08c60731b8a14a9")\n')),(0,i.kt)("p",null,"A transaction in ETH-2 looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  accessList: [],\n  blockHash: "0x24635aee8638d9c34f01fdc3a6a80b39dc081df59d33550be92a0badff0c93bb",\n  blockNumber: 17641198,\n  chainId: "0x1",\n  from: "0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5",\n  gas: 21000,\n  gasPrice: 22310851574,\n  hash: "0xa78d2e8e676ad408ad75399c36946ee27968beec36fe38f4c284ffd2c39f20af",\n  input: "0x",\n  maxFeePerGas: 22310851574,\n  maxPriorityFeePerGas: 0,\n  nonce: 383610,\n  r: "0x16bb14d65b1e768d6671e69c7ee6189ca070b90a8519c34e97169a4fe0e72865",\n  s: "0x3107edfd2b4a1cf2d03ce305b74323486e70e9ee0c29ee02c61ed74376e88298",\n  to: "0xe688b84b23f322a994a53dbf8e15fa82cdb71127",\n  transactionIndex: 168,\n  type: "0x2",\n  v: "0x0",\n  value: 44186254496743523\n}\n\n// OR\n\n{\n  accessList: [],\n  blockHash: "0x424483e1970781103b9f4f22b2d906eeb25ebab5d417b8d706802fec10b4197d",\n  blockNumber: 17619068,\n  chainId: "0x1",\n  from: "0xbc0f14d6bdd2f46ab1d56bfd5f28eb6c2a2d2777",\n  gas: 274223,\n  gasPrice: 24387282490,\n  hash: "0x43ad3737b39356024aa13bc396237208e66b73bc5f99ab33e08c60731b8a14a9",\n  input: "0x3593564c0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000002890df158d76e584877a1d17a85fea3aeeb85aa600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",\n  maxFeePerGas: 31580923735,\n  maxPriorityFeePerGas: 10000000000,\n  nonce: 3895,\n  r: "0x5b7f1d328c3c85b0c74e23511938817f338066f34dabaa2f72fe161c187dac3e",\n  s: "0x6583f2d3db02c51e9acbfb700f6dd28fac62108a58e397306871e5769d3b7443",\n  to: "0xef1c6e67703c7bd7107eed8303fbe6ec2554bf6b",\n  transactionIndex: 0,\n  type: "0x2",\n  v: "0x1",\n  value: 0\n}\n')),(0,i.kt)("h2",{id:"block-info"},"Block info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"geth attach https://eth.getblock.io/token/mainnet/\n\nweb3.eth.getBlock(eth.blockNumber)\n")),(0,i.kt)("p",null,"A block in eth2 looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  baseFeePerGas: 14387282490,\n  difficulty: 0,\n  extraData: "0x496c6c756d696e61746520446d6f63726174697a6520447374726962757465",\n  gasLimit: 30000000,\n  gasUsed: 13371853,\n  hash: "0x424483e1970781103b9f4f22b2d906eeb25ebab5d417b8d706802fec10b4197d",\n  logsBloom: "0xd16bc008ef900be8452b8128845c1b3014251b90402259020c4520c4746a88b301a403c34060b54ef2109a3663e0190546c33a9afa22bd0c1bf0e41478ac02195e861a2af47429380824635a81592064f249714300451d5840d45737c4209822b7c84e003690d517bd74340044902e33101a0e3022900444e5c52a94594f61500211a451d00c590740e611031b6c5c2d21c5a89b4f558f38b70548730a314da0f6ad9256363d20034acbece6c972458ec7c4d4b3d27689de906aaca44c88847c08d02c3285884c47a0824503a7f5103652f5200e0748a0f64b7178a68d74f1048f39a7ccdf4ea0be044870a028497f86c170de301fe3f44580c99137f49eef2b",\n  miner: "0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5",\n  mixHash: "0xfc5ce5faa47e9198054791dff0372514fb876038b605b02abd82fa3b510adbeb",\n  nonce: "0x0000000000000000",\n  number: 17619068,\n  parentHash: "0x8afcef307dfe111676d5baa35ab148131fd4918b499c807c657c6291429f8be0",\n  receiptsRoot: "0xc04575fad7649ea33ec114a2626e6ad87d902c1bea0ac51ef47e5aeb03aadafb",\n  sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",\n  size: 162982,\n  stateRoot: "0x9fce67ea0ac4c8e9bb310e538663203544ed2f9216a5562ca389f66e154a8af3",\n  timestamp: 1688455619,\n  totalDifficulty: 5.8750003716598352816469e+22,\n  transactions: ["0x43ad3737b39356024aa13bc396237208e66b73bc5f99ab33e08c60731b8a14a9", "0xe2588a39acfb64ede45f2372954952b69a0effc9d953b6ff954e624ec9ef7e7a", "0x10a61db4c6b065cf91de037fbb5eb30717c97b9857c26a42028ab9d0704256e8", "0x4e0c96c3d942f79384fef9498d022b76ebae4b1097606996d0a4c77abfc2d5b4", "0xe2a973235b5563490b2b4edbc77f9d98bebad087b70b8238a4476a7ac86d6aa5", "0xde5c258214c7710836d7315fd443033fa3bb3fb697fae9744cad65a5c9300ba1", "0x78f1bd662c5e629e14aa4390b15834529790077053ab44b5d896a7416093f152", "0x7265d060a654e108691b8bd8e4aabb5a6afc78dde302160221b787b76663d4fd", "0x08d6b6b02e4146808049bfe8257cef85ebf11d045dec48c7a39e1214aa0a459a", "0xe5aeda0f4cbd47f70e5aada52a867a83eceeb653b0e81b97d13725ada29ab51d", "0x13c768714925b8b52a5e4b50017cc7873345f0e91081908f77df12e5f25d98f6", "0x12c4f9a9aa910dab6df1465062bae064722b9da67c1839f4423ac6aca787d5bb", "0xa750c27929a4f91c613808fca7576b823bb9537c33d012d72192aa751c454be1", "0x4adc76b7e31c97e84dc705c79042ecc6b4e53cbe751a586f1f5b13496f0e5968", "0x0656b67f8bddbfac490c114f2e5ea5e09b3256b5d242649546b9184c65f989fd", "0xbc2b9acc05f0b01b2311c438243d5bcf6120981672c014f76e5cdb62b8158dc4"],\n  transactionsRoot: "0x5113e5b9bb408a7b82ad324135d75543333ada8276bb13a2b8dca6f38b58edac",\n  uncles: [],\n  withdrawals: [{\n      address: "0x210b3cb99fa1de0a64085fa80e18c22fe4722a1b",\n      amount: "0xd827da",\n      index: "0x8e9d47",\n      validatorIndex: "0x82c3d"\n  }, {\n      address: "0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",\n      amount: "0xd87c41",\n      index: "0x8e9d4f",\n      validatorIndex: "0x82c45"\n  }, {\n      address: "0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",\n      amount: "0xd806d5",\n      index: "0x8e9d54",\n      validatorIndex: "0x82c4a"\n  }, {\n      address: "0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",\n      amount: "0xd772ad",\n      index: "0x8e9d55",\n      validatorIndex: "0x82c4b"\n  }, {\n      address: "0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",\n      amount: "0xd73366",\n      index: "0x8e9d56",\n      validatorIndex: "0x82c4c"\n  }],\n  withdrawalsRoot: "0x4915e375cb0b2df0dfb9115fab5c0acef3abebd037cdc693edc065f3a8da44b0"\n}\n')),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://geth.ethereum.org/docs/"},"https://geth.ethereum.org/docs/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/eth-educators/ethstaker-guides/blob/main/merge-goerli-prater.md"},"https://github.com/eth-educators/ethstaker-guides/blob/main/merge-goerli-prater.md"))))}u.isMDXComponent=!0},917:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/clef-cdffd95e38638cf7f346748161487106.png"}}]);