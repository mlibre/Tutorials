"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7624],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(t),c=r,y=m["".concat(p,".").concat(c)]||m[c]||d[c]||i;return t?a.createElement(y,o(o({ref:n},u),{},{components:t})):a.createElement(y,o({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:1,tags:["Linux","python","ai"]},o="Python",l={unversionedId:"ai/python-for-ai",id:"ai/python-for-ai",title:"Python",description:"Install",source:"@site/docs/ai/python-for-ai.md",sourceDirName:"ai",slug:"/ai/python-for-ai",permalink:"/Wisdom-Hub/ai/python-for-ai",draft:!1,tags:[{label:"Linux",permalink:"/Wisdom-Hub/tags/linux"},{label:"python",permalink:"/Wisdom-Hub/tags/python"},{label:"ai",permalink:"/Wisdom-Hub/tags/ai"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["Linux","python","ai"]},sidebar:"tutorialSidebar",previous:{title:"AI",permalink:"/Wisdom-Hub/ai/"},next:{title:"Geenrative AI",permalink:"/Wisdom-Hub/ai/generative ai"}},p={},s=[{value:"Install",id:"install",level:2},{value:"Jupyter Notebook",id:"jupyter-notebook",level:2},{value:"Concepts",id:"concepts",level:2},{value:"String",id:"string",level:3},{value:"Number",id:"number",level:3},{value:"List",id:"list",level:3},{value:"Tuple",id:"tuple",level:3},{value:"Dictionary",id:"dictionary",level:3},{value:"Loop",id:"loop",level:3},{value:"Functions",id:"functions",level:3},{value:"class",id:"class",level:3},{value:"Error handling",id:"error-handling",level:3},{value:"Math",id:"math",level:2},{value:"NumPy",id:"numpy",level:2},{value:"Pandas",id:"pandas",level:2},{value:"Matplotlib",id:"matplotlib",level:2},{value:"Neural Network",id:"neural-network",level:2}],u={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python"},"Python"),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -S python\npython --version\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Libraries and Executable path:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import sys\n\nprint ('\\n'.join(sys.path))\n# /usr/lib/python312.zip\n# /usr/lib/python3.12\n# /usr/lib/python3.12/lib-dynload\n# /home/mlibre/.local/lib/python3.12/site-packages\n# /usr/lib/python3.12/site-packages\n\nprint (sys.executable)\n# /usr/bin/python\n\nhelp(\"a\".find)\n# Help on built-in function find:\n\n# find(...) method of builtins.str instance\n#     S.find(sub[, start[, end]]) -> int\n\n#     Return the lowest index in S where substring sub is found,\n#     such that sub is contained within S[start:end].  Optional\n#     arguments start and end are interpreted as in slice notation.\n\n#     Return -1 on failure.\n")),(0,r.kt)("h2",{id:"jupyter-notebook"},"Jupyter Notebook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install notebook --break-system-packages\njupyter notebook\n")),(0,r.kt)("p",null,"You can also open ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8888/tree")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8888/lab")),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("h3",{id:"string"},"String"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'text = "abcd"\nprint ("thank :) %s" % text) # abcd\nprint (f"thank :) {text[0:3]}") # abc\nprint (f\'\'\'thanks\n:)\n{text[1:]} # bcd\n{text[-1]} # d\n\'\'\')\n\ntext2 = "pi is {pi:.2f}"\nprint(text2.format(pi = 3.144444)) # pi is 3.14\n\ntext3 = "pi is {} or {}"\nprint(text3.format(3.14, 3)) # pi is 3.14 or 3\n\ntext4 = "pi is {0} or {1}"\nprint(text4.format(3.14, 3)) # pi is 3.14 or 3\n\ntext5 = "a big number {0:,.3f}"\nprint(text5.format(3000.14567)) # a big number 3,000.146\n\ntext6 = "a big number {:,.3f}"\nprint(text6.format(3000.14567)) # a big number 3,000.146\n\ntext7 = "pi is a number"\nisLoc, isLoc2 = text7.find("is"), text2.index("is")\nprint(isLoc, isLoc2) # 3 3\n')),(0,r.kt)("h3",{id:"number"},"Number"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"piString = \"3.14\"\npi = float(piString) # 3.14\nb = int(pi) # 3\nprint(f'''\nMultiplication: {pi * b}\nDivision: {pi / b}\nFloor division: {pi // b}\nModulus: {pi % b}\nExponentiation: {pi ** b}\n''')\n")),(0,r.kt)("h3",{id:"list"},"List"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"mixed = [\"apple\", 2, 3.5, True]\nmixed.append(\"orange\")\nmixed.remove(3.5)\nprint(mixed) # ['apple', 2, True, 'orange']\n\nsquares = [x ** 2 for x in range(10)]\nprint(squares) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n")),(0,r.kt)("h3",{id:"tuple"},"Tuple"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'fruits = ("apple", "banana", "cherry")\n# Tuples are immutable, so you can\'t modify them directly\nfruits[0] = "kiwi" # would raise an error\n')),(0,r.kt)("h3",{id:"dictionary"},"Dictionary"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"person = {\n  \"name\": \"Alice\",\n  \"age\": 25,\n  \"city\": \"New York\"\n}\nprint(person) # {'name': 'Alice', 'age': 25, 'city': 'New York'}\nprint(person[\"name\"]) # Alice\nprint(person.keys()) # dict_keys(['name', 'age', 'city'])\nprint(person.items()) # dict_items([('name', 'Alice'), ('age', 25), ('city', 'New York')])\n")),(0,r.kt)("h3",{id:"loop"},"Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'text = "abcd"\nfor i in text:\n  print(i)\n# a b c d\n\nfor i in range(5):\n    print(i)\n# 0 1 2 3 4\n\n# Looping through a list\nfruits = ["apple", "banana", "cherry"]\nfor fruit in fruits:\n    print(fruit)\n# apple banana cherry\n\n# Looping through a dictionary\nperson = {"name": "Alice", "age": 25, "city": "New York"}\nfor key, value in person.items():\n    print(f"{key}: {value}")\n# name: Alice\n# age: 25\n# city: New York\n')),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def greet(name="Guest"):\n    return f"Hello, {name}!"\n\nprint(greet()) # Hello, Guest!\nprint(greet("Bob")) # Hello, Bob!\n\n\ndef sum_all(*args):\n    return sum(args)\n\nprint(sum_all(1, 2, 3, 4)) # 10\n\n\ndef describe_person(**kwargs):\n    for key, value in kwargs.items():\n        print(f"{key}: {value}")\n\ndescribe_person(name="Alice", age=25, city="New York")\n# name: Alice\n# age: 25\n# city: New York\n\n\nadd = lambda x, y: x + y\nprint(add(3, 5)) # 8\n\n# Using lambda with sort\npoints = [(2, 3), (1, 2), (4, 1)]\nsecondValue = lambda point: point[1] # always returns second value\npoints.sort(key=secondValue)\nprint(points) # [(4, 1), (1, 2), (2, 3)]\n\n\ndef my_decorator(func):\n    def wrapper():\n        print("Something is happening before the function is called.")\n        func()\n        print("Something is happening after the function is called.")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print("Hello!")\n\nsay_hello()\n# Output:\n# Something is happening before the function is called.\n# Hello!\n# Something is happening after the function is called.\n')),(0,r.kt)("h3",{id:"class"},"class"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Person:\n    def __init__(self, name):\n        self._name = name\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value): # now we can set and get with "name" not "_name"\n        self._name = value\n\n\nclass Employee(Person): # inherits from Person\n    species = "Homo sapiens"  # Class variable\n    def __init__(self, name, employee_id):\n        super().__init__(name)\n        self.employee_id = employee_id\n        self._test1 = "test1"  # Protected attribute\n        self.__test2 = "test2"   # Private attribute\n\n    def get_employee_details(self):\n        return f"Name: {self.name}, Employee ID: {self.employee_id}"\n\n# Creating an instance of the subclass\nemployee1 = Employee("Bob", "E1234")\nprint(employee1.get_employee_details())\n# Name: Bob, Age: 30, Employee ID: E1234\nemployee1.name = "Alice"\nprint(employee1.get_employee_details())\n# Name: Alice, Age: 30, Employee ID: E1234\nemployee1.employee_id = "E1235"\nprint(employee1.get_employee_details())\n')),(0,r.kt)("h3",{id:"error-handling"},"Error handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print("Cannot divide by zero!")\nexcept ValueError:\n    print("Invalid value!")\nelse:\n    print("error is not ValueError or ZeroDivisionError")\nfinally:\n    print("This will execute no matter what")\n\n\n# Rasing and error\ndef check_age(age):\n    if age < 5:\n        raise ValueError("Age must be 5 or older")\n    return "Access granted"\n\ntry:\n    check_age(4)\nexcept ValueError as e:\n    print(e)\n')),(0,r.kt)("h2",{id:"math"},"Math"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import math as m\nm.pi # 3.141592653589793\n\nfrom math import *\nprint(pi)\n\nimport random as r\nprint(r.random())\n")),(0,r.kt)("h2",{id:"numpy"},"NumPy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install numpy --break-system-packages\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\nprint(arr) # [1 2 3 4 5]\n\n\n# Creating a 2D array\narr2d = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr2d)\n# [[1 2 3]\n#  [4 5 6]]\nprint(arr2d.shape) # (2, 3)\n\n\n# Creating a 2D array\narr2d = np.array([[1, 2, 3], [4, 5, 6, 7]])\n# Raises ValueError. The requested array has an inhomogeneous shape after 1 dimensions\n\n\narr = np.array([1, 2, 3, 4, 5])\n# Mean\nprint(np.mean(arr)) # 3.0\n# Sum\nprint(np.sum(arr)) # 15\n# Standard deviation\nprint(np.std(arr)) # 1.4142135623730951\n# Minimum and Maximum\nprint(np.min(arr)) # 1\nprint(np.max(arr)) # 5\n\n# Save to a file\nnp.save('array.npy', arr)\n# Load from a file\nloaded_arr = np.load('array.npy')\nprint(loaded_arr) # [1 2 3 4 5]\n")),(0,r.kt)("h2",{id:"pandas"},"Pandas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pandas --break-system-packages\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35],\n    'City': ['New York', 'Los Angeles', 'Chicago']\n}\ndf = pd.DataFrame(data)\n\nprint(df)\n#       Name  Age         City\n# 0    Alice   25     New York\n# 1      Bob   30  Los Angeles\n# 2  Charlie   35      Chicago\n\ndf['Age'] = df['Age'] + 1\nprint(df['Age']) # Age column\n# 0    26\n# 1    31\n# 2    36\n\nprint(df.head(2)) # First And Second rows\n#     Name  Age      City\n# 0  Alice   25  New York\n# 1      Bob   30  Los Angeles\n\nprint(df.iloc[0])  # First row\n# Name       Alice\n# Age           25\n# City    New York\n\n\ndf1 = pd.DataFrame({\n    'Name': ['Alice', 'Bob'],\n    'Age': [25, 30]\n})\n\ndf2 = pd.DataFrame({\n    'Name': ['Alice', 'David'],\n    'Age': [35, 40]\n})\n\n# Concatenating DataFrames\ndf_concat = pd.concat([df1, df2])\n\n# Merging DataFrames on a key\ndf3 = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'City': ['New York', 'Los Angeles', 'Chicago']\n})\n\nmerged_df = pd.merge(df_concat, df3, on='Name')\nprint(merged_df)\n#     Name  Age         City\n# 0  Alice   25     New York\n# 1    Bob   30  Los Angeles\n# 2  Alice   35     New York\n")),(0,r.kt)("h2",{id:"matplotlib"},"Matplotlib"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install matplotlib --break-system-packages\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\nplt.plot(x, y)\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\nplt.title('Simple Line Plot')\nplt.show()\n")),(0,r.kt)("h2",{id:"neural-network"},"Neural Network"))}d.isMDXComponent=!0}}]);