"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2606],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),h=l(n),m=a,g=h["".concat(s,".").concat(m)]||h[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[h]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i="Getting Started",c={unversionedId:"blockchain/Hyperledger/Getting Start",id:"blockchain/Hyperledger/Getting Start",title:"Getting Started",description:"Dependencies",source:"@site/docs/blockchain/Hyperledger/Getting Start.md",sourceDirName:"blockchain/Hyperledger",slug:"/blockchain/Hyperledger/Getting Start",permalink:"/Wisdom-Hub/blockchain/Hyperledger/Getting Start",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hyperledger Fabric",permalink:"/Wisdom-Hub/blockchain/Hyperledger/"},next:{title:"LBRY",permalink:"/Wisdom-Hub/blockchain/LBRY/"}},s={},l=[{value:"Dependencies",id:"dependencies",level:2},{value:"Install Fabric",id:"install-fabric",level:2},{value:"What\u2019s happening behind the scenes?",id:"whats-happening-behind-the-scenes",level:2},{value:"Running the test network with cryptogen tool",id:"running-the-test-network-with-cryptogen-tool",level:2},{value:"Run the test network",id:"run-the-test-network",level:3},{value:"Create a channel",id:"create-a-channel",level:3},{value:"Deploy the chaincode",id:"deploy-the-chaincode",level:3},{value:"Interact with the chaincode",id:"interact-with-the-chaincode",level:3},{value:"Running the test network with Certificate Authorities (CAs)",id:"running-the-test-network-with-certificate-authorities-cas",level:2},{value:"Bring up the test network using BFT ordering service",id:"bring-up-the-test-network-using-bft-ordering-service",level:2},{value:"Reference",id:"reference",level:2}],p={toc:l},h="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -S git curl docker docker-compose go jq tree -y\nsudo systemctl enable docker.service\nsudo systemctl enable docker.socket\nsudo systemctl restart docker.service\nsudo systemctl restart docker.socket\n\nsudo usermod -a -G docker ${USER}\nsudo usermod -a -G docker $USER\n\n# sudo chown ${USER}:docker /var/run/docker.sock\n\nsudo reboot\n")),(0,a.kt)("h2",{id:"install-fabric"},"Install Fabric"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# git clone https://github.com/hyperledger/fabric-samples.git\ncurl -sSLO https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh && chmod +x install-fabric.sh\n./install-fabric.sh\n")),(0,a.kt)("h2",{id:"whats-happening-behind-the-scenes"},"What\u2019s happening behind the scenes?"),(0,a.kt)("p",null,"If you are interested in learning more about the sample network, you can investigate the files and scripts in the test-network directory. The steps below provide a guided tour of what happens when you issue the command of ./network.sh up."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./network.sh")," creates the certificates and keys for two peer organizations and the orderer organization. By default, the script uses the cryptogen tool using the configuration files located in the ",(0,a.kt)("inlineCode",{parentName:"li"},"organizations/cryptogen")," folder. If you use the ",(0,a.kt)("inlineCode",{parentName:"li"},"-ca")," flag to create Certificate Authorities, the script uses Fabric CA server configuration files and registerEnroll.sh script located in the ",(0,a.kt)("inlineCode",{parentName:"li"},"organizations/fabric-ca")," folder. Both cryptogen and the Fabric CAs create the crypto material and MSP folders for all three organizations in the organizations folder."),(0,a.kt)("li",{parentName:"ul"},"Once the organization crypto material has been generated, the ",(0,a.kt)("inlineCode",{parentName:"li"},"network.sh")," can bring up the nodes of the network. The script uses the ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose-test-net.yaml")," file in the docker folder to create the peer and orderer nodes. The docker folder also contains the ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose-e2e.yaml")," file that brings up the nodes of the network alongside three Fabric CAs."),(0,a.kt)("li",{parentName:"ul"},"If you use the createChannel subcommand, ",(0,a.kt)("inlineCode",{parentName:"li"},"./network.sh")," runs the createChannel.sh script in the scripts folder to create a channel using the supplied channel name. The script uses the configtxgen tool to create the channel genesis block based on the TwoOrgsApplicationGenesis channel profile in the ",(0,a.kt)("inlineCode",{parentName:"li"},"configtx/configtx.yaml")," file. After creating the channel, the script uses the peer cli to join ",(0,a.kt)("inlineCode",{parentName:"li"},"peer0.org1.example.com")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"peer0.org2.example.com")," to the channel, and make both of the peers anchor peers."),(0,a.kt)("li",{parentName:"ul"},"If you issue the ",(0,a.kt)("inlineCode",{parentName:"li"},"deployCC")," command, ",(0,a.kt)("inlineCode",{parentName:"li"},"./network.sh")," runs the ",(0,a.kt)("inlineCode",{parentName:"li"},"deployCC.sh")," script to install the asset-transfer (basic) chaincode on both peers and then define then chaincode on the channel. Once the chaincode definition is committed to the channel, the peer cli initializes the chaincode using the Init and invokes the chaincode to put initial data on the ledger.")),(0,a.kt)("h2",{id:"running-the-test-network-with-cryptogen-tool"},"Running the test network with cryptogen tool"),(0,a.kt)("h3",{id:"run-the-test-network"},"Run the test network"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd fabric-samples/test-network\n./network.sh down\n./network.sh up\ndocker ps -a\n")),(0,a.kt)("h3",{id:"create-a-channel"},"Create a channel"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./network.sh createChannel\n")),(0,a.kt)("h3",{id:"deploy-the-chaincode"},"Deploy the chaincode"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"deployCC")," subcommand will install the ",(0,a.kt)("inlineCode",{parentName:"p"},"asset-transfer (basic)")," chaincode on ",(0,a.kt)("inlineCode",{parentName:"p"},"peer0.org1.example.com")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"peer0.org2.example.com")," and then deploy the chaincode on the channel specified using the channel flag (or mychannel if no channel is specified)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go\n")),(0,a.kt)("h3",{id:"interact-with-the-chaincode"},"Interact with the chaincode"),(0,a.kt)("p",null,"Because the endorsement policy for the asset-transfer (basic) chaincode requires the transaction to be ",(0,a.kt)("inlineCode",{parentName:"p"},"signed by Org1 and Org2"),", the chaincode invoke command needs to target both ",(0,a.kt)("inlineCode",{parentName:"p"},"peer0.org1.example.com")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"peer0.org2.example.com")," using the --peerAddresses flag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export PATH=${PWD}/../bin:$PATH\nexport FABRIC_CFG_PATH=$PWD/../config/\n\nexport CORE_PEER_TLS_ENABLED=true\nexport CORE_PEER_LOCALMSPID="Org1MSP"\nexport CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\nexport CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nexport CORE_PEER_ADDRESS=localhost:7051\n\npeer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" -c \'{"function":"InitLedger","Args":[]}\'\n\npeer chaincode query -C mychannel -n basic -c \'{"Args":["GetAllAssets"]}\' | jq\n\npeer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" -c \'{"function":"TransferAsset","Args":["asset6","Christopher"]}\'\n\nexport CORE_PEER_TLS_ENABLED=true\nexport CORE_PEER_LOCALMSPID="Org2MSP"\nexport CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt\nexport CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp\nexport CORE_PEER_ADDRESS=localhost:9051\n\npeer chaincode query -C mychannel -n basic -c \'{"Args":["ReadAsset","asset6"]}\' | jq\n\n./network.sh down\n')),(0,a.kt)("h2",{id:"running-the-test-network-with-certificate-authorities-cas"},"Running the test network with Certificate Authorities (CAs)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./network.sh down\n./network.sh up -ca\ndocker ps -a\n")),(0,a.kt)("h2",{id:"bring-up-the-test-network-using-bft-ordering-service"},"Bring up the test network using BFT ordering service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./network.sh down\n./network.sh up -bft\n./network.sh createChannel -bft\ndocker ps -a\n")),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/fabric-samples"},"https://github.com/hyperledger/fabric-samples")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/fabric-gateway"},"https://github.com/hyperledger/fabric-gateway")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/fabric-sdk-node"},"https://github.com/hyperledger/fabric-sdk-node")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/fabric-sdk-go"},"https://github.com/hyperledger/fabric-sdk-go")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/fabric-contract-api-go"},"https://github.com/hyperledger/fabric-contract-api-go")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/fabric-chaincode-node"},"https://github.com/hyperledger/fabric-chaincode-node"))))}d.isMDXComponent=!0}}]);