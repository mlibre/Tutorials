"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3020],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2,tags:["Network","AI","Neural"]},i="Neural Network",s={unversionedId:"ai/neural-network",id:"ai/neural-network",title:"Neural Network",description:"Install Packages",source:"@site/docs/ai/neural-network.md",sourceDirName:"ai",slug:"/ai/neural-network",permalink:"/Wisdom-Hub/ai/neural-network",draft:!1,tags:[{label:"Network",permalink:"/Wisdom-Hub/tags/network"},{label:"AI",permalink:"/Wisdom-Hub/tags/ai"},{label:"Neural",permalink:"/Wisdom-Hub/tags/neural"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Network","AI","Neural"]},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/Wisdom-Hub/ai/python-for-ai"},next:{title:"Geenrative AI",permalink:"/Wisdom-Hub/ai/generative-ai"}},l={},p=[{value:"Install Packages",id:"install-packages",level:2},{value:"Check GPU Support",id:"check-gpu-support",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Neuron",id:"neuron",level:3},{value:"Activation Function",id:"activation-function",level:3},{value:"Loss Function",id:"loss-function",level:3},{value:"Gradient",id:"gradient",level:3},{value:"Gradient Descent",id:"gradient-descent",level:3},{value:"Resources",id:"resources",level:2}],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"neural-network"},"Neural Network"),(0,a.kt)("h2",{id:"install-packages"},"Install Packages"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# pyenv is a tool to manage multiple versions of Python\ncurl https://pyenv.run | bash\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\necho '[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc\nsource  ~/.zshrc\npyenv install 3.12\npyenv versions\npyenv global 3.12\n# or use system to get back to system python\n# pyenv global system\n\n\npip install --upgrade pip --break-system-packages\n# If you have permission issues\n# sudo chmod a+rwx /usr/lib/python3.12/ -R\n\n\n# https://wiki.archlinux.org/title/GPGPU\nsudo pamac install opencl-amd --no-confirm\n# Or\n# sudo pamac install rocm-core rocm-hip-sdk rocm-opencl-sdk --no-confirm\nsudo usermod -a -G render,video $LOGNAME\nrocminfo\n\n\n# If you are using RDNA or RDNA 2 architecture like AMD Radeon RX 6500 XT, you may need to follow this step:\nsudo nano ~/.profile\n# Add the following lines:\nexport HSA_OVERRIDE_GFX_VERSION=10.3.0\nexport ROC_ENABLE_PRE_VEGA=1\n\n\n# https://www.tensorflow.org/install/pip\npip uninstall tensorflow tensorflow-rocm numpy --break-system-packages\npip install tensorflow --break-system-packages\npip install https://repo.radeon.com/rocm/manylinux/rocm-rel-6.1.3/tensorflow_rocm-2.15.1-cp312-cp312-manylinux_2_28_x86_64.whl numpy==1.26.4 --break-system-packages\n# cp312 means you need to have python 3.12\n\n\n# https://pytorch.org/\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.1 --break-system-packages\n")),(0,a.kt)("h2",{id:"check-gpu-support"},"Check GPU Support"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import tensorflow as tf\nimport torch\n\nprint(tf.config.list_physical_devices())\nprint(tf.__version__)\n\nprint(torch.cuda.is_available())\nprint(torch.version.hip)\n")),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("h3",{id:"neuron"},"Neuron"),(0,a.kt)("p",null,"A neuron is a function that takes some inputs, applies a weighted sum to them, and then generates an output using an activation function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def neuronFunc(inputs):\n    weights = [0.5, -0.5]\n    bias = 0.0\n    output = inputs[0] * weights[0] + inputs[1] * weights[1] + bias\n    return output\n\nneuronOut = neuronFunc([1.0, 2.0])\nprint("Neuron output:", neuronOut)\n')),(0,a.kt)("h3",{id:"activation-function"},"Activation Function"),(0,a.kt)("p",null,"An activation function is applied to the output of a neuron to introduce non-linearity into the model. This helps the neural network learn complex patterns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import math\n\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x)) # e^-x\n\n# Apply the activation function\nactiveOutput = sigmoid(neuronOut)\nprint("Activated output (sigmoid):", activeOutput)\n')),(0,a.kt)("h3",{id:"loss-function"},"Loss Function"),(0,a.kt)("p",null,"A loss function measures how well a neural network model performs a certain task by calculating the difference between the predicted output and the actual output. The goal of training is to minimize this loss."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'y_true = 0.8\nloss = (y_true - activeOutput)\nprint("Loss:", loss)\n')),(0,a.kt)("h3",{id:"gradient"},"Gradient"),(0,a.kt)("p",null,"In neural networks, gradients are used to update the model parameters to minimize the loss function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def f(x):\n    return x**2\n\ndef gradient(f, x, delta_x=0.00001):\n    return (f(x + delta_x) - f(x)) / delta_x\n\nx = 3\ngrad = gradient(f, x)\nprint("Gradient of f at x = {}: {}".format(x, grad))\n\n')),(0,a.kt)("h3",{id:"gradient-descent"},"Gradient Descent"),(0,a.kt)("p",null,"Gradient Descent is an optimization algorithm used to minimize the loss function by iteratively moving towards the steepest descent direction defined by the negative of the gradient."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def gradient_descent(f, starting_point, learning_rate, num_iterations):\n    x = starting_point\n    for _ in range(num_iterations):\n        grad = gradient(f, x)\n        x = x - (learning_rate * grad)\n    return x\n\nstarting_point = 3\nlearning_rate = 0.1\nnum_iterations = 100\noptimal_x = gradient_descent(f, starting_point, learning_rate, num_iterations)\nprint("Optimal x:", optimal_x)\n')),(0,a.kt)("h2",{id:"resources"},"Resources"))}d.isMDXComponent=!0}}]);