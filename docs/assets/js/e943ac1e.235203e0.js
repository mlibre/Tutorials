"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3581],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(o,".").concat(d)]||u[d]||m[d]||s;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={},i="NEAR CLI",l={unversionedId:"blockchain/docusaurus/docs/NEAR/CLI",id:"blockchain/docusaurus/docs/NEAR/CLI",title:"NEAR CLI",description:"near is a command line interface for interacting with the NEAR blockchain. It is a node.js application.",source:"@site/docs/blockchain/docusaurus/docs/NEAR/CLI.md",sourceDirName:"blockchain/docusaurus/docs/NEAR",slug:"/blockchain/docusaurus/docs/NEAR/CLI",permalink:"/cheat-sheet/blockchain/docusaurus/docs/NEAR/CLI",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NEAR",permalink:"/cheat-sheet/blockchain/docusaurus/docs/NEAR/"},next:{title:"NEAR SDKs",permalink:"/cheat-sheet/blockchain/docusaurus/docs/NEAR/SDK"}},o={},c=[{value:"Table of content",id:"table-of-content",level:2},{value:"Installation",id:"installation",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Accounts",id:"accounts",level:2},{value:"State",id:"state",level:3},{value:"Keys",id:"keys",level:3},{value:"Named Account",id:"named-account",level:3},{value:"Smart Contracts",id:"smart-contracts",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"near-cli"},"NEAR CLI"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"near")," is a command line interface for interacting with the ",(0,r.kt)("inlineCode",{parentName:"p"},"NEAR")," blockchain. It is a node.js application."),(0,r.kt)("p",null,"Features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create accounts"),(0,r.kt)("li",{parentName:"ul"},"access keys management"),(0,r.kt)("li",{parentName:"ul"},"sign & send transactions"),(0,r.kt)("li",{parentName:"ul"},"...")),(0,r.kt)("p",null,"All the ",(0,r.kt)("inlineCode",{parentName:"p"},"near")," commands will be sent to the testnet chain (",(0,r.kt)("a",{parentName:"p",href:"https://rpc.testnet.near.org"},"https://rpc.testnet.near.org"),"), unless you specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"NEAR_ENV")," variable or provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"--nodeUrl")," flag.",(0,r.kt)("br",{parentName:"p"}),"\n","For example: ",(0,r.kt)("inlineCode",{parentName:"p"},"export NEAR_ENV=testnet"),". Or ",(0,r.kt)("inlineCode",{parentName:"p"},'--nodeUrl "https://rpc.testnet.near.org"'),".",(0,r.kt)("br",{parentName:"p"}),"\n","By default ",(0,r.kt)("inlineCode",{parentName:"p"},"Near")," will use ",(0,r.kt)("inlineCode",{parentName:"p"},"testnet")," accounts, unless you provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"--accountId")," flag.  "),(0,r.kt)("h2",{id:"table-of-content"},"Table of content"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#near-cli"},"NEAR CLI"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#table-of-content"},"Table of content")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#accounts"},"Accounts"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#state"},"State")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#keys"},"Keys")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#named-account"},"Named Account")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#smart-contracts"},"Smart Contracts")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#wallet"},"Wallet"))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo npm install -g near-cli\n\n# Get the current version of `NEAR`\nnear --version\n")),(0,r.kt)("h2",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"Let dig ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.testnet.near.org/transactions/v3eawe5UJmMBvNQe2rgoKEuS92HfXMtM5BLLRcBix39#HwQXncGsoE9PHcFgUUvYbM1ZVnpkgdj7gG9kH8A8HBLS"},"this transaction")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"near tx-status mlibre.testnet:v3eawe5UJmMBvNQe2rgoKEuS92HfXMtM5BLLRcBix39\n")),(0,r.kt)("p",null,"The output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  status: { SuccessValue: '' },\n  transaction: {\n    actions: [\n      'CreateAccount',\n      { Transfer: { deposit: '100000000000000000000000000' } },\n      {\n        AddKey: {\n          access_key: { nonce: 0, permission: 'FullAccess' },\n          public_key: 'ed25519:8C69kVzUfrVL9Lv4jeQkM7th2zhpstGxn8yFmKRk1QmS'\n        }\n      }\n    ],\n    hash: 'v3eawe5UJmMBvNQe2rgoKEuS92HfXMtM5BLLRcBix39',\n    nonce: 129288971000001,\n    public_key: 'ed25519:6rCWntAc1qVDrnA95MwphWduqnzULbcR3CiBGQhzS9s7',\n    receiver_id: 'salamslamslamsalmslsamlasmlsmsalamslam',\n    signature: 'ed25519:4bLvSkYMn2uEQQLGfrkvY3V5YL4HfBv8fUpP94wR14TMxkAF5j2q7dBTYm9GzX973rX2nCP1sXgHRVW6Psz4YQCh',\n    signer_id: 'mlibre.testnet'\n  },\n  transaction_outcome: {\n    block_hash: 'oXRtxuibGRNXAVVcGwYRjcmXcvhGEKzgkQiiEPiQTby',\n    id: 'v3eawe5UJmMBvNQe2rgoKEuS92HfXMtM5BLLRcBix39',\n    outcome: {\n      executor_id: 'mlibre.testnet',\n      gas_burnt: 4174947687500,\n      logs: [],\n      metadata: { gas_profile: null, version: 1 },\n      receipt_ids: [ 'HwQXncGsoE9PHcFgUUvYbM1ZVnpkgdj7gG9kH8A8HBLS' ],\n      status: {\n        SuccessReceiptId: 'HwQXncGsoE9PHcFgUUvYbM1ZVnpkgdj7gG9kH8A8HBLS'\n      },\n      tokens_burnt: '417494768750000000000'\n    },\n    proof: [\n      {\n        direction: 'Right',\n        hash: 'B7J2nAGp5ies9kYmQ63RcJwybJevqZsEsNPzKyZ4NfVE'\n      },\n      {\n        direction: 'Right',\n        hash: 'Ee4sGA83vAzTQhkx3vybEA883gR2iNMnkRY4J6hv3nho'\n      },\n      {\n        direction: 'Right',\n        hash: 'HVYx7kbGPoHsvKvpHMMTT6QYYyBZKE6T8xAtrFr2NFxY'\n      }\n    ]\n  },\n  receipts_outcome: [\n    {\n      block_hash: '96w8NkjiWmYU6iHuEvcrDfWEHiqmNiiWCAhWAYNMhz4M',\n      id: 'HwQXncGsoE9PHcFgUUvYbM1ZVnpkgdj7gG9kH8A8HBLS',\n      outcome: {\n        executor_id: 'salamslamslamsalmslsamlasmlsmsalamslam', // executor_id is Receiver ID\n        // Predecessor ID is not mentioned in the output. it is the signer_id in transaction object\n        gas_burnt: 4174947687500,\n        logs: [],\n        metadata: { gas_profile: [], version: 3 },\n        receipt_ids: [ 'EXNe4EKTFSm75TrGnvtUhMTqxsoUPDPYw7jEoDi3LweL' ], // the receipts created by this receipt\n        // in this example it is the refund receipt which is always is there and is the last receipt\n        status: { SuccessValue: '' },\n        tokens_burnt: '417494768750000000000'\n      },\n      proof: [\n        {\n          direction: 'Right',\n          hash: 'Dsnj6at4baCf2ztbHmaecMY6xH41YXjAVf1dFAioV185'\n        },\n        {\n          direction: 'Left',\n          hash: '8vYcbcJWApM8MvAoBVrjrp3KGhYBiZMccmUNuBnT9G9'\n        },\n        {\n          direction: 'Right',\n          hash: '4U5cjwU49zwi5owZRUyyCdCnosGZh86Je5GWfpQUNQa4'\n        }\n      ]\n    },\n    {\n      // it is the refund receipt which is always is there and is the last receipt\n      block_hash: 'BXkhJFVsWcDgaFznMTwk674WvzokS62pfPL879EbrmAN',\n      id: 'EXNe4EKTFSm75TrGnvtUhMTqxsoUPDPYw7jEoDi3LweL',\n      outcome: {\n        executor_id: 'mlibre.testnet', // // executor_id is Receiver ID\n        // Predecessor ID for the refund receipt is system itself\n        gas_burnt: 223182562500,\n        // This contains the gas \"burnt\" for refund receipts. Even though we don't actually\n        // charge any gas for refund receipts, we still count the gas use towards the block gas\n        // https://github.com/near/nearcore/pull/4405/files\n        logs: [],\n        metadata: { gas_profile: [], version: 3 },\n        receipt_ids: [],\n        status: { SuccessValue: '' },\n        tokens_burnt: '0'\n      },\n      proof: [\n        {\n          direction: 'Right',\n          hash: '97J5UUmsVCKeThLf2RxQ4ZkjySdNvVzaUsRrh1YJQZEn'\n        },\n        {\n          direction: 'Left',\n          hash: '5HqirRFCGCpNF3A8bE9v9xLX8ZzaByPsiGPdoWraEZPU'\n        },\n        {\n          direction: 'Right',\n          hash: 'HU97NYSfmXZftzDakJmcYc9xy4ZS2m8LWpmPSuG9asZ9'\n        }\n      ]\n    }\n  ]\n}\n")),(0,r.kt)("h2",{id:"accounts"},"Accounts"),(0,r.kt)("h3",{id:"state"},"State"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"near state mlibre.testnet # Account State\nnear view-state mlibre.testnet --finality final --utf8 true # Contract State\n")),(0,r.kt)("h3",{id:"keys"},"Keys"),(0,r.kt)("p",null,"When you use the command ",(0,r.kt)("inlineCode",{parentName:"p"},"near login")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"NEAR")," blockchain, you are essentially creating a new access key for your NEAR account. When you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"near login")," command, it asks the ",(0,r.kt)("inlineCode",{parentName:"p"},"full-access key")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"NEAR Wallet")," to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddKey Action")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," another ",(0,r.kt)("inlineCode",{parentName:"p"},"full-access key locally")," on your computer. ",(0,r.kt)("inlineCode",{parentName:"p"},"NEAR CLI")," uses that new key to deploy, make function calls, etc"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# export NEAR_ENV=<network> (use guildnet / testnet / mainnet)\n\nnear login # Download, Import and Store your testnet account's access keys locally\nNEAR_ENV=mainnet near login # Import mainnet accounts\n\n\nls -R ~/.near-credentials # Keys Folder\n\nnear keys mlibre.testnet # Show all the keys for a given account\n\nnear state mlibre.near --nodeUrl https://rpc.mainnet.near.org # Account information on mainnet\nnear state mlibre.testnet # Account information on testnet\n")),(0,r.kt)("h3",{id:"named-account"},"Named Account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"near create-account salamslamslamsalmslsamlasmlsmsalamslam --masterAccount mlibre.testnet\n")),(0,r.kt)("h2",{id:"smart-contracts"},"Smart Contracts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'near deploy # Deploys a smart contract with default options and a testnet account on the testnet chain, unless `--accountId`, `NEAR_ENV` or `--nodeUrl` is provided\n\nnear deploy --nodeUrl "https://rpc.testnet.near.org" --seedPhrase "radar hammer reopen black suspect olympic mountain imitate slogan lend science advice" --accountId mlibre.testnet --wasmFile ./out/main.wasm\n')),(0,r.kt)("h1",{id:"wallet"},"Wallet"),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"NEAR")," accounts are string, like ",(0,r.kt)("inlineCode",{parentName:"p"},"mlibre.near"),". Each account can have multiple keys-pair.",(0,r.kt)("br",{parentName:"p"}),"\n","If you use ",(0,r.kt)("inlineCode",{parentName:"p"},"near login"),", near will will save your key-pair from the wallet locally. you can find them here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat .near-credentials/mainnet/mlibre.near.json\n")),(0,r.kt)("p",null,"You can query an account's keys by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"near keys mlibre.near --nodeUrl https://rpc.mainnet.near.org\n")),(0,r.kt)("p",null,"You can create wallet in mainnet and testnet here:"),(0,r.kt)("p",null,"Testnet:\n",(0,r.kt)("a",{parentName:"p",href:"https://wallet.testnet.near.org/"},"https://wallet.testnet.near.org/")),(0,r.kt)("p",null,"Mainnet:\n",(0,r.kt)("a",{parentName:"p",href:"https://wallet.near.org/"},"https://wallet.near.org/")))}m.isMDXComponent=!0}}]);