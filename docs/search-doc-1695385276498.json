[{"title":"Learn AI","type":0,"sectionRef":"#","url":"/Wisdom-Hub/ai/","content":"","keywords":"","version":null},{"title":"Tutorials​","type":1,"pageTitle":"Learn AI","url":"/Wisdom-Hub/ai/#tutorials","content":"This repository is organized into several sections, each containing tutorials for specific topics. Here's a brief overview: PromptLangchain ","version":null,"tagName":"h2"},{"title":"My ETH Address​","type":1,"pageTitle":"Learn AI","url":"/Wisdom-Hub/ai/#my-eth-address","content":"0xc9b64496986E7b6D4A68fDF69eF132A35e91838e ","version":null,"tagName":"h2"},{"title":"Langchain","type":0,"sectionRef":"#","url":"/Wisdom-Hub/ai/langchain","content":"","keywords":"","version":null},{"title":"Prompt","type":0,"sectionRef":"#","url":"/Wisdom-Hub/ai/prompt","content":"","keywords":"","version":null},{"title":"Markdown table of Linux commands​","type":1,"pageTitle":"Prompt","url":"/Wisdom-Hub/ai/prompt#markdown-table-of-linux-commands","content":"Please provide a Markdown table with centered text alignment that lists the following Linux commands, their short descriptions and examples: &quot;free&quot;, &quot;uptime&quot; Table has two columns only: 'Command' , 'Description'. Make sure examples are real-world examples and are very useful. The table format is: | Command | Description | | :---------------------------------: | :---------: | | `command1` | Description | | `example of command 1` | Description | | `advance example of command 1` | Description | | `very advance example of command 1` | Description | | `command2` | Description | | `example of command 2` | Description | | `advance example of command 2` | Description | | `very advance example of command 2` | Description |  ","version":null,"tagName":"h2"},{"title":"Install​","type":1,"pageTitle":"Langchain","url":"/Wisdom-Hub/ai/langchain#install","content":"python -m venv .venv source .venv/bin/activate pip install --upgrade pip pip install langchain pip install langchain[llms] pip install langchain[all] pip install huggingface_hub  ","version":null,"tagName":"h2"},{"title":"Simple huggingface example​","type":1,"pageTitle":"Langchain","url":"/Wisdom-Hub/ai/langchain#simple-huggingface-example","content":"from langchain.llms import HuggingFaceHub from langchain import PromptTemplate, LLMChain import os os.environ[&quot;HUGGINGFACEHUB_API_TOKEN&quot;] = &quot;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&quot; template = &quot;&quot;&quot;Question: {question} Answer: Let's think step by step.&quot;&quot;&quot; prompt = PromptTemplate(template=template, input_variables=[&quot;question&quot;]) repo_id = &quot;tiiuae/falcon-40b&quot; llm = HuggingFaceHub( repo_id=repo_id, model_kwargs={&quot;temperature&quot;: 0.5, &quot;max_length&quot;: 64} ) question = &quot;Who won the FIFA World Cup in the year 1994? &quot; llm_chain = LLMChain(prompt=prompt, llm=llm) print(llm_chain.run(question)) print(&quot;done&quot;)  ","version":null,"tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Langchain","url":"/Wisdom-Hub/ai/langchain#references","content":"https://python.langchain.com/docs/get_started/introduction.htmlhttps://github.com/langchain-ai/langchain ","version":null,"tagName":"h2"},{"title":"Learn Blockchain","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/","content":"","keywords":"","version":null},{"title":"Bitcoin","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Bitcoin/","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#table-of-content","content":"ArchitectureConsensusIncentivesAddresses And WalletsTransactionLongest chainDouble SpendingWhere do bitcoins come from?Simple POW Blockchain in nodejsReferencesMy Bitcoin Address ","version":null,"tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#architecture","content":"The Bitcoin network is a decentralized peer-to-peer network, meaning that it operates without a central authority or server. Nodes, connect to each other directly, allowing data to be shared and stored. Bitcoin combines its network, cryptocurrency, and blockchain to record transactions transparently, prevent double spending, and ensure consensus via a process called &quot;proof-of-work&quot; ","version":null,"tagName":"h2"},{"title":"Network Discovery​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#network-discovery","content":"Network Discovery or Peer Discovery in Bitcoin refers to the process by which nodes in the Bitcoin network find and connect with each other. When a new node joins the network, it starts to discover other nodes to connect with in order to participate in the network. This is typically done through a process called bootstrapping. When started for the first time, programs don’t know the IP addresses of any active full nodes. In order to discover some IP addresses, they query one or more DNS seeds hardcoded into Bitcoin Core and BitcoinJ. The response to the lookup should include one or more DNS A records with the IP addresses of full nodes that may accept new incoming connections. For example, using the dig command: dig seed.bitcoin.sipa.be ;; ANSWER SECTION: seed.bitcoin.sipa.be. 3600 IN A 185.14.30.25 seed.bitcoin.sipa.be. 3600 IN A 18.213.155.196 seed.bitcoin.sipa.be. 3600 IN A 176.9.150.253 seed.bitcoin.sipa.be. 3600 IN A 79.137.224.63 seed.bitcoin.sipa.be. 3600 IN A 76.138.214.41 DNS seed: A DNS server which returns IP addresses of full nodes on the Bitcoin network to assist in peer discovery. Once a program has connected to the network, its peers can begin to send it addr (address) messages with the IP addresses and port numbers of other peers on the network, providing a fully decentralized method of peer discovery. Bitcoin Core keeps a record of known peers in a persistent on-disk database which usually allows it to connect directly to those peers on subsequent startups without having to use DNS seeds ","version":null,"tagName":"h3"},{"title":"Consensus​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#consensus","content":"Bitcoin achieves consensus through a process called proof-of-work mining. Miners spend computational resources to find a solution to a cryptographic puzzle, and whichever miner finds the solution is able to create the next block. ","version":null,"tagName":"h2"},{"title":"Incentives​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#incentives","content":"The Bitcoin protocol offers two main incentives for mining: Block rewards: New bitcoins are minted with each block, and the miner who finds the block receives the block rewardTransaction fees: Each transaction on the Bitcoin network includes a transaction fee, paid to the miner who includes that transaction in a block ","version":null,"tagName":"h2"},{"title":"Addresses And Wallets​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#addresses-and-wallets","content":"There is no such thing as a Wallet in the Bitcoin network. It is abstract. Address An address is a hash of a bitcoin public-key wallet. You can use an address as many as you want to send and receive Bitcoin. Wallet A wallet is a software program that stores key-pairs, created addresses, and other information needed to access and manage your Bitcoins. Key-pairs Key-pairs are a public key of an address to which some amount bitcoin was previously sent and the corresponding unique private key, which authorizes the bitcoin previously sent to the above public key (address) to be sent elsewhere. ","version":null,"tagName":"h2"},{"title":"Transaction​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#transaction","content":"A Bitcoin transaction is a transfer of Bitcoins from one user to another. It is a data structure that contains several fields, including inputs, outputs, and other metadata. When a Bitcoin transaction is created, it is broadcast to the Bitcoin network and propagated to all nodes on the network. Each node verifies the transaction by checking that the digital signatures in the inputs field are valid. Once the transaction is verified by the nodes, it is added to the mempool, which is a pool of unconfirmed transactions waiting to be included in the next block. A transaction components are: Inputs - Information about the Bitcoin previously sent to Mark's address. For example, imagine Mark previously received 0.6 BTC from Alice and 0.6 BTC from Bob. Now, in order to send 1 BTC to Jessica, there might be two inputs: one input of 0.6 BTC previously from Alice and one input of 0.6 BTC previously from Bob.Amount - The amount being sent, In this case Mark wants to send 1 BTC.Outputs - The destination addresses of the Bitcoins. The first is 1.2 BTC (0.6 BTC + 0.6 BTC) to Jessica’s public address. The second is 0.2 BTC returned as 'change' to Mark. ","version":null,"tagName":"h2"},{"title":"Longest chain​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#longest-chain","content":"The longest chain refers to the chain of blocks that the majority of nodes on the network agree to and adopt as the authoritative blockchain. The longest chain is not determined by the number of blocks but by the amount of computational power or energy used to mine the blocks in the chain. ","version":null,"tagName":"h2"},{"title":"Double Spending​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#double-spending","content":"Double spending is when someone (A) tries spending the same bitcoin twice. Bitcoin network prevents this. When A broadcast the two transactions, they will go in unconfirmed transactions' pools. From there when a miner (X) validates the first transaction, the bitcoin will be sent to the new owner. so X will invalidate the second transaction because A is not the owner of the bitcoin anymore. But if the two transactions gets validated and mined by two different miners and gets added to the next block. it means there are two different blockchains now. (one with the first transaction and one with the second transaction). Now longest chain algorithm comes into play. miners will always accept the longest chain. ","version":null,"tagName":"h2"},{"title":"Where do bitcoins come from?​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#where-do-bitcoins-come-from","content":"As an incentive to use processing power to try and add new blocks of transactions on to the blockchain, each new block makes available a fixed amount of bitcoins that did not previously exist. Therefore, if you are able to successfully mine a block, you are able to “send” yourself these new bitcoins as a reward for your effort. ","version":null,"tagName":"h2"},{"title":"Simple POW Blockchain in nodejs​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#simple-pow-blockchain-in-nodejs","content":"Here you can find a simple complete POW blockchain written in nodejs ","version":null,"tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#references","content":"https://www.bitcoin.com/get-started/https://academy.binance.com/en/articles/double-spending-explainedhttps://www.youtube.com/watch?v=phLSjZdDc5Ahttps://learnmeabitcoin.com/technical/longest-chain ","version":null,"tagName":"h2"},{"title":"My Bitcoin Address​","type":1,"pageTitle":"Bitcoin","url":"/Wisdom-Hub/blockchain/Bitcoin/#my-bitcoin-address","content":"bc1qgwu903shgs4fse3s8u2vsufrsaxhnz26skqmzu ","version":null,"tagName":"h2"},{"title":"Tutorials​","type":1,"pageTitle":"Learn Blockchain","url":"/Wisdom-Hub/blockchain/#tutorials","content":"This repository is organized into several sections, each containing tutorials for specific topics. Here's a brief overview: BitcoinCryptographyEthereumLBRYNEARPolygon ","version":null,"tagName":"h2"},{"title":"My ETH Address​","type":1,"pageTitle":"Learn Blockchain","url":"/Wisdom-Hub/blockchain/#my-eth-address","content":"0xc9b64496986E7b6D4A68fDF69eF132A35e91838e ","version":null,"tagName":"h2"},{"title":"Cryptography","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Cryptography/","content":"","keywords":"","version":null},{"title":"Cryptography In Blockchain​","type":1,"pageTitle":"Cryptography","url":"/Wisdom-Hub/blockchain/Cryptography/#cryptography-in-blockchain","content":"Cryptography is an essential component of blockchain technology. It ensures the security and integrity of data stored on a blockchain. Here is some key aspects of cryptography in blockchain: ","version":null,"tagName":"h2"},{"title":"Hash Functions​","type":1,"pageTitle":"Cryptography","url":"/Wisdom-Hub/blockchain/Cryptography/#hash-functions","content":"A hash function is a one-way function that takes an input and produces a fixed-size output, typically a bit string. In the context of blockchain, hash functions are used to create unique identifiers for blocks and transactions. The most commonly used hash function in blockchain is SHA-256, which produces a 256-bit output. ","version":null,"tagName":"h3"},{"title":"Digital Signatures​","type":1,"pageTitle":"Cryptography","url":"/Wisdom-Hub/blockchain/Cryptography/#digital-signatures","content":"Digital signatures play a crucial role in securing transactions on a blockchain. They are used to prove the authenticity and integrity of the data. In blockchain technology, digital signatures are created using public-key cryptography. A user signs a transaction with their private key, and anyone can verify the signature using the corresponding public key. ","version":null,"tagName":"h3"},{"title":"Consensus Mechanisms​","type":1,"pageTitle":"Cryptography","url":"/Wisdom-Hub/blockchain/Cryptography/#consensus-mechanisms","content":"Cryptography is also at the heart of consensus mechanisms used in blockchain networks. These mechanisms ensure that only valid transactions are added to the blockchain and help maintain the security and integrity of the network. Some common consensus mechanisms include Proof of Work (PoW), Proof of Stake (PoS). ","version":null,"tagName":"h3"},{"title":"Simple Encryption & Decryption with Openssl​","type":1,"pageTitle":"Cryptography","url":"/Wisdom-Hub/blockchain/Cryptography/#simple-encryption--decryption-with-openssl","content":"echo HelloWorld &gt; message.txt openssl enc -aes-256-cbc -in message.txt -out message.bin openssl enc -d -aes-256-cbc -in message.bin -out message.dec cat message.dec HelloWorld # Using base64 openssl enc -base64 -in message.bin -out message.b64 openssl enc -d -base64 -in message.b64 -out message.ptx  ","version":null,"tagName":"h2"},{"title":"Generate Key-Pairs with openssl - RSA​","type":1,"pageTitle":"Cryptography","url":"/Wisdom-Hub/blockchain/Cryptography/#generate-key-pairs-with-openssl---rsa","content":"openssl genpkey -algorithm RSA -out privatekey.pem -pkeyopt rsa_keygen_bits:1024 openssl rsa -pubout -in privatekey.pem -out publickey.pem  ","version":null,"tagName":"h2"},{"title":"Encrypt and Decrypt using RSA Key-Pairs​","type":1,"pageTitle":"Cryptography","url":"/Wisdom-Hub/blockchain/Cryptography/#encrypt-and-decrypt-using-rsa-key-pairs","content":"openssl rsautl -encrypt -inkey publickey.pem -pubin -in message.txt -out message.rsa openssl rsautl -decrypt -inkey privatekey.pem -in message.rsa -out message.dec  ","version":null,"tagName":"h2"},{"title":"Simple implementation of POW","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Bitcoin/pow-from-scratch/","content":"","keywords":"","version":null},{"title":"Block​","type":1,"pageTitle":"Simple implementation of POW","url":"/Wisdom-Hub/blockchain/Bitcoin/pow-from-scratch/#block","content":"The Block class represents a block in the blockchain, with properties such as block number, timestamp, transactions, previous hash, miner, hash, and nonce. It has methods for calculating the hash of the block, updating the transactions, and mining the block by repeatedly updating the nonce until the resulting hash starts with a certain number of zeros (determined by the difficulty level). The class also has a static method for validating a block. blockNumber: A unique number for the block.timestamp: The timestamp of the block creation.transactions: An array of transactions.previousHash: The hash of the previous block.miner: The public key of the miner who mined the block.hash: The hash of the block.nonce: The nonce used to mine the block.signature: The digital signature of the block. The class has the following methods: calculateHash(): Calculates the hash of the block using the SHA-256 algorithm.updateTransactions(transactions): Updates the transactions in the block.mine(difficulty): Mines the block by finding a hash that satisfies a given difficulty level.signBlock(privateKey): Signs the block using the private key of the miner.static verifySignature(publicKey, signature, block): Verifies the digital signature of the block using the public key of the miner. ","version":null,"tagName":"h2"},{"title":"Chain​","type":1,"pageTitle":"Simple implementation of POW","url":"/Wisdom-Hub/blockchain/Bitcoin/pow-from-scratch/#chain","content":"The class Chain represents a chain of blocks in the blockchain. The chain can be stored on the file system and loaded from it. The class also provides methods to get, add, and retrieve the latest block in the chain, as well as the length of the chain. getBlock(blockNumber): Gets the block at the given block number.addBlock(block): Adds a block to the blockchain.getLatestBlock(): Gets the latest block in the blockchain.getBlockChainLength(): Gets the length of the blockchain.isBlockChainEmpty(): Checks if the blockchain is empty.update(): Updates the blockchain in the file system. ","version":null,"tagName":"h2"},{"title":"Wallet​","type":1,"pageTitle":"Simple implementation of POW","url":"/Wisdom-Hub/blockchain/Bitcoin/pow-from-scratch/#wallet","content":"The class Wallet represents a user's wallet. A user can have multiple wallets, each with its own balance and transaction number. The wallets can be stored on the file system and loaded from it. The class also provides methods to get, add, or subtract balance, get the transaction number, check if a wallet address exists, and update the wallet data on the file system. static createKeyPair(): Creates a new key pair (public and private) for the wallet.static signTransaction(privateKey, transaction): Signs a transaction using the private key of the wallet.static verifySignature(publicKey, signature, data): Verifies the digital signature of a transaction using the public key of the wallet.get(address): Gets the balance and transaction number for the given wallet address.incrementTN(address): Increments the transaction number for the given wallet address.balance(address): Gets the balance for the given wallet address.addBalance(address, amount): Adds the given amount to the balance of the given wallet address.minusBalance(address, amount): Subtracts the given amount from the balance of the given wallet address.transactionNumber(address): Gets the transaction number for the given wallet address.checkWalletAddresses(address): Creates a new wallet address if it doesn't exist in the collection.update(): Updates the wallet collection in the file system. ","version":null,"tagName":"h2"},{"title":"Blockchain​","type":1,"pageTitle":"Simple implementation of POW","url":"/Wisdom-Hub/blockchain/Bitcoin/pow-from-scratch/#blockchain","content":"Finally, the Blockchain class ties everything together, representing the overall blockchain system. It has properties such as the transaction pool, mining reward, and max transactions per block. It also has methods for creating the genesis block, adding transactions to the transaction pool, and mining a new block if the transaction pool is full. ","version":null,"tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Simple implementation of POW","url":"/Wisdom-Hub/blockchain/Bitcoin/pow-from-scratch/#usage","content":"You can simply run the program like this: const Blockchain = require( &quot;./main&quot; ).Blockchain; const Wallet = require( &quot;./main&quot; ).Wallet; const crypto = require( &quot;crypto&quot; ); const userKeysPairs = Wallet.createKeyPair(); const minerKeyPairs = Wallet.createKeyPair(); const blockchain = new Blockchain( &quot;blockchain.json&quot;, &quot;wallets.json&quot;, userKeysPairs ); let trx = { from: userKeysPairs.publicKey, to: &quot;user2&quot;, amount: 1, fee: 0, transaction_number: 2 } trx.signature = Wallet.signTransaction( userKeysPairs.privateKey, trx ); blockchain.addTransaction(trx); let trx2 = { from: userKeysPairs.publicKey, to: &quot;user3&quot;, amount: 5, fee: 0.3, transaction_number: 3 } trx2.signature = Wallet.signTransaction( userKeysPairs.privateKey, trx2 ); blockchain.addTransaction(trx2); blockchain.mineBlock( minerKeyPairs ); console.log( blockchain.validateChain() ); console.log( &quot;Latest Block :&quot;, blockchain.chain.getLatestBlock() ); console.log( &quot;Wallets : &quot;, blockchain.wallet );  ","version":null,"tagName":"h2"},{"title":"Ethereum","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#table-of-content","content":"Table of contentA visual representation of how Ethereum works - detailed diagramProof-of-stake protocolEtherGasAccounts Accounts vs UTXOs BlocksMerkle Patricia TreesSmart ContractsEthereum ExplorerReferencesMy ETH Address ","version":null,"tagName":"h2"},{"title":"A visual representation of how Ethereum works - detailed diagram​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#a-visual-representation-of-how-ethereum-works---detailed-diagram","content":"A mind map of how Ethereum works:  You can find the Pencil project file here: pencil-file ","version":null,"tagName":"h2"},{"title":"Proof-of-stake protocol​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#proof-of-stake-protocol","content":"Proof-of-stake means the following: Validating nodes have to stake 32 ETH into a deposit contract as collateral against bad behavior. This helps protect the network because provably dishonest activity leads to some or all of that stake being destroyed.In every slot (spaced twelve seconds apart) a validator is randomly selected to be the block proposer. They bundle transactions together, execute them and determine a new 'state'. They wrap this information into a block and pass it around to other validators.Other validators who hear about the new block re-execute the transactions to ensure they agree with the proposed change to the global state. Assuming the block is valid, they add it to their own database.If a validator hears about two conflicting blocks for the same slot they use their fork-choice algorithm to pick the one supported by the most staked ETH. ","version":null,"tagName":"h2"},{"title":"Ether​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#ether","content":"Ether (ETH) is the cryptocurrency used for many things on the Ethereum network. Fundamentally, it is the only acceptable form of payment for transaction fees, and is required to validate and propose blocks on Mainnet ","version":null,"tagName":"h2"},{"title":"Gas​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#gas","content":"What happens when we run out of gas in the middle of an Ethereum transaction? If we run out of gas in the middle of an Ethereum transaction, the transaction will fail and the state of the blockchain will revert to what it was before. However, we will still have to pay for the gas that was consumed up to that ","version":null,"tagName":"h2"},{"title":"Accounts​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#accounts","content":"Ethereum has two account types: Externally-owned account (EOA) – controlled by anyone with the private keys Creating an account costs nothingCan initiate transactionsTransactions between externally-owned accounts can only be ETH/token transfersMade up of a cryptographic pair of keys: public and private keys that control account activities Contract account – a smart contract deployed to the network, controlled by code. Learn about smart contracts Creating a contract has a cost because you're using network storageCan only send transactions in response to receiving a transactionTransactions from an external account to a contract account can trigger code which can execute many different actions, such as transferring tokens or even creating a new contractContract accounts don't have private keys. Instead, they are controlled by the logic of the smart contract code Both account types have the ability to: Receive, hold and send ETH and tokensInteract with deployed smart contracts ","version":null,"tagName":"h2"},{"title":"Accounts vs UTXOs​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#accounts-vs-utxos","content":"Bitcoin, along with many of its derivatives, stores data about users’ balances in a structure based on unspent transaction outputs (UTXOs). The entire state of the system consists of a set of “unspent outputs” (think, “coins”), such that each coin has an owner and a value, and a transaction spends one or more coins and creates one or more new coins, subject to the validity constraints: Every referenced input must be valid and not yet spentThe transaction must have a signature matching the owner of the input for every inputThe total value of the inputs must equal or exceed the total value of the outputs A user’s “balance” in the system is thus the total value of the set of coins for which the user has a private key capable of producing a valid signature. Triple-entry bookkeeping example (Image from https://bitcoin.org/en/developer-guide) Ethereum jettisons this scheme in favor of a simpler approach: the state stores a list of accounts where each account has a balance, as well as Ethereum-specific data (code and internal storage), and a transaction is valid if the sending account has enough balance to pay for it, in which case the sending account is debited and the receiving account is credited with the value. If the receiving account has code, the code runs, and internal storage may also be changed, or the code may even create additional messages to other accounts which lead to further debits and credits. The benefits of UTXOs are: Higher degree of privacy: if a user uses a new address for each transaction that they receive then it will often be difficult to link accounts to each other. This applies greatly to currency, but less to arbitrary dapps, as arbitrary dapps often necessarily involve keeping track of complex bundled state of users and there may not exist such an easy user state partitioning scheme as in currency.Potential scalability paradigms: UTXOs are more theoretically compatible with certain kinds of scalability paradigms, as we can rely on only the owner of some coins maintaining a Merkle proof of ownership, and even if everyone including the owner decides to forget that data then only the owner is harmed. In an account paradigm, everyone losing the portion of a Merkle tree corresponding to an account would make it impossible to process messages that affect that account at all in any way, including sending to it. However, non-UTXO-dependent scalability paradigms do exist. The benefits of accounts are: Large space savings: for example, if an account has 5 UTXO, then switching from a UTXO model to an account model would reduce the space requirements from (20 + 32 + 8) * 5 = 300 bytes (20 for the address, 32 for the txid and 8 for the value) to 20 + 8 + 2 = 30 bytes (20 for the address, 8 for the value, 2 for a nonce(see below)). In reality savings are not nearly this massive because accounts need to be stored in a Patricia tree (see below) but they are nevertheless large. Additionally, transactions can be smaller (eg. 100 bytes in Ethereum vs. 200-250 bytes in Bitcoin) because every transaction need only make one reference and one signature and produces one output.Greater fungibility: because there is no blockchain-level concept of the source of a specific set of coins, it becomes less practical, both technically and legally, to institute a redlist/blacklisting scheme and to draw a distinction between coins depending on where they come from.Simplicity: easier to code and understand, especially once more complex scripts become involved. Although it is possible to shoehorn arbitrary decentralized applications into a UTXO paradigm, essentially by giving scripts the ability to restrict what kinds of UTXO a given UTXO can be spent to, and requiring spends to include Merkle tree proofs of change-of-application-state-root that scripts evaluate, such a paradigm is much more complicated and ugly than just using accounts.Constant light client reference: light clients can at any point access all data related to an account by scanning down the state tree in a specific direction. In a UTXO paradigm, the references change with each transaction, a particularly burdensome problem for long-running dapps that try to use the above mentioned state-root-in-UTXO propagation mechanism. We have decided that, particularly because we are dealing with dapps containing arbitrary state and code, the benefits of accounts massively outweigh the alternatives. Additionally, in the spirit of the We Have No Features principle, we note that if people really do care about privacy then mixers and coinjoin can be built via signed-data-packet protocols inside of contracts. One weakness of the account paradigm is that in order to prevent replay attacks, every transaction must have a nonce, such that the account keeps track of the nonces used and only accepts a transaction if its nonce is 1 after the last nonce used. This means that even no-longer-used accounts can never be pruned from the account state. A simple solution to this problem is to require transactions to contain a block number, making them un-repayable after some period of time, and reset nonces once every period. Miners or other users will need to “ping” unused accounts in order to delete them from the state, as it would be too expensive to do a full sweep as part of the blockchain protocol itself. We did not go with this mechanism only to speed up development for 1.0; 1.1 and beyond will likely use such a system. ","version":null,"tagName":"h3"},{"title":"Blocks​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#blocks","content":"Blocks are batches of transactions with a hash of the previous block in the chain. This links blocks together (in a chain) because hashes are cryptographically derived from the block data ","version":null,"tagName":"h2"},{"title":"Merkle Patricia Trees​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#merkle-patricia-trees","content":"The Merkle Patricia tree/trie, previously envisioned by Alan Reiner and implemented in the Ripple protocol, is the primary data structure of Ethereum, and is used to store all account state, as well as transactions and receipts in each block. ","version":null,"tagName":"h2"},{"title":"Smart Contracts​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#smart-contracts","content":"For this more advance feature, a more sophisticated analogy than a distributed ledger (like bitcoin) introduced. Instead of a distributed ledger, Ethereum is a distributed state machine. Ethereum's state is a large data structure which holds not only all accounts and balances, but a machine state, which can change from block to block according to a pre-defined set of rules, and which can execute arbitrary machine code ","version":null,"tagName":"h2"},{"title":"Ethereum Explorer​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#ethereum-explorer","content":"https://etherscan.io/https://rinkeby.etherscan.io/address/CONTRACT_ADDRESS ","version":null,"tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#references","content":"https://ethereum.org/en/developers/docs/https://docs.infura.io/networks/ethereumhttps://eips.ethereum.org/https://github.com/web3/web3.jshttps://web3js.org ","version":null,"tagName":"h2"},{"title":"My ETH Address​","type":1,"pageTitle":"Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/#my-eth-address","content":"0xc9b64496986E7b6D4A68fDF69eF132A35e91838e ","version":null,"tagName":"h2"},{"title":"CLI","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/CLI","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#table-of-content","content":"Online APIs getblock.io Run your own node Geth InstallationFeaturesStartingImporting accountsInteracting With Geth Transaction InfoBlock infoMetaMaskInfura You can either run your own ethereum layers (node) or use free providers. ","version":null,"tagName":"h2"},{"title":"Online APIs​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#online-apis","content":"","version":null,"tagName":"h2"},{"title":"getblock.io​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#getblockio","content":"geth attach https://eth.getblock.io/token/mainnet/  ","version":null,"tagName":"h3"},{"title":"Run your own node​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#run-your-own-node","content":"","version":null,"tagName":"h2"},{"title":"Geth​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#geth","content":"Official implementation of the Ethereum execution layer in Go Geth is a command-line interface for the Ethereum blockchain. It is a full node, meaning that it is capable of maintaining the entire blockchain, including all transactions and state. It is also capable of running a light client, which is a subset of the full node that only contains the state of the chain and the current block. Installation​ # Ubuntu sudo add-apt-repository -y ppa:ethereum/ethereum sudo pacman -Syyuu geth nodejs sudo npm install -g solc@latest  Features​ Running an Ethereum nodeCommunicating with Ethereum networkSending transactionsInteracting with Smart ContractsCreating accountsWallet FunctionalityMining and ... Starting​ geth --goerli --ws --ws.api=&quot;eth,net,web3,personal,txpool,,admin&quot; --ws.origins '*' --syncmode=light --http --http.port 3334 --http.corsdomain &quot;*&quot; --http.api=&quot;eth,net,web3,personal,txpool,admin&quot; --allow-insecure-unlock # make sure you 30311 and 37608 ports are open sudo iptables -I INPUT -p tcp --dport 30311 -j ACCEPT sudo iptables -I INPUT -p udp --dport 30311 -j ACCEPT sudo iptables -I INPUT -p tcp --dport 37608 -j ACCEPT sudo iptables -I INPUT -p udp --dport 37608 -j ACCEPT sudo iptables -I INPUT -p tcp --dport 8546 -j ACCEPT sudo iptables -I INPUT -p udp --dport 8546 -j ACCEPT sudo iptables -I INPUT -p tcp --dport 8551 -j ACCEPT sudo iptables -I INPUT -p udp --dport 8551 -j ACCEPT sudo iptables -I INPUT -p tcp --dport 3334 -j ACCEPT sudo iptables -I INPUT -p udp --dport 3334 -j ACCEPT  Data folder: ~/.ethereum/. IPC file is: ~/.ethereum/geth.ipc.Accounts and Private Keys are stored: ~/.ethereum/keystore/. For Testnet it: ~/.ethereum/testnet/. cd ~/.ethereum/rinkeby/ rm PRIVATE_KEYS, Account  Importing accounts​ geth account import ~/Data/myself/cryptocurrency-info-recovery/metamask/mforgood/D8_private_key  Interacting With Geth​ geth attach http://127.0.0.1:3334 web3.personal.importRawKey(&quot;111111111PRIVATEKEY1111111111&quot;, &quot;password&quot;) personal.unlockAccount(&quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;) personal.listAccounts eth.getBalance(&quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;) eth.getBalance(eth.accounts[1]) net.peerCount eth.getCode(&quot;0xE683007C5BfB5BEBA5481C3e938dD4DC47cddbFC&quot;) var voter = eth.contract([{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;string&quot;,&quot;name&quot;:&quot;option&quot;,&quot;type&quot;:&quot;string&quot;}],&quot;name&quot;:&quot;addOption&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;getOptions&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;string[]&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string[]&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;getVotes&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;uint256[]&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256[]&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;name&quot;:&quot;options&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;string&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;remove&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;startVoting&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;option&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;name&quot;:&quot;vote&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;string&quot;,&quot;name&quot;:&quot;optionName&quot;,&quot;type&quot;:&quot;string&quot;}],&quot;name&quot;:&quot;vote&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;name&quot;:&quot;votes&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;}]).at(&quot;0xE683007C5BfB5BEBA5481C3e938dD4DC47cddbFC&quot;); voter voter.addOption(&quot;mlibre&quot; , {from: &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;})  ","version":null,"tagName":"h3"},{"title":"Transaction Info​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#transaction-info","content":"eth.getTransaction(&quot;0x43ad3737b39356024aa13bc396237208e66b73bc5f99ab33e08c60731b8a14a9&quot;)  A transaction in ETH-2 looks like this: { accessList: [], blockHash: &quot;0x24635aee8638d9c34f01fdc3a6a80b39dc081df59d33550be92a0badff0c93bb&quot;, blockNumber: 17641198, chainId: &quot;0x1&quot;, from: &quot;0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5&quot;, gas: 21000, gasPrice: 22310851574, hash: &quot;0xa78d2e8e676ad408ad75399c36946ee27968beec36fe38f4c284ffd2c39f20af&quot;, input: &quot;0x&quot;, maxFeePerGas: 22310851574, maxPriorityFeePerGas: 0, nonce: 383610, r: &quot;0x16bb14d65b1e768d6671e69c7ee6189ca070b90a8519c34e97169a4fe0e72865&quot;, s: &quot;0x3107edfd2b4a1cf2d03ce305b74323486e70e9ee0c29ee02c61ed74376e88298&quot;, to: &quot;0xe688b84b23f322a994a53dbf8e15fa82cdb71127&quot;, transactionIndex: 168, type: &quot;0x2&quot;, v: &quot;0x0&quot;, value: 44186254496743523 } // OR { accessList: [], blockHash: &quot;0x424483e1970781103b9f4f22b2d906eeb25ebab5d417b8d706802fec10b4197d&quot;, blockNumber: 17619068, chainId: &quot;0x1&quot;, from: &quot;0xbc0f14d6bdd2f46ab1d56bfd5f28eb6c2a2d2777&quot;, gas: 274223, gasPrice: 24387282490, hash: &quot;0x43ad3737b39356024aa13bc396237208e66b73bc5f99ab33e08c60731b8a14a9&quot;, input: &quot;0x3593564c0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000002890df158d76e584877a1d17a85fea3aeeb85aa600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000&quot;, maxFeePerGas: 31580923735, maxPriorityFeePerGas: 10000000000, nonce: 3895, r: &quot;0x5b7f1d328c3c85b0c74e23511938817f338066f34dabaa2f72fe161c187dac3e&quot;, s: &quot;0x6583f2d3db02c51e9acbfb700f6dd28fac62108a58e397306871e5769d3b7443&quot;, to: &quot;0xef1c6e67703c7bd7107eed8303fbe6ec2554bf6b&quot;, transactionIndex: 0, type: &quot;0x2&quot;, v: &quot;0x1&quot;, value: 0 }  ","version":null,"tagName":"h2"},{"title":"Block info​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#block-info","content":"geth attach https://eth.getblock.io/token/mainnet/ web3.eth.getBlock(eth.blockNumber)  A block in eth2 looks like this: { baseFeePerGas: 14387282490, difficulty: 0, extraData: &quot;0x496c6c756d696e61746520446d6f63726174697a6520447374726962757465&quot;, gasLimit: 30000000, gasUsed: 13371853, hash: &quot;0x424483e1970781103b9f4f22b2d906eeb25ebab5d417b8d706802fec10b4197d&quot;, logsBloom: &quot;0xd16bc008ef900be8452b8128845c1b3014251b90402259020c4520c4746a88b301a403c34060b54ef2109a3663e0190546c33a9afa22bd0c1bf0e41478ac02195e861a2af47429380824635a81592064f249714300451d5840d45737c4209822b7c84e003690d517bd74340044902e33101a0e3022900444e5c52a94594f61500211a451d00c590740e611031b6c5c2d21c5a89b4f558f38b70548730a314da0f6ad9256363d20034acbece6c972458ec7c4d4b3d27689de906aaca44c88847c08d02c3285884c47a0824503a7f5103652f5200e0748a0f64b7178a68d74f1048f39a7ccdf4ea0be044870a028497f86c170de301fe3f44580c99137f49eef2b&quot;, miner: &quot;0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5&quot;, mixHash: &quot;0xfc5ce5faa47e9198054791dff0372514fb876038b605b02abd82fa3b510adbeb&quot;, nonce: &quot;0x0000000000000000&quot;, number: 17619068, parentHash: &quot;0x8afcef307dfe111676d5baa35ab148131fd4918b499c807c657c6291429f8be0&quot;, receiptsRoot: &quot;0xc04575fad7649ea33ec114a2626e6ad87d902c1bea0ac51ef47e5aeb03aadafb&quot;, sha3Uncles: &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;, size: 162982, stateRoot: &quot;0x9fce67ea0ac4c8e9bb310e538663203544ed2f9216a5562ca389f66e154a8af3&quot;, timestamp: 1688455619, totalDifficulty: 5.8750003716598352816469e+22, transactions: [&quot;0x43ad3737b39356024aa13bc396237208e66b73bc5f99ab33e08c60731b8a14a9&quot;, &quot;0xe2588a39acfb64ede45f2372954952b69a0effc9d953b6ff954e624ec9ef7e7a&quot;, &quot;0x10a61db4c6b065cf91de037fbb5eb30717c97b9857c26a42028ab9d0704256e8&quot;, &quot;0x4e0c96c3d942f79384fef9498d022b76ebae4b1097606996d0a4c77abfc2d5b4&quot;, &quot;0xe2a973235b5563490b2b4edbc77f9d98bebad087b70b8238a4476a7ac86d6aa5&quot;, &quot;0xde5c258214c7710836d7315fd443033fa3bb3fb697fae9744cad65a5c9300ba1&quot;, &quot;0x78f1bd662c5e629e14aa4390b15834529790077053ab44b5d896a7416093f152&quot;, &quot;0x7265d060a654e108691b8bd8e4aabb5a6afc78dde302160221b787b76663d4fd&quot;, &quot;0x08d6b6b02e4146808049bfe8257cef85ebf11d045dec48c7a39e1214aa0a459a&quot;, &quot;0xe5aeda0f4cbd47f70e5aada52a867a83eceeb653b0e81b97d13725ada29ab51d&quot;, &quot;0x13c768714925b8b52a5e4b50017cc7873345f0e91081908f77df12e5f25d98f6&quot;, &quot;0x12c4f9a9aa910dab6df1465062bae064722b9da67c1839f4423ac6aca787d5bb&quot;, &quot;0xa750c27929a4f91c613808fca7576b823bb9537c33d012d72192aa751c454be1&quot;, &quot;0x4adc76b7e31c97e84dc705c79042ecc6b4e53cbe751a586f1f5b13496f0e5968&quot;, &quot;0x0656b67f8bddbfac490c114f2e5ea5e09b3256b5d242649546b9184c65f989fd&quot;, &quot;0xbc2b9acc05f0b01b2311c438243d5bcf6120981672c014f76e5cdb62b8158dc4&quot;], transactionsRoot: &quot;0x5113e5b9bb408a7b82ad324135d75543333ada8276bb13a2b8dca6f38b58edac&quot;, uncles: [], withdrawals: [{ address: &quot;0x210b3cb99fa1de0a64085fa80e18c22fe4722a1b&quot;, amount: &quot;0xd827da&quot;, index: &quot;0x8e9d47&quot;, validatorIndex: &quot;0x82c3d&quot; }, { address: &quot;0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f&quot;, amount: &quot;0xd87c41&quot;, index: &quot;0x8e9d4f&quot;, validatorIndex: &quot;0x82c45&quot; }, { address: &quot;0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f&quot;, amount: &quot;0xd806d5&quot;, index: &quot;0x8e9d54&quot;, validatorIndex: &quot;0x82c4a&quot; }, { address: &quot;0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f&quot;, amount: &quot;0xd772ad&quot;, index: &quot;0x8e9d55&quot;, validatorIndex: &quot;0x82c4b&quot; }, { address: &quot;0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f&quot;, amount: &quot;0xd73366&quot;, index: &quot;0x8e9d56&quot;, validatorIndex: &quot;0x82c4c&quot; }], withdrawalsRoot: &quot;0x4915e375cb0b2df0dfb9115fab5c0acef3abebd037cdc693edc065f3a8da44b0&quot; }  ","version":null,"tagName":"h2"},{"title":"MetaMask​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#metamask","content":"There are several ways to interact with the Ethereum blockchain. Running a local node with Geth for exampleCalling web APIs. for example blockcypher... Metamask is a client-side browser extension that provides a high-level javascript library to interact with the Ethereum network. metamask.io It is also a crypto wallet. On the backend side, it uses infura or other API providers to comminute with Ethereum blockchain. So basically you as a developer don't have to worry about making/signing/sending transactions, ... And as a user, it makes things much easier. for example, you don't have to sign a proof message to prove you are the owner of an address MetaMask is also offering other features custom network, ... ","version":null,"tagName":"h2"},{"title":"Infura​","type":1,"pageTitle":"CLI","url":"/Wisdom-Hub/blockchain/Ethereum/CLI#infura","content":"Ethereum &amp; IPFS APIs infura.io As it says they are providing APIs, so we can easily communicate with the Ethereum network. in the background, they probably have geth nodes or other kinds of nodes running. ","version":null,"tagName":"h2"},{"title":"Creating a decentralized exchange from scratch - Ethereum","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/","content":"","keywords":"","version":null},{"title":"Table of Contents​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#table-of-contents","content":"Requirements and TechnologiesSetting up GanacheGetting startedExchange contractFactory contractMLB1 and MLB2 ERC-20 ContractsDeploying DEX on GanacheReferencesAbout The AuthorDonate 💗 ","version":null,"tagName":"h2"},{"title":"Requirements and Technologies​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#requirements-and-technologies","content":"We will use the following technologies: Ganache as the blockchain. Solidity as the programming language. OpenZeppelin framework for ERC-20 tokens. Web3.js as the nodejs API which connects to JSON-RPC providers.Nodejs and NPM v14.17.6 LTS or higher installed ","version":null,"tagName":"h2"},{"title":"Setting up Ganache​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#setting-up-ganache","content":"Install Ganache sudo pamac install ganache-bin  Open it and use the following configuration to start a new workspace HOSTNAME: 0.0.0.0PORT: 7545AUTOMINE: trueGAS LIMIT: 10000000000000000GAS PRICE: 200000000000 ","version":null,"tagName":"h2"},{"title":"Getting started​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#getting-started","content":"First, we write an Exchange contract that will be used to swap a token and ether. for each token-ether pair one exchange contract will be deployedThen we write a Factory contract that is for creating and deploying Exchange contracts. It will also keep track of the deployed Exchange contractsWe compile and deploy MLB1 and MLB2 ERC-20 contractsWe compile and deploy the Factory contract on GanacheWe call CreateExchange function of the Factory contract to create two new exchange contracts for MLB1 and MLB2 ","version":null,"tagName":"h2"},{"title":"Exchange contract​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#exchange-contract","content":"The exchange contract takes a token address parameter in the constructor. The token can be swapped for ether and vice versa. It also inherits from the ERC-20 contract to create a reward token. This token (MLBReward) will be distributed to the Liquidity Providers. So exchange contract has also all the functionality of an ERC-20 contract. import &quot;./node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;; import &quot;./node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;; interface IExchange { function ethToTokenSwap(uint256 _minTokens) external payable; function ethToTokenTransfer(uint256 _minTokens, address _recipient) external payable; } interface IFactory { function getExchange(address _tokenAddress) external returns (address); } contract Exchange is ERC20 { address public tokenAddress; address public factoryAddress; // The factory contract address that created this exchange contract constructor(address _token) ERC20(&quot;MLBReward&quot;, &quot;MLBR&quot;) { require(_token != address(0), &quot;invalid token address&quot;); tokenAddress = _token; factoryAddress = msg.sender; }  addLiquidity function is used to add liquidity to the exchange. It is a payable function. We send ether and token to this function. This function also mints MLBReward to the LP based on the amount of ETH LP has sent. removeLiquidity function is used to remove liquidity from the exchange. It takes an amount of ether and token LP wants to withdraw. This function also burns MLBReward from the LP. ethToToken function is used to swap ether to the token. It takes an amount of ether LP wants to swap. and the minimum amount of tokens LP wants to receive. ","version":null,"tagName":"h2"},{"title":"Factory contract​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#factory-contract","content":"Factory contract is used to create and deploy Exchange contracts. It also keeps track of the deployed exchange contracts. It has a createExchange function that takes a token address and creates and deploys an exchange contract. // SPDX-License-Identifier: Unlicense pragma solidity ^0.8.10; import &quot;./exchange.sol&quot;; // Factory is a contract that creates exchange contracts. and keep track of what it has created. contract Factory { mapping(address =&gt; address) public tokenToExchange; // map of token address to exchange address int256 public numExchanges; // number of exchanges created address[] public tokenList; // list of token addresses function createExchange(address _tokenAddress) public returns (address) { require(_tokenAddress == address(_tokenAddress), &quot;Not a valid address&quot;); require(_tokenAddress != address(0), &quot;Zero token address is not valid&quot;); // tokenToExchange[_tokenAddress] returns &quot;zero address&quot; if _tokenAddress is not in the map require( tokenToExchange[_tokenAddress] == address(0), &quot;Exchange already exists&quot; ); Exchange exchange = new Exchange(_tokenAddress); // Tracking tokenToExchange[_tokenAddress] = address(exchange); numExchanges++; tokenList.push(_tokenAddress); return address(exchange); } function getExchange(address _tokenAddress) public view returns (address) { return tokenToExchange[_tokenAddress]; } function getTokens() public view returns (address[] memory) { return tokenList; } }  ","version":null,"tagName":"h2"},{"title":"MLB1 and MLB2 ERC-20 Contracts​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#mlb1-and-mlb2-erc-20-contracts","content":"MLB1 and MLB2 are tokens we will deploy, and create two exchange contracts for. ","version":null,"tagName":"h2"},{"title":"Deploying DEX on Ganache​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#deploying-dex-on-ganache","content":"We use ethereum-smart-contract-deployer npm package to deploy the contracts on Ganache. Following this scenario: Deploying MLB1 and MLB2 tokensDeploying Factory contractCreating two exchanges for MLB1-ether and MLB2-ether git clone https://github.com/mlibre/blockchain.git cd blockchain/Ethereum/Build\\ a\\ DEX\\ from\\ scratch/ npm i node main.js  main.js code is as follows: let MLB1Deployer = await new Deployer({ contractFilePath: &quot;./MLB1.sol&quot;, input: [200], sender: LP, mnemonic: &quot;gospel fault armor invest scrap manage salad ride amazing among clay feature&quot;, address: &quot;http://127.0.0.1:7545&quot;, compilerOptimize: true, compileOutput: &quot;combined&quot;, combineFolder: 'combined', combined: true, setGas: true, confirmations: false }) let MLB1 = await MLB1Deployer.deploy(); let MLB1Decimals = await MLB1.methods.decimals().call(); // ABI &amp; Contract address of the token which can be exchanged for ETH let MLB1ContractAddress = MLB1.options.address; // Contract address of a sample deployed ERC-20 token let MLB1Abi = MLB1Deployer.contract.abi; let MLB2Deployer = await new Deployer({ contractFilePath: &quot;./MLB2.sol&quot;, input: [200], sender: LP, mnemonic: &quot;gospel fault armor invest scrap manage salad ride amazing among clay feature&quot;, address: &quot;http://127.0.0.1:7545&quot;, compilerOptimize: true, compileOutput: &quot;combined&quot;, combineFolder: 'combined', combined: true, setGas: true, confirmations: false }) let MLB2 = await MLB2Deployer.deploy(); let MLB2Decimals = await MLB2.methods.decimals().call(); // ABI &amp; Contract address of the token which can be exchanged for ETH let MLB2ContractAddress = MLB2.options.address; // Contract address of a sample deployed ERC-20 token let MLB2Abi = MLB2Deployer.contract.abi const factory = await new Deployer({ contractFilePath: &quot;./factory.sol&quot;, sender: owner, mnemonic: &quot;gospel fault armor invest scrap manage salad ride amazing among clay feature&quot;, // Ganache mnemonic address: &quot;http://127.0.0.1:7545&quot;, // Ganache address compilerOptimize: true, compileOutput: &quot;combined&quot;, combineFolder: 'combined', setGas: true, confirmations: false }); const FactoryInstance = await factory.deploy(); web3 = factory.web3; let toWei = web3.utils.toWei; await FactoryInstance.methods.createExchange(MLB1ContractAddress) .send({ from: owner }) await FactoryInstance.methods.createExchange(MLB2ContractAddress) .send({ from: owner }) MLB1ExchangeAddress = await FactoryInstance.methods.getExchange(MLB1ContractAddress).call(); MLB2ExchangeAddress = await FactoryInstance.methods.getExchange(MLB2ContractAddress).call();  Our DEX is now deployed and ready to use. Lets add some liquidity to the MLB1-Ether exchange.  let LPMLB1TokenToSend = (20 * 10 ** MLB1Decimals).toString(); await MLB1.methods.approve(MLB1Exchange.options.address, LPMLB1TokenToSend) .send( { from: LP }); await MLB1Exchange.methods.addLiquidity(LPMLB1TokenToSend) // Token Amount to send for liquidity .send({ from: LP, value: toWei(&quot;1.5&quot;) // Ether amount to send for liquidity });  Or swap MLB1 for Ether.  await MLB1.methods.approve(MLB1Exchange.options.address, LPMLB1TokenSwap).send({from: LP}); let tokenToEthSwap = await MLB1Exchange.methods.tokenToEthSwap(LPMLB1TokenSwap, ethOut) .send({ from: LP, });  You can find the full example and source codes under this directory. ","version":null,"tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#references","content":"https://jeiwan.net/posts/programming-defi-uniswap-1/https://jeiwan.net/posts/programming-defi-uniswap-2/https://medium.com/coinmonks/programming-defi-uniswap-part-3-791005c6238e ","version":null,"tagName":"h2"},{"title":"About The Author​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#about-the-author","content":"I'm mlibre, a random guy from the solar galaxy. I am interested in blockchain tech and find it very useful for lots of things. Feel free to check my Github ","version":null,"tagName":"h2"},{"title":"Donate 💗​","type":1,"pageTitle":"Creating a decentralized exchange from scratch - Ethereum","url":"/Wisdom-Hub/blockchain/Ethereum/Build a DEX from scratch/#donate-","content":"ETH: 0xc9b64496986E7b6D4A68fDF69eF132A35e91838e ","version":null,"tagName":"h2"},{"title":"Step By Step guide on how to create your very own ERC20 token","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/","content":"","keywords":"","version":null},{"title":"Getting start​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#getting-start","content":"Install Nodejs, Solidity in your Linux/Windows. and clone the repo. sudo pacman -S nodejs geth sudo npm install -g solc solcjs --version  Clone the repo and install dependencies git clone https://github.com/mlibre/blockchain cd Ethereum/ERC721/ npm i npm i --dev-only  ","version":null,"tagName":"h2"},{"title":"Files​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#files","content":"ERC20Basic.sol: The contractmain.js: A Nodejs contract deployerbin: Compiles' outputs As you may have already noticed, we are using the openzeppelin contracts V4. So the contract code, ERC20Basic.sol is basically few lines of codes! // SPDX-License-Identifier: GPL-3.0 pragma solidity ^0.8.9; import &quot;./node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;; import &quot;./node_modules/@openzeppelin/contracts/access/Ownable.sol&quot;; contract MlibreToken is ERC20, Ownable { constructor(uint256 initialSupply) ERC20(&quot;Mlibre&quot;, &quot;MLB&quot;) { _mint(msg.sender, initialSupply * (10 ** uint256(decimals()))); } function mint(address to, uint256 amount) public onlyOwner { _mint(to, amount); } }  initialSupply is the amount of total token supply, we pass it on the creation time. mint function gives us the ability to mint tokens later. ","version":null,"tagName":"h2"},{"title":"Compile via Solc​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#compile-via-solc","content":"You don't have to compile the contract with solc as Contract Deployer.js will compile it itself. but it is good to see if there are any errors. solc ERC20Basic.sol -o ./bin/ --combined-json=abi,bin,metadata --pretty-json --optimize --metadata --gas --abi --bin --overwrite --color  ","version":null,"tagName":"h2"},{"title":"Step By Step guide on how to create your very own ERC-1155 token","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#options","content":"--metadata: creates metadata--abi: creates abi--bin: creates bin--combined-json=abi,bin,metadata: creates a json containing all above Deploying on Goerli If everything went well. it is time to deploy our contract on the Blockchain! ","version":null,"tagName":"h2"},{"title":"Importing an account into Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#importing-an-account-into-geth","content":"If you have not added your account in the local Geth before # rm -r /home/mlibre/.ethereum/goerli/geth/ # rm -r /home/mlibre/.ethereum/geth geth account import ~/Data/myself/cryptocurrency-info-recovery/metamask/mforgood/D8_private_key # Set a password  ","version":null,"tagName":"h2"},{"title":"Unlocking an account in Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#unlocking-an-account-in-geth","content":"geth --goerli --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot; geth attach http://127.0.0.1:8545 web3.personal.importRawKey(&quot;AccountPrivateKey&quot;, &quot;ThePasswordYouJustSet&quot;) # copy the address personal.unlockAccount(&quot;TheAddress&quot;) # Type the password  ","version":null,"tagName":"h2"},{"title":"Run Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#run-geth","content":"If you have not run Geth already: geth --goerli --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot;  ","version":null,"tagName":"h2"},{"title":"Running Deployer​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#running-deployer","content":"Now It is time to deploy the contract on the blockchain. Open the main.js file and set the Deployer's arguments. node main.js  Congrats! it is done :) the output should be something like this: Network Name: goerli Network Peers: 17 Solidity Version: 0.8.9 Compiling contract ERC1155Basic.sol -&gt; MLBs ETH balance: 5.824729999401939589 Gas: 3103808 Gas Price in ETH: 0.000000004 Total Cost in ETH: 0.012415232 ETH balance after deploying: 5.812314767401939 Deploying Contract ... Arguments: [ 7 ] Transaction hash: 0x3964c8a6c1138567f342e7c091c975fd3460a87bd7eeb7b5b89d487b2d129d4a Confirmation Number: 0 Owner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C Contract Address: 0xEDB1a4059b2E46280d2e1F646977b1715EC923c5 Etherscan.io: https://goerli.etherscan.io/address/0xEDB1a4059b2E46280d2e1F646977b1715EC923c5  If you click on the last link you will find the token. Verifying the contract So first copy all the files contract uses, and then change the imports' paths. I have done it for this example. you can find all the modified files in combined folder. If etherscan was unable to detect the constructor parameters. you can use hashex. copy the TOKENNAME_abi.json file that the deployer has made. and paste it in hashex. We passed the value '7' to the contract constructor. Open goerli.etherscan.io/verifyContract ","version":null,"tagName":"h2"},{"title":"Settings​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#settings","content":"Contract Address: 0x11C47A4F19cc52923b9C495080ADB441ADe38883 (YOUR CONTRACT ADDRESS)Compiler Type: Multi part fileCompiler Version: 0.8.9License MITOptimization: No ","version":null,"tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#images","content":"Settings Files upload. Files are necessary always like this. These photos just show the whole idea. Verified ","version":null,"tagName":"h2"},{"title":"Interacting via Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#interacting-via-geth","content":"geth attach http://127.0.0.1:8545 personal.unlockAccount(&quot;0xd8f24d419153e5d03d614c5155f900f4b5c8a65c&quot;) var abi = [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;nam&quot; var MyContract = web3.eth.contract(abi); # Copy Contract Address var MyContractInstance = MyContract.at('0x11C47A4F19cc52923b9C495080ADB441ADe38883'); MyContractInstance.balanceOf(&quot;0xd8f24d419153e5d03d614c5155f900f4b5c8a65c&quot; , {from: eth.accounts[0]}); MyContractInstance.transfer('10', &quot;0x9998B1Eea4326FF00D77Efd9779Aac84d1bBA259&quot; , {from: eth.accounts[0]});  ","version":null,"tagName":"h2"},{"title":"Interacting via web3js​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-1155 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC1155/#interacting-via-web3js","content":"If you like to call contract functions like mint, I have also implemented some in main.js like getBalance and mint functions. ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#options","content":"--metadata: creates metadata--abi: creates abi--bin: creates bin--combined-json=abi,bin,metadata: creates a json containing all above ","version":null,"tagName":"h3"},{"title":"Deploying on Goerli​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#deploying-on-goerli","content":"If everything went well. it is time to deploy our contract on the Blockchain! geth --goerli --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot;  ","version":null,"tagName":"h2"},{"title":"Running Deployer​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#running-deployer","content":"Now It is time to deploy the contract on the blockchain. Open the main.js file and set the Deployer's arguments. node main.js  Congrats! it is done :) the output should be something like this: Network Name: goerli Network Peers: 17 Solidity Version: 0.8.9 Compiling contract ERC20Basic.sol ETH balance: 5.801357301927762163 Gas: 1645359 Gas Price in ETH: 0.000000001500000007 Total Cost in ETH: 0.0024680385115175129 ETH balance after deploying: 5.798889263416244 Deploying Contract MlibreToken Arguments: [ 12300000000 ] Transaction hash: 0xe61eb01b53e859059b40e86b7119594ca48df793fbda73c69f201e76a96ae23d Block number: 5819409 Owner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C Contract Address: 0x2107130860b83dF501C518A2A6D4652dC3af0388 Etherscan.io: https://goerli.etherscan.io/address/0x2107130860b83dF501C518A2A6D4652dC3af0388  If you click on the last link you will find the token on Etherscan.io. ","version":null,"tagName":"h3"},{"title":"Verifying the contract​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#verifying-the-contract","content":"Verifying contracts on etherscan are a bit hard right now :) So first copy all the files that contract uses in a folder, use a same the solidity version for all. Now fix the imports' paths, and compile it again. I have done it for our case and put the modified files in the combined folder. If etherscan was unable to detect the constructor parameters. you can use hashex. Copy the TOKENNAME_abi.json file that the deployer has made. and paste it in hashex. I pass the value '12300000000' to the contract constructor. Open goerli.etherscan.io/verifyContract ","version":null,"tagName":"h2"},{"title":"Settings​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#settings","content":"Contract Address: 0xEf6b32e2375EC3C2bc342Bb8fEA6040A5E426C9b (YOUR CONTRACT ADDRESS)Compiler Type: Multi part filesCompiler Version: 0.8.9License GPL-v3Optimization: No ","version":null,"tagName":"h3"},{"title":"Images​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#images","content":"Settings Files upload. Files are necessary always like this. These photos just show the whole idea. Verified ","version":null,"tagName":"h3"},{"title":"Interacting via Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#interacting-via-geth","content":"geth attach http://127.0.0.1:8545 personal.unlockAccount(&quot;0xd8f24d419153e5d03d614c5155f900f4b5c8a65c&quot;) var abi = [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;nam&quot; var MyContract = web3.eth.contract(abi); # Copy Contract Address var MyContractInstance = MyContract.at('0x4B2935DD5D2B1F8dB272858F6F9EAe8Fc8927B27'); MyContractInstance.balanceOf(&quot;0xd8f24d419153e5d03d614c5155f900f4b5c8a65c&quot; , {from: eth.accounts[0]}); MyContractInstance.transfer('10', &quot;0x9998B1Eea4326FF00D77Efd9779Aac84d1bBA259&quot; , {from: eth.accounts[0]});  ","version":null,"tagName":"h3"},{"title":"Interacting via web3js​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC20 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC20/#interacting-via-web3js","content":"async function mint(web3, contract, amount) { await web3.eth.personal.unlockAccount(options.sender , options.password, 150) let contractInstance = new web3.eth.Contract(contract.abi, options.token); const result = await contractInstance.methods.mint(options.sender , amount.toString()).send({from: options.sender}) console.log(result); }  ","version":null,"tagName":"h3"},{"title":"Step By Step guide on how to create your very own ERC-721 token","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#options","content":"--metadata: creates metadata--abi: creates abi--bin: creates bin--combined-json=abi,bin,metadata: creates a json containing all above Deploying on Goerli If everything went well. it is time to deploy our contract on the Blockchain! geth --goerli --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot;  ","version":null,"tagName":"h2"},{"title":"Importing an account into Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#importing-an-account-into-geth","content":"If you have not added your account in the local Geth before # rm -r /home/mlibre/.ethereum/goerli/geth/ # rm -r /home/mlibre/.ethereum/geth geth account import ~/Data/myself/cryptocurrency-info-recovery/metamask/mforgood/D8_private_key # Set a password  ","version":null,"tagName":"h2"},{"title":"Unlocking an account in Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#unlocking-an-account-in-geth","content":"geth --goerli --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot; geth attach http://127.0.0.1:8545 web3.personal.importRawKey(&quot;AccountPrivateKey&quot;, &quot;ThePasswordYouJustSet&quot;) # copy the address personal.unlockAccount(&quot;TheAddress&quot;) # Type the password  ","version":null,"tagName":"h2"},{"title":"Running Deployer​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#running-deployer","content":"Now It is time to deploy the contract on the blockchain. Open the main.js file and set the Deployer's arguments. node main.js  Congrats! it is done :) the output should be something like this: Network Name: goerli Network Peers: 17 Solidity Version: 0.8.9 Compiling contract ERC721Basic.sol -&gt; MLBNft ETH balance: 5.829774442502007989 Gas: 2600228 Gas Price in ETH: 0.0000000019400003 Total Cost in ETH: 0.0050444431000684 ETH balance after deploying: 5.8247299994019395 Deploying Contract ... Arguments: [] Transaction hash: 0x0e5227da04038faecbc9e50400716f3805ee9edb87b53bbce89343d069351a29 Confirmation Number: 0 Owner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C Contract Address: 0xCa8234A0fdaAeFF1Ed3435E0832406b944c71327 Etherscan.io: https://goerli.etherscan.io/address/0xCa8234A0fdaAeFF1Ed3435E0832406b944c71327  If you click on the last link you will find the token. Verifying the contract So first copy all the contract files (If you are using openzeppelin wizard, you can download vendor zip). to a folder like combined.Then change the imports' paths to current path.And all the sol versions to your solc version (0.8.9)Deploy the contract again node main.js -f combined/MLBNft.sol -c MLBNft -s &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot; -p &quot;password&quot; -h &quot;http://127.0.0.1:8545&quot;  Verify the new contract address I have done it for this example. you can find all the modified files in combined folder. If etherscan was unable to detect the constructor parameters. you can use hashex. copy the TOKENNAME_abi.json file that the deployer has made. and paste it in hashex. We passed the value '7' to the contract constructor. Now deploy the contract. Open goerli.etherscan.io/verifyContract ","version":null,"tagName":"h2"},{"title":"Settings​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#settings","content":"Contract Address: 0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b (YOUR CONTRACT ADDRESS)Compiler Type: Multi part filesCompiler Version: 0.8.7License MITOptimization: No ","version":null,"tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#images","content":"Settings Files upload. Files are necessary always like this. These photos just show the whole idea. Verified ","version":null,"tagName":"h2"},{"title":"Interacting via Geth​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#interacting-via-geth","content":"geth attach http://127.0.0.1:8545 personal.unlockAccount(&quot;0xd8f24d419153e5d03d614c5155f900f4b5c8a65c&quot;) var abi = [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;nam&quot; var MyContract = web3.eth.contract(abi); # Copy Contract Address var MyContractInstance = MyContract.at('0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b'); MyContractInstance.balanceOf(&quot;0xd8f24d419153e5d03d614c5155f900f4b5c8a65c&quot; , {from: eth.accounts[0]});  ","version":null,"tagName":"h2"},{"title":"Interacting via web3js​","type":1,"pageTitle":"Step By Step guide on how to create your very own ERC-721 token","url":"/Wisdom-Hub/blockchain/Ethereum/ERC721/#interacting-via-web3js","content":"If you like to call contract functions like mint, I have also implemented some in main.js like getBalance and mint functions. ","version":null,"tagName":"h2"},{"title":"Connecting To MetaMask Browser Extension and Injecting Web3","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/MetaMask/","content":"Connecting To MetaMask Browser Extension and Injecting Web3 info You can find the codes and files in the Github repo. index.html &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Untitled Document&lt;/title&gt; &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot; integrity=&quot;sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/@metamask/detect-provider/dist/detect-provider.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/web3/1.6.0/web3.min.js&quot; integrity=&quot;sha512-+BhnLgfzIDDjssoEWHPmdgWRvbwIEdj0Xfiys7uSqfQWpMEOJ4ymJ88O6B1cB0j+4zjb5GhO+sb/kEicggvUQQ==&quot; crossorigin=&quot;anonymous&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; index.js /* eslint-disable no-undef */ $(window).on(&quot;load&quot;, async function() { const provider = await detectEthereumProvider() if (typeof window.ethereum !== &quot;undefined&quot;) { console.log(&quot;MetaMask is installed!&quot;) if (provider) { if (provider !== window.ethereum) { console.error(&quot;Do you have multiple wallets installed?&quot;) } else { console.log(&quot;MetaMask is ready&quot;) const accounts = await ethereum.request({ method: &quot;eth_requestAccounts&quot; }) const account = accounts[0] const chainId = await ethereum.request({ method: &quot;eth_chainId&quot; }) console.log(chainId, accounts, account) window.web3 = new Web3(window.ethereum) } } else { console.log(&quot;Please install MetaMask!&quot;) } } else { console.log(&quot;MetaMask is not installed!&quot;) } }) ","keywords":"","version":null},{"title":"Crowd Funding With Deadline Contract","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/More Simple Smart Contracts/crowd-funding-using-library/","content":"Crowd Funding With Deadline Contract Simple Crowd Funding Contract. Installation and running Open ganache npm i node main.js ","keywords":"","version":null},{"title":"Crowd Funding With Deadline Contract","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/More Simple Smart Contracts/crowd-funding-with-deadline/","content":"","keywords":"","version":null},{"title":"Compiling SCs using solcjs​","type":1,"pageTitle":"Crowd Funding With Deadline Contract","url":"/Wisdom-Hub/blockchain/Ethereum/More Simple Smart Contracts/crowd-funding-with-deadline/#compiling-scs-using-solcjs","content":"solcjs crowd-funding-with-deadline.sol -o ./bin/ --pretty-json --optimize --abi --bin  ","version":null,"tagName":"h2"},{"title":"Multi Signature Wallet","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/More Simple Smart Contracts/multi-sig-wallet/","content":"Multi Signature Wallet Simple Multi Signature Wallet Contract. It is a smart contract that allows multiple owners to approve a transaction. Installation and running Open ganache npm i node main.js ","keywords":"","version":null},{"title":"Voter Contract","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/More Simple Smart Contracts/voter/","content":"","keywords":"","version":null},{"title":"Installation and running​","type":1,"pageTitle":"Voter Contract","url":"/Wisdom-Hub/blockchain/Ethereum/More Simple Smart Contracts/voter/#installation-and-running","content":"Open ganache npm i node main.js  ","version":null,"tagName":"h2"},{"title":"Ganache & Truffle","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Ethereum/Truffle/","content":"Ganache &amp; Truffle info You can find the codes and files in the Github repo. Ganache &amp; Truffle Ganache and Truffle are a set of tools for building and running test networks. Table of content InstallationNew Workspace ConfigurationStarting a Truffle ProjectRunning a Truffle Project Installation sudo pamac install ganache-bin sudo npm install -g truffle@latest New Workspace Configuration Open Ganache and use the following configuration to start a new workspace HOSTNAME: 0.0.0.0PORT: 7545AUTOMINE: trueGAS LIMIT 10000000000000000GAS PRICE: 200000000000 Starting a Truffle Project truffle init Edit the truffle-config.js file: module.exports = { networks: { ganache: { host: &quot;127.0.0.1&quot;, // Localhost (default: none) port: 7545, // Standard Ethereum port (default: none) gas: 5000000, // Gas sent with each transaction (default: ~6700000) network_id: &quot;*&quot;, // Any network (default: none) } }, mocha: { // timeout: 100000 }, compilers: { solc: { version: &quot;0.8.9&quot;, // Fetch exact version from solc-bin (default: truffle's version) }, }, db: { enabled: false } } Running a Truffle Project Put your contracts in the contracts directory. and compile them with truffle compile truffle compile Deploy your contracts with truffle migrate truffle migrate --network ganache --reset It is done, now if you link the project folder to Ganache, you can see the deployed contracts. You can also run the tests with truffle test truffle test ","keywords":"","version":null},{"title":"NEAR","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/NEAR/","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#table-of-content","content":"Here are some of the topics that we will cover in this repository: Introduction to NEARNEAR Architecture Consensus Thresholded Proof-of-StakeDoomslug Accounts Access Keys Full Access KeysFunction Call Keys Locked Accounts StorageBlocksTransactions and ReceiptsTrieNightshadeSmart ContractsToken LossTransactions Economy Smart Contracts EconomyStorage EconomyValidators SecurityBlockchain Operating System (BOS)Summary ProsCons My NEAR Account IDResources ","version":null,"tagName":"h2"},{"title":"Introduction to NEAR​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#introduction-to-near","content":"NEAR is a layer one, sharded, proof-of-stake blockchain. designed to offers fast and scalable solutions to users and developers alike. NEAR aims to make it easier for developers to build decentralized applications. Why NEAR: Uses human-readable accountsFast and cheep transactionsScalable. Thanks to its shardingPossess a simple yet rich system of Access Keys to handle account permissionsSupports multiple programming languages, making it accessible to a wide range of developers ","version":null,"tagName":"h2"},{"title":"NEAR Architecture​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#near-architecture","content":"NEAR is a stateful blockchain that maintains a global state updated by transactions. The state is stored as a trie. In NEAR, users and applications have access to the global state. NEAR uses a sharding technique called Nightshade to distribute it's network. Key roles in the NEAR blockchain ecosystem include: Validators – provides compute, storage and security in the network in return for rewards from the protocolDevelopers – build profitable applications, powered by underlying infrastructure of the protocolUsers – users of applications, and platform itself, are driven by getting value out of these interactionToken Holders – holders of protocol (native) token, either for later usage or to provide liquidityProtocol Governance Body – entity responsible for development and governance of the network. This can be a DAO and/or non-profit foundation ","version":null,"tagName":"h2"},{"title":"Consensus​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#consensus","content":"NEAR uses Thresholded Proof-of-Stake consensus mechanism. Transactions are grouped into blocks. Blocks are grouped into epochs. In a chain, the set of blocks that belongs to some epoch forms a contiguous range. Each epoch is associated with a set of block producers responsible for validating blocks within that epoch. The information for an epoch is determined by the last block. Therefore, if two chains share the last block of some epoch, they will have the same set and the same assignment for the next two epochs, but not necessarily for any epoch after that. The consensus protocol defines a notion of finality, which helps ensure that transactions in a final block (and preceding blocks) are irreversible. In NEAR a consensus node (block producer) doesn’t validate an entire block, but rather specified chunks of each block. NEAR relies on its own variant of consensus algorithm known as Doomslug. Doomslug ensures that a block is irreversible unless at least one participant is slashed, providing practical finality. Anyone can become a block producer and/or validator on NEAR as long as they have NEAR tokens to lock as collateral. Thresholded Proof-of-Stake​ In PoS systems, nodes participate in decisions proportionally to the amount of money they have. One common implementation of PoS is Delegated Proof of Stake (DPoS), where the network votes for delegates who maintain the network and make decisions on behalf of other members. However, this can lead to centralization and a small number of nodes controlling network maintenance medium.com. TPoS aims to address these issues by using an election mechanism that deterministically selects a large number of participants for network maintenance, thereby increasing decentralization and security. This method is similar to an auction, where people bid for a fixed number of items, and the top N bids win while receiving a number of items proportional to the size of their bids medium.com. Doomslug​ At the beginning of every epoch (1/2 day) the set of largest stake-weighted participants on the network are selected. In short, Doomslug works by having a set of participants take turns to produce and broadcast blocks. Once a block at height h is received by other participants, they send endorsements on such a block to the participant assigned to the next height h+1. If after some predetermined time the participant assigned to h+1 hasn’t produced a block, the participants who sent an endorsement to her send another message to the participant assigned to h+2 indicating that they suggest skipping the block at h+1.  NEAR does not have explicit slashing for availability (liveness). However, if a validator is not responsive enough at every epoch (fulfilling with minimum threshold of chunks), they will drop out of the consensus set and lose the rewards from the epoch. Once that happens, the validator must re-stake the tokens. What refers to as practical finality, or doomslug finality is that a block produced by Doomslug is irreversible unless at least one participant is slashed. Doomslug also has a nice property that it continues producing and finalizing blocks for as long as just over half of all the participants are online and honest ","version":null,"tagName":"h3"},{"title":"Accounts​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#accounts","content":"Every account at NEAR belongs to some shard. All the information related to this account also belongs to the same shard. The information includes: BalanceLocked balance (for staking)Code of the contractKey-value storage of the contractAll Access KeysPostponed ActionReceiptsReceived DataReceipts Every NEAR account is identified by a specific address. Based on their name, two types of accounts can be distinguished: Named accounts, with human readable names such as alice.near.Implicit accounts, referred by 64 chars (e.g. 98793cd91a3f870fb126f662858[...]). Access Keys​ NEAR accounts can have multiple keys, each with their own set of permissions. Access Keys are similar to OAuths, enabling you to grant limited access over your account to third-parties. Full Access keys have full control of an account, similar to having administrator privileges on your operating system Full Access Keys​ As the name suggests, FullAccess keys have full control of an account, similar to having administrator privileges on your operating system. Create immediate sub-accountsDelete your account (but not sub-accounts, since they have their own keys)Add or remove Access KeysDeploy a smart contract in the accountCall methods on any contract (yours or others)Transfer NEAR Ⓝ Function Call Keys​ FunctionCall keys only have permission to call non-payable methods on contracts, i.e. methods that do not require you to attach NEAR Ⓝ. FunctionCall keys are defined by three attributes: receiver_id: The contract which the key allows to call. No other contract can be called using this keymethod_names: The contract's methods the key allows to call (Optional). If omitted, all methods may be calledallowance: The amount of Ⓝ allowed to spend on gas (Optional). If omitted, the key will only be allowed to call view methods (read-only) Function Call keys main purpose is to be handed to apps, so they can make contract calls in your name Locked Accounts​ If you remove all keys from an account, then the account will become locked, meaning that no external actor can perform transactions in the account's name. In practice, this means that only the account's smart contract can transfer assets, create sub-accounts, or update its own code. Locking an account is very useful when one wants to deploy a contract, and let the community be assured that only the contract is in control of the account. ","version":null,"tagName":"h3"},{"title":"Storage​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#storage","content":"Storing data on the blockchain has a long-playing role. Networks like Bitcoin and Ethereum misprice storage by only allocating reward to miners who mined specific transactions instead of future miners who will need to continue storing this data while they are mining. In NEAR, Ⓝ also represents the right to store some amount of data. Token holders have the right to occupy some amount of the blockchain’s overall space. For example, if Alice has a balance of 1 Ⓝ, she can store roughly 10 kilobytes on her account. This means that users need to maintain a fraction of Ⓝ as a minimum balance if they want to have their account, similar to how checking accounts in banks require a minimum balance. This allows contracts which are maintaining important state to pay to Validators proportionally to the amount of data they are securing. For example, an important contract of the stable coin that would maintain the balances of millions of users will accordingly need to have a reserve of Ⓝ to cover the amount of storage it will require on the blockchain. ","version":null,"tagName":"h3"},{"title":"Blocks​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#blocks","content":"A block includes one chunk for each shard, and it is the chunks which include the transactions that were executed for its associated shard. Near is a permissionless blockchain, so anyone (with sufficient stake) can become a chunk-only producer, or a block producer ","version":null,"tagName":"h3"},{"title":"Transactions and Receipts​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#transactions-and-receipts","content":"Transactions are created outside the Near Protocol node, by the user who sends them via RPC or network communication. Receipts are created by the runtime from transactions or as the result of processing other receipts. ","version":null,"tagName":"h3"},{"title":"Trie​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#trie","content":"Near Protocol is a stateful blockchain. there is a state associated with each account and the user actions performed through transactions mutate that state. The state then is stored as a trie Near partitions the trie between the shards to distribute the load. It synchronizes the trie between the nodes, and eventually it is responsible for maintaining the consistency of the trie between the nodes through its consensus mechanism and other game-theoretic methods ","version":null,"tagName":"h3"},{"title":"Nightshade​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#nightshade","content":"Nightshade is the implementation and design of NEAR’s sharded architecture. Nightshade splits the work of processing transactions and states across many participats (shards) to ensure the network can scale as it grows in users and demand. It calls State Sharding. Each shard contains its own data and can process transactions independently of the others. Practically, under State Sharding the nodes in each shard are building their own blockchain that contains transactions that affect only the local part of the global state that is assigned to that shard. Therefore, the validators in the shard only need to store their local part of the global state and only execute, and as such only relay, transactions that affect their part of the state Nightshade also introduces Dynamic Resharding which allows the network to dynamically split and merge shards based on demand and resource utilization. Picture below shows a chain shared to 10. also shows how many corrupted node is needed to corrupt a shard.  Beacon Chain is a layer-1 blockchain that coordinates the activities of the shard chains. Beacon chain do some bookkeeping computation, such as assigning validators to shards (randomness), or snapshotting shard chain blocks, that is proportional to the number of shards in the system. Since the Beacon chain is itself a single blockchain, with computation bounded by the computational capabilities of nodes operating it, the number of shards is naturally limited nodes in the blockchain perform three important tasks: not only do they 1) process transactions, they also 2) relay validated transactions and completed blocks to other nodes and 3) store the state and the history of the entire network ledge ","version":null,"tagName":"h3"},{"title":"Smart Contracts​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#smart-contracts","content":"NEAR is considered as a smart contract platform, developers can build applications that interact with each other on the NEAR blockchain. Smart contracts are pieces of executable code stored in the account's state that have their own storage, and perform transactions in the account's name. NEAR smart contract are a bit different from ethereum. If you’re familiar with Ethereum’s pricing model, you may know that, like NEAR, the protocol charges a fee (called gas) for each transaction. Unlike NEAR, Ethereum's gas fee accounts for the amount of data stored via that transaction. This essentially means that anyone can pay once to store permanent data on-chain. But how NEAR works: Let's walk through an example: You launch a guest book app, deploying your app's smart contract to the account example.nearVisitors to your app can add messages to the guest book. This means your users will, by default, pay a small gas fee to send their message to your contract.When such a call comes in, NEAR will check that example.near has a enough balance that it can stake an amount to cover the new storage needs. If it does not, the transaction will fail. btw, you can remove data to unstake some tokens​. Each NEAR account can only hold 1 smart contract. You can always re-deploy a smart contract on an account. For applications where users should be able to organize multiple contracts you can create subaccounts whose master account is the user account Smart contracts can earn fees. by default, 30% of the gas fees are paid to the smart contract owner. ","version":null,"tagName":"h3"},{"title":"Token Loss​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#token-loss","content":"Token loss is possible under multiple scenarios. These scenarios can be grouped into a few related classes: Improper key managementRefunding deleted accountsFailed function calls in batches Token loss in Refunding deleted accounts scenario is a issue on NEAR Protocol that need to be addressed. It is because of the NEAR Nightshade sharding algorithm, which generate receipts for transactions' actions. The first problem with Nightshade is that now we have Two concepts instead of one: transactions AND receipts. In NEAR, transactions are not changing the state of the shard much, but receipts are. receipts will be executed in the receiver shard. They also will be included in the next block. And now it is not easy to NOT execute the original transaction (already mined in the last block) which could prevent the token loss. now that the transaction is executed (and account is deleted) we have to execute the receipts (including the refund receipt). ","version":null,"tagName":"h3"},{"title":"Transactions​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#transactions","content":"NEAR is asynchronous by design. While it opens a wide range of possibilities for smart contracts implementations, it may also add to confusion among beginners and newcomers from other blockchain platforms. Transactions in NEAR may contain actions that do asynchronous work, in such cases keep in mind the possible outcomes of success or failure of the transaction. For example, if a transaction contains a cross-contract call, it may be marked as successful, but the other contract execution might fail. This article covers possible scenarios for this. A transaction is the smallest unit of work that can be assigned to the network. Work in this case means compute (executing a function) or storage (reading/writing data). A transaction is composed of one or more Actions. A transaction with more than one action is referred to as a batch transaction. Since transactions are the smallest units of work, they are also atomic, but again, asynchronous actions do not necessarily cascade their success or failure the whole transaction. There is also a concept of Receipt, which is either request to apply an Action or result of the Action. All cross-contract communication is done through receipts. An action may result in one or more receipts. The Blockchain may be seen as a series of Transactions, but it's also a series of Receipts. A Transaction is a collection of Actions that describe what should be done at the destination (the receiver account). Each Transaction is augmented with critical information about its: origin (cryptographically signed by signer)destination or intention (sent or applied to receiver)recency (block_hash from recent block within acceptable limits - 1 epoch)uniqueness (nonce must be unique for a given signer AccessKey) An Action is a composable unit of operation that, together with zero or more other Actions, defines a sensible Transaction. There are currently 8 supported Action types: FunctionCall to invoke a method on a contract (and optionally attach a budget for compute and storage)Transfer to move tokens from between accountsDeployContract to deploy a contractCreateAccount to make a new account (for a person, contract, refrigerator, etc.)DeleteAccount to delete an account (and transfer the balance to a beneficiary account)AddKey to add a key to an account (either FullAccess or FunctionCall access)DeleteKey to delete an existing key from an accountStake to express interest in becoming a validator at the next available opportunity A Receipt is the only actionable object in the system. Therefore, when we talk about processing a transaction on the NEAR platform, this eventually means applying receipts at some point There are several ways of creating Receipts: issuing a Transactionreturning a promise (related to cross-contract calls)issuing a refund Due to NEAR asynchronous design and Nightshade algorithm. Transactions (or receipts) are not being processed in one block. instead they create receipts which will be executed in the next block(s), and also those receipts may generate other receipt, that will be included and executed in the next block(s). This mechanism raises some problems like Token Loss that is because the deleting account action and refund or transfer token actions are not being executed in one block and therefore can not be prevented. Or a failed action (while the transaction itself was successful and other actions actually got executed) Due to NEAR asynchronous design and Nightshade algorithm. Transactions are not being processed in one block. instead they create receipts which will be executed in the next block(s), and also those receipts may generate other receipt, that will be included and executed in the next block(s). This mechanism raises some problems like Token Loss that is because the deleting account action and refund or transfer token actions are not being executed in one block and therefore can not be prevented. Or a failed action (while the transaction itself was successful and other actions actually got executed) ","version":null,"tagName":"h3"},{"title":"Economy​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#economy","content":"","version":null,"tagName":"h2"},{"title":"Smart Contracts Economy​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#smart-contracts-economy","content":"NEAR leverages token economics in a unique way that empowers both creators and developers, who for example earn 30% of the fees their contracts generate, while network participants earn rewards for validating transactions or providing storage. ","version":null,"tagName":"h3"},{"title":"Storage Economy​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#storage-economy","content":"When you deploy a smart contract to NEAR, you pay for the storage that this contract requires using a mechanism called storage staking. In storage staking (sometimes called state staking), the account that owns a smart contract must stake (or lock) tokens according to the amount of data stored in that smart contract, effectively reducing the balance of the contract's account.Indexing node will keep all data forever, but validating nodes (that is, the nodes run by most validators in the network) do not. Smart contracts can provide ways to delete data, and this data will be purged from most nodes in the network within a few epochs. ","version":null,"tagName":"h3"},{"title":"Validators​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#validators","content":"Validator selection is done via an auction mechanism. To become a validator, the node must send a signed transaction which contains information about the amount they want to stake and a new public key that blocks will be signed with. ","version":null,"tagName":"h3"},{"title":"Security​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#security","content":"","version":null,"tagName":"h2"},{"title":"Blockchain Operating System (BOS)​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#blockchain-operating-system-bos","content":"BOS is a decentralized platfrom that aims to make it easier for developers to build and deploy decentralized applications (dApps). It is built on top of the NEAR Protocol. BOS provides a number of features that make it a powerful platform for dApp development, including: A simple and easy-to-use development environmentA wide range of tools and libraries for building dAppsA decentralized governance system that allows the community to shape the future of BOSA commitment to security and scalability ","version":null,"tagName":"h2"},{"title":"Summary​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#summary","content":"Near Blockchain like many other blockchain has it is own cons and pros. here is a summary of these cons and pros. ","version":null,"tagName":"h2"},{"title":"Pros​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#pros","content":"Account NamesHaving Storage Space By Staking ","version":null,"tagName":"h3"},{"title":"Cons​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#cons","content":"Complex DesignAsynchronous DesginToken Loss ","version":null,"tagName":"h3"},{"title":"My NEAR Account ID​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#my-near-account-id","content":"mlibre.near ","version":null,"tagName":"h2"},{"title":"Resources​","type":1,"pageTitle":"NEAR","url":"/Wisdom-Hub/blockchain/NEAR/#resources","content":"NEAR Website: https://www.near.orgNEAR Docs: https://docs.near.org/NEAR Learn: https://pages.near.org/learn/NEAR Learn More: https://pages.near.org/learn/learn-more/NEAR pages: https://pages.near.org/NEAR whitepaper https://near.org/papers/whitepaper/NEAR Whitepaper, Ebook Version https://near.org/whitepaperNEAR YouTube: https://www.youtube.com/@NEARProtocolNEAR Spec, Nomicon: https://nomicon.io/NEAR Medium: https://medium.com/nearprotocol/NEAR Examples: https://github.com/near-examplesNEAR NEPs: https://github.com/near/NEPsNEAR Indexers: https://near-indexers.io/docs/introDoomslug: https://near.org/blog/doomslug-comparison/Blockchain Acceleration Foundation: https://www.youtube.com/playlist?list=PL0cPWYDSqQ29yI57TUbKwqU8KbYv4MEX5Learnnear club: https://learnnear.club/Figment: https://learn.figment.io/protocols/near ","version":null,"tagName":"h2"},{"title":"LBRY","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/LBRY/","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#table-of-content","content":"introductionLBRY daemonInstallationcommandsConcepts StakesClaims Claim Operations SupportsMetadataClaimtrieURLChannelsData Network DiscoveryCommunication JSON-RPCGetting a content infoAdding new contentTipping something ReferencesMy LBC Wallet Address ","version":null,"tagName":"h2"},{"title":"introduction​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#introduction","content":"LBRY (pronounced &quot;library&quot;) is a decentralized, open-source digital content platform that allows users to share, publish, and monetize their digital content without relying on centralized authorities. It is built on top of the LBRY blockchain, which is designed specifically for the distribution of digital content like videos, images, and documents. The LBRY network utilizes blockchain technology, similar to Bitcoin, to store an index of available content and how to download it, as well as financial transactions using the LBRY Credits (LBC) cryptocurrency. When a creator publishes content on LBRY, an entry is made on the LBRY blockchain, which serves as an announcement that the content is available for download from the peer-to-peer network ","version":null,"tagName":"h2"},{"title":"LBRY daemon​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#lbry-daemon","content":"You can run the daemon either by installing the lbry-daemon and running it from a command line. or installing and running the LBRY app. APPhttps://lbry.com/getSDKhttps://github.com/lbryio/lbry-sdk/releases  ","version":null,"tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#installation","content":"pamac install lbrynet-bin  ","version":null,"tagName":"h3"},{"title":"commands​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#commands","content":"lbrynet start lbrynet commands lbrynet wallet --help  ","version":null,"tagName":"h3"},{"title":"Concepts​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#concepts","content":"https://lbry.tech/overviewhttps://lbry.tech/spechttps://lbry.tech/resources/setup-videoshttps://lbry.tech/glossaryhttps://lbry.tech/api/sdk ","version":null,"tagName":"h2"},{"title":"Stakes​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#stakes","content":"A stake is a a single entry in the blockchain that commits credits toward a name. The two types of stakes are claims and supports. All stakes have these properties: id: A 20-byte hash, unique among all stakes. See Stake Identifier Generationamount: A quantity of tokens used to back the stake ","version":null,"tagName":"h3"},{"title":"Claims​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#claims","content":"A claim is a stake that stores metadata. There are two types of claims. Stream claims declare the availability, access method, and publisher of a stream. Channel claims create a pseudonym that can be used as the publisher of stream claims. { &quot;claimID&quot;: &quot;6e56325c5351ceda2dd0795a30e864492910ccbf&quot;, &quot;amount&quot;: 1.0, &quot;name&quot;: &quot;lbry&quot;, &quot;value&quot;: { &quot;stream&quot;: { &quot;title&quot;: &quot;What is LBRY?&quot;, &quot;author&quot;: &quot;Samuel Bryan&quot;, &quot;description&quot;: &quot;What is LBRY? An introduction with Alex Tabarrok&quot;, &quot;language&quot;: &quot;en&quot;, &quot;license&quot;: &quot;Public Domain&quot;, &quot;thumbnail&quot;: &quot;https://s3.amazonaws.com/files.lbry.io/logo.png&quot;, &quot;mediaType&quot;: &quot;video/mp4&quot;, &quot;streamHash&quot;: &quot;232068af6d51325c4821ac897d13d7837265812164021ec832cb7f18b9caf6c77c23016b31bac9747e7d5d9be7f4b752&quot;, }, }, &quot;meta&quot;: { &quot;support_amount&quot;: &quot;4900.021&quot;, } }  Claim Operations​ There are three claim operations: create, update, and abandon. create: Makes a new claim.update: Changes the value, amount, or channel of an existing claim. Does not change the claim's ID.abandon: Withdraws a claim, freeing the associated credits to be used for other purposes. ","version":null,"tagName":"h3"},{"title":"Supports​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#supports","content":"A support is a stake that lends its amount to bolster an existing claim. Supports have one extra property in addition to the stake properties: claimID: The ID of the claim that this support is bolstering. Here is an example support for the above claim: { &quot;supportID&quot;: &quot;fbcc019294468e03a5970dd2adec1535c52365e6&quot;, &quot;amount&quot;: 45.12, &quot;claimID&quot;: &quot;6e56325c5351ceda2dd0795a30e864492910ccbf&quot;, }  ","version":null,"tagName":"h3"},{"title":"Metadata​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#metadata","content":"{ &quot;stream&quot;: { &quot;title&quot;: &quot;What is LBRY?&quot;, &quot;author&quot;: &quot;Samuel Bryan&quot;, &quot;description&quot;: &quot;What is LBRY? An introduction with Alex Tabarrok&quot;, &quot;language&quot;: &quot;en&quot;, &quot;license&quot;: &quot;Public Domain&quot;, &quot;thumbnail&quot;: &quot;https://s3.amazonaws.com/files.lbry.io/logo.png&quot;, &quot;mediaType&quot;: &quot;video/mp4&quot;, &quot;streamHash&quot;: &quot;232068af6d51325c4821ac897d13d7837265812164021ec832cb7f18b9caf6c77c23016b31bac9747e7d5d9be7f4b752&quot; } }  ","version":null,"tagName":"h3"},{"title":"Claimtrie​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#claimtrie","content":"A claimtrie is a data structure used to store the set of all claims and prove the correctness of URL resolution. The claimtrie is implemented as a Merkle tree that maps names to claims. Claims are stored as leaf nodes in the tree. Names are stored as the normalized path from the root node to the leaf node. The root hash is the hash of the root node. It is stored in the header of each block in the blockchain. Nodes use the root hash to efficiently and securely validate the state of the claimtrie. Multiple claims can exist for the same name. They are all stored in the leaf node for that name. See Claim Ordering ","version":null,"tagName":"h3"},{"title":"URL​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#url","content":"URLs are memorable references to claims. All URLs: contain a name (see Claim Properties), andresolve to a single, specific claim for that name The ultimate purpose of much of the claim and blockchain design is to provide memorable URLs that can be provably resolved by clients without a full copy of the blockchain (e.g. Simplified Payment Verification wallets). Components A URL is a name with one or more modifiers. A bare name on its own resolves to the controlling claim at the latest block height. Here are some common URL structures. Stream Claim Name A controlling stream claim. lbry://meet-lbry Channel Claim Name A controlling channel claim. lbry://@lbry Channel Claim Name and Stream Claim Name A URL containing both a channel and a stream claim name. URLs containing both are resolved in two steps. First, the channel is resolved to its associated claim. Then the stream claim name is resolved to get the appropriate claim from among the claims in the channel. lbry://@lbry/meet-lbry Claim ID A claim for this name with this claim ID. Partial prefix matches are allowed (see URL Resolution). lbry://meet-lbry:7a0aa95c5023c21c098 lbry://meet-lbry:7a lbry://@lbry:3f/meet-lbry Note: in a previous version of this spec, the ## character was used to signify the claim ID portion of the url. This character is now deprecated and will stop being supported in the future. Sequence The n_th accepted claim for this name. _n must be a positive number. This can be used to reference claims in the order in which they were made, rather than by the amount of credits backing a claim. lbry://meet-lbry1 lbry://@lbry1/meet-lbry ","version":null,"tagName":"h3"},{"title":"Channels​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#channels","content":"Channels are the unit of identity. A channel is a claim for a name beginning with @ that contains a metadata structure for identity rather than content. Included in the metadata is the channel’s public key. Here’s an example: &quot;claimID&quot;: &quot;6e56325c5351ceda2dd0795a30e864492910ccbf&quot;, &quot;name&quot;: &quot;@lbry&quot;, &quot;amount&quot;: 6.26, &quot;value&quot;: { &quot;channel&quot;: { &quot;keyType&quot;: &quot;SECP256k1&quot;, &quot;publicKey&quot;: &quot;3056301006072a8648ce3d020106052b8104000a03420004180488ffcb3d1825af538b0b952f0eba6933faa6d8229609ac0aeadfdbcf49C59363aa5d77ff2b7ff06cddc07116b335a4a0849b1b524a4a69d908d69f1bcebb&quot; } }  Claims published to a channel contain a signature made with the corresponding private key. A valid signature proves channel membership. The purpose of channels is to allow content to be clustered under a single pseudonym or identity. This allows publishers to easily list all their content, maintain attribution, and build their brand. ","version":null,"tagName":"h3"},{"title":"Data​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#data","content":"Files published using LBRY are stored in a distributed fashion by the clients participating in the network. Each file is split into many small pieces. Each piece is encrypted and announced to the network. The pieces may also be uploaded to other hosts on the network that specialize in rehosting content. The purpose of this process is to enable file storage and access without relying on centralized infrastructure, and to create a marketplace for data that allows hosts to be paid for their services. ","version":null,"tagName":"h3"},{"title":"Network Discovery​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#network-discovery","content":"The only problem is that the initial connection requires a DNSFeed. To retrieve a list of bitcoin nodes' IPs. IPV4 is also kinda centralized itself. Assigning, limited amounts, and ... These problems probably can be solved by IPV6 and some sort of new network protocol where every network card/program can broadcast their IPV6 to any connected neighbor. and retrieve the IPV6 blockchain-based table. the IPV6 table should be in blockchain so it can't be manipulated by governments, ISPs, or the neighbor card itself. (removing, changing an IP cause to rebuild the whole blockchain every time an IP is added to the blockchain, also every single IPV6 that you have got from the neighbor card, has to have the same manipulated table, same as 51% bitcoin attack) Network discovery in bitcoin, ETH:https://medium.com/harmony-one/peer-discovery-in-harmony-network-6a07f9401c61 ","version":null,"tagName":"h2"},{"title":"Communication​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#communication","content":"LBRY daemon is the central point of communication between clients and the network. ","version":null,"tagName":"h2"},{"title":"JSON-RPC​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#json-rpc","content":"RPC: is not a network protocol like http. things like REST that defines how to interact with a server. and just like REST works over http or ... JOSN-RPC: RPC that uses json as the data schema. https://medium.com/@ConsenSys/blockchain-underpinnings-2c43ba03ecc9 ","version":null,"tagName":"h3"},{"title":"Getting a content info​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#getting-a-content-info","content":"curl --header &quot;Content-Type: application/json&quot; --data '{ &quot;method&quot;: &quot;resolve&quot;, &quot;params&quot;: { &quot;urls&quot;: &quot;@mlibre:e/raspberry-pi-mining-guide:6&quot; }}' http://localhost:5279 { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: { &quot;@mlibre:e/raspberry-pi-mining-guide:6&quot;: { &quot;address&quot;: &quot;bSvwdAMw9bokK4e1ZeaMFZc8HnjY217eFU&quot;, &quot;amount&quot;: &quot;5.0&quot;, &quot;canonical_url&quot;: &quot;lbry://@mlibre#e/raspberry-pi-mining-guide#6&quot;, &quot;claim_id&quot;: &quot;6faebe6745e0e4d42b44100cfcd11f86cd17cb52&quot;, &quot;meta&quot;: { &quot;effective_amount&quot;: &quot;811.5&quot;, &quot;reposted&quot;: 0, &quot;support_amount&quot;: &quot;806.5&quot;, . . . &quot;permanent_url&quot;: &quot;lbry://raspberry-pi-mining-guide#6faebe6745e0e4d42b44100cfcd11f86cd17cb52&quot;, &quot;short_url&quot;: &quot;lbry://raspberry-pi-mining-guide#6&quot;, &quot;signing_channel&quot;: { &quot;address&quot;: &quot;bRgZm5DdqoRiEH6JsYVnJSWkoynzvTkfH4&quot;, &quot;amount&quot;: &quot;0.005&quot;, &quot;canonical_url&quot;: &quot;lbry://@mlibre#e&quot;, &quot;claim_id&quot;: &quot;e2b347558eec20aee84bf4657efa3832bb5a4ab9&quot;, . . . &quot;txid&quot;: &quot;e686fe8317b416c474f1f4985c0138746e07987500ac694de8b9bd19eda20072&quot;, &quot;type&quot;: &quot;claim&quot;, &quot;value&quot;: { &quot;languages&quot;: [ &quot;en&quot; ], &quot;license&quot;: &quot;Public Domain&quot;, &quot;release_time&quot;: &quot;1617295323&quot;, &quot;source&quot;: { &quot;hash&quot;: &quot;a6ff0d82557ecc5e16fb75d0ea8e0f010b93dfee43ddf0d820543967ed126d83596380babaf255519f1f0a677793acdc&quot;, &quot;media_type&quot;: &quot;text/markdown&quot;, &quot;name&quot;: &quot;post.md&quot;, &quot;sd_hash&quot;: &quot;38ce95698f7eea4306071c865b4af81bc76bdc8664055560b020c667d815eaa11a83eecc1e72632fee4a8b4e5693c90a&quot;, &quot;size&quot;: &quot;9938&quot; }, &quot;stream_type&quot;: &quot;document&quot;, &quot;tags&quot;: [ &quot;blockchain&quot;, &quot;mining&quot;, &quot;monero&quot;, &quot;raspberry pi&quot;, &quot;xmr&quot; ], &quot;thumbnail&quot;: { &quot;url&quot;: &quot;https://spee.ch/a/2eef8b272d343bbf.jpg&quot; }, &quot;title&quot;: &quot;Ultimate Guide For Monero Mining with Raspberry Pi&quot; }, &quot;value_type&quot;: &quot;stream&quot; } }  ","version":null,"tagName":"h3"},{"title":"Adding new content​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#adding-new-content","content":"curl --header &quot;Content-Type: application/json&quot; --data '{ &quot;method&quot;: &quot;publish&quot;, &quot;params&quot;: { &quot;name&quot;: &quot;test&quot;, &quot;file_path&quot;: &quot;/home/mlibre/Downloads/tree.jpg&quot;, &quot;bid&quot;: &quot;0.001&quot;, &quot;metadata&quot;: { &quot;description&quot;: &quot;Check out this test&quot;, &quot;title&quot;: &quot;test&quot;, &quot;languages&quot;: &quot;en&quot;, &quot;license&quot;: &quot;Public Domain&quot;, &quot;tags&quot;: [] }}}' http://localhost:5279 curl --header &quot;Content-Type: application/json&quot; --data '{&quot;method&quot;:&quot;publish&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;flower&quot;,&quot;title&quot;:&quot;Flora, Bloom&quot;,&quot;description&quot;:&quot;Flora, Bloom, Flower&quot;,&quot;locations&quot;:[],&quot;bid&quot;:&quot;0.00100000&quot;,&quot;languages&quot;:[&quot;en&quot;],&quot;tags&quot;:[&quot;flower&quot;,&quot;bloom&quot;,&quot;flora&quot;,&quot;nature&quot;],&quot;thumbnail_url&quot;:&quot;https://spee.ch/2/06afc05c4adeca74.jpg&quot;,&quot;blocking&quot;:true,&quot;preview&quot;:false,&quot;license&quot;:&quot;Public Domain&quot;,&quot;release_time&quot;:1617809791,&quot;channel_id&quot;:&quot;61514a4f83bb8671f6fcdb70fcf81fb3ce31e1dc&quot;,&quot;file_path&quot;:&quot;/home/mlibre/Downloads/tree.jpg&quot;}' http://localhost:5279  ","version":null,"tagName":"h3"},{"title":"Tipping something​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#tipping-something","content":"curl --header &quot;Content-Type: application/json&quot; --data '{ &quot;method&quot;: &quot;support_create&quot;, &quot;params&quot;: { &quot;amount&quot;: &quot;0.001&quot;, &quot;claim_id&quot;: &quot;@mlibre#e2b347558eec20aee84bf4657efa3832bb5a4ab9&quot;, &quot;--tip&quot; }}' http://localhost:5279  ","version":null,"tagName":"h3"},{"title":"References​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#references","content":"https://lbry.tech/spec ","version":null,"tagName":"h2"},{"title":"My LBC Wallet Address​","type":1,"pageTitle":"LBRY","url":"/Wisdom-Hub/blockchain/LBRY/#my-lbc-wallet-address","content":"bSbZzpNRSn6cPpc6nua6S9cCSckH4W72PD ","version":null,"tagName":"h2"},{"title":"NEAR SDKs","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/NEAR/SDK","content":"","keywords":"","version":null},{"title":"Deploy a sample DApp​","type":1,"pageTitle":"NEAR SDKs","url":"/Wisdom-Hub/blockchain/NEAR/SDK#deploy-a-sample-dapp","content":"npx create-near-app DEX # npx create-near-app DEX --frontend=react --contract=rust cd DEX yarn yarn dev  ","version":null,"tagName":"h2"},{"title":"NEAR CLI","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/NEAR/CLI","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#table-of-content","content":"NEAR CLI Table of contentInstallationAccounts StateKeysNamed Account Smart Contracts Wallet ","version":null,"tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#installation","content":"sudo npm install -g near-cli # Get the current version of `NEAR` near --version  ","version":null,"tagName":"h2"},{"title":"Transactions​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#transactions","content":"Let dig this transaction near tx-status mlibre.testnet:v3eawe5UJmMBvNQe2rgoKEuS92HfXMtM5BLLRcBix39  The output is: { status: { SuccessValue: '' }, transaction: { actions: [ 'CreateAccount', { Transfer: { deposit: '100000000000000000000000000' } }, { AddKey: { access_key: { nonce: 0, permission: 'FullAccess' }, public_key: 'ed25519:8C69kVzUfrVL9Lv4jeQkM7th2zhpstGxn8yFmKRk1QmS' } } ], hash: 'v3eawe5UJmMBvNQe2rgoKEuS92HfXMtM5BLLRcBix39', nonce: 129288971000001, public_key: 'ed25519:6rCWntAc1qVDrnA95MwphWduqnzULbcR3CiBGQhzS9s7', receiver_id: 'salamslamslamsalmslsamlasmlsmsalamslam', signature: 'ed25519:4bLvSkYMn2uEQQLGfrkvY3V5YL4HfBv8fUpP94wR14TMxkAF5j2q7dBTYm9GzX973rX2nCP1sXgHRVW6Psz4YQCh', signer_id: 'mlibre.testnet' }, transaction_outcome: { block_hash: 'oXRtxuibGRNXAVVcGwYRjcmXcvhGEKzgkQiiEPiQTby', id: 'v3eawe5UJmMBvNQe2rgoKEuS92HfXMtM5BLLRcBix39', outcome: { executor_id: 'mlibre.testnet', gas_burnt: 4174947687500, logs: [], metadata: { gas_profile: null, version: 1 }, receipt_ids: [ 'HwQXncGsoE9PHcFgUUvYbM1ZVnpkgdj7gG9kH8A8HBLS' ], status: { SuccessReceiptId: 'HwQXncGsoE9PHcFgUUvYbM1ZVnpkgdj7gG9kH8A8HBLS' }, tokens_burnt: '417494768750000000000' }, proof: [ { direction: 'Right', hash: 'B7J2nAGp5ies9kYmQ63RcJwybJevqZsEsNPzKyZ4NfVE' }, { direction: 'Right', hash: 'Ee4sGA83vAzTQhkx3vybEA883gR2iNMnkRY4J6hv3nho' }, { direction: 'Right', hash: 'HVYx7kbGPoHsvKvpHMMTT6QYYyBZKE6T8xAtrFr2NFxY' } ] }, receipts_outcome: [ { block_hash: '96w8NkjiWmYU6iHuEvcrDfWEHiqmNiiWCAhWAYNMhz4M', id: 'HwQXncGsoE9PHcFgUUvYbM1ZVnpkgdj7gG9kH8A8HBLS', outcome: { executor_id: 'salamslamslamsalmslsamlasmlsmsalamslam', // executor_id is Receiver ID // Predecessor ID is not mentioned in the output. it is the signer_id in transaction object gas_burnt: 4174947687500, logs: [], metadata: { gas_profile: [], version: 3 }, receipt_ids: [ 'EXNe4EKTFSm75TrGnvtUhMTqxsoUPDPYw7jEoDi3LweL' ], // the receipts created by this receipt // in this example it is the refund receipt which is always is there and is the last receipt status: { SuccessValue: '' }, tokens_burnt: '417494768750000000000' }, proof: [ { direction: 'Right', hash: 'Dsnj6at4baCf2ztbHmaecMY6xH41YXjAVf1dFAioV185' }, { direction: 'Left', hash: '8vYcbcJWApM8MvAoBVrjrp3KGhYBiZMccmUNuBnT9G9' }, { direction: 'Right', hash: '4U5cjwU49zwi5owZRUyyCdCnosGZh86Je5GWfpQUNQa4' } ] }, { // it is the refund receipt which is always is there and is the last receipt block_hash: 'BXkhJFVsWcDgaFznMTwk674WvzokS62pfPL879EbrmAN', id: 'EXNe4EKTFSm75TrGnvtUhMTqxsoUPDPYw7jEoDi3LweL', outcome: { executor_id: 'mlibre.testnet', // // executor_id is Receiver ID // Predecessor ID for the refund receipt is system itself gas_burnt: 223182562500, // This contains the gas &quot;burnt&quot; for refund receipts. Even though we don't actually // charge any gas for refund receipts, we still count the gas use towards the block gas // https://github.com/near/nearcore/pull/4405/files logs: [], metadata: { gas_profile: [], version: 3 }, receipt_ids: [], status: { SuccessValue: '' }, tokens_burnt: '0' }, proof: [ { direction: 'Right', hash: '97J5UUmsVCKeThLf2RxQ4ZkjySdNvVzaUsRrh1YJQZEn' }, { direction: 'Left', hash: '5HqirRFCGCpNF3A8bE9v9xLX8ZzaByPsiGPdoWraEZPU' }, { direction: 'Right', hash: 'HU97NYSfmXZftzDakJmcYc9xy4ZS2m8LWpmPSuG9asZ9' } ] } ] }  ","version":null,"tagName":"h2"},{"title":"Accounts​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#accounts","content":"","version":null,"tagName":"h2"},{"title":"State​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#state","content":"near state mlibre.testnet # Account State near view-state mlibre.testnet --finality final --utf8 true # Contract State  ","version":null,"tagName":"h3"},{"title":"Keys​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#keys","content":"When you use the command near login in the NEAR blockchain, you are essentially creating a new access key for your NEAR account. When you use the near login command, it asks the full-access key in the NEAR Wallet to use the AddKey Action to create another full-access key locally on your computer. NEAR CLI uses that new key to deploy, make function calls, etc # export NEAR_ENV=&lt;network&gt; (use guildnet / testnet / mainnet) near login # Download, Import and Store your testnet account's access keys locally NEAR_ENV=mainnet near login # Import mainnet accounts ls -R ~/.near-credentials # Keys Folder near keys mlibre.testnet # Show all the keys for a given account near state mlibre.near --nodeUrl https://rpc.mainnet.near.org # Account information on mainnet near state mlibre.testnet # Account information on testnet  ","version":null,"tagName":"h3"},{"title":"Named Account​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#named-account","content":"near create-account salamslamslamsalmslsamlasmlsmsalamslam --masterAccount mlibre.testnet  ","version":null,"tagName":"h3"},{"title":"Smart Contracts​","type":1,"pageTitle":"NEAR CLI","url":"/Wisdom-Hub/blockchain/NEAR/CLI#smart-contracts","content":"near deploy # Deploys a smart contract with default options and a testnet account on the testnet chain, unless `--accountId`, `NEAR_ENV` or `--nodeUrl` is provided near deploy --nodeUrl &quot;https://rpc.testnet.near.org&quot; --seedPhrase &quot;radar hammer reopen black suspect olympic mountain imitate slogan lend science advice&quot; --accountId mlibre.testnet --wasmFile ./out/main.wasm  Wallet In NEAR accounts are string, like mlibre.near. Each account can have multiple keys-pair. If you use near login, near will will save your key-pair from the wallet locally. you can find them here: cat .near-credentials/mainnet/mlibre.near.json  You can query an account's keys by running: near keys mlibre.near --nodeUrl https://rpc.mainnet.near.org  You can create wallet in mainnet and testnet here: Testnet:https://wallet.testnet.near.org/ Mainnet:https://wallet.near.org/ ","version":null,"tagName":"h2"},{"title":"Fungible Token (FT)","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/","content":"","keywords":"","version":null},{"title":"Building​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#building","content":"To build run: ./build.sh  Using this contract ","version":null,"tagName":"h2"},{"title":"Quickest deploy​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#quickest-deploy","content":"You can build and deploy this smart contract to a development account. Dev Accounts are auto-generated accounts to assist in developing and testing smart contracts. Please see the Standard deploy section for creating a more personalized account to deploy to. near dev-deploy --wasmFile res/fungible_token.wasm --helperUrl https://near-contract-helper.onrender.com  Behind the scenes, this is creating an account and deploying a contract to it. On the console, notice a message like: Done deploying to dev-1234567890123 In this instance, the account is dev-1234567890123. A file has been created containing a key pair to the account, located at neardev/dev-account. To make the next few steps easier, we're going to set an environment variable containing this development account id and use that when copy/pasting commands. Run this command to the environment variable: source neardev/dev-account.env  You can tell if the environment variable is set correctly if your command line prints the account name after this command: echo $CONTRACT_NAME  The next command will initialize the contract using the new method: near call $CONTRACT_NAME new '{&quot;owner_id&quot;: &quot;'$CONTRACT_NAME'&quot;, &quot;total_supply&quot;: &quot;1000000000000000&quot;, &quot;metadata&quot;: { &quot;spec&quot;: &quot;ft-1.0.0&quot;, &quot;name&quot;: &quot;Example Token Name&quot;, &quot;symbol&quot;: &quot;EXLT&quot;, &quot;decimals&quot;: 8 }}' --accountId $CONTRACT_NAME  To get the fungible token metadata: near view $CONTRACT_NAME ft_metadata  ","version":null,"tagName":"h3"},{"title":"Standard deploy​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#standard-deploy","content":"This smart contract will get deployed to your NEAR account. For this example, please create a new NEAR account. Because NEAR allows the ability to upgrade contracts on the same account, initialization functions must be cleared. If you'd like to run this example on a NEAR account that has had prior contracts deployed, please use the near-cli command near delete, and then recreate it in Wallet. To create (or recreate) an account, please follow the directions on NEAR Wallet. Switch to mainnet. You can skip this step to use testnet as a default network. export NEAR_ENV=mainnet  In the project root, log in to your newly created account with near-cli by following the instructions after this command: near login  To make this tutorial easier to copy/paste, we're going to set an environment variable for your account id. In the below command, replace MY_ACCOUNT_NAME with the account name you just logged in with, including the .near: ID=MY_ACCOUNT_NAME  You can tell if the environment variable is set correctly if your command line prints the account name after this command: echo $ID  Now we can deploy the compiled contract in this example to your account: near deploy --wasmFile res/fungible_token.wasm --accountId $ID  FT contract should be initialized before usage. You can read more about metadata at 'nomicon.io'. Modify the parameters and create a token: near call $ID new '{&quot;owner_id&quot;: &quot;'$ID'&quot;, &quot;total_supply&quot;: &quot;1000000000000000&quot;, &quot;metadata&quot;: { &quot;spec&quot;: &quot;ft-1.0.0&quot;, &quot;name&quot;: &quot;Example Token Name&quot;, &quot;symbol&quot;: &quot;EXLT&quot;, &quot;decimals&quot;: 8 }}' --accountId $ID  Get metadata: near view $ID ft_metadata  ","version":null,"tagName":"h3"},{"title":"Transfer Example​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#transfer-example","content":"Let's set up an account to transfer some tokens to. These account will be a sub-account of the NEAR account you logged in with. near create-account bob.$ID --masterAccount $ID --initialBalance 1  Add storage deposit for Bob's account: near call $ID storage_deposit '' --accountId bob.$ID --amount 0.00125  Check balance of Bob's account, it should be 0 for now: near view $ID ft_balance_of '{&quot;account_id&quot;: &quot;'bob.$ID'&quot;}'  Transfer tokens to Bob from the contract that minted these fungible tokens, exactly 1 yoctoNEAR of deposit should be attached: near call $ID ft_transfer '{&quot;receiver_id&quot;: &quot;'bob.$ID'&quot;, &quot;amount&quot;: &quot;19&quot;}' --accountId $ID --amount 0.000000000000000000000001  Check the balance of Bob again with the command from before and it will now return 19. ","version":null,"tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#testing","content":"As with many Rust libraries and contracts, there are tests in the main fungible token implementation at ft/src/lib.rs. Additionally, this project has simulation tests in tests/sim. Simulation tests allow testing cross-contract calls, which is crucial to ensuring that the ft_transfer_call function works properly. These simulation tests are the reason this project has the file structure it does. Note that the root project has a Cargo.toml which sets it up as a workspace. ft and test-contract-defi are both small &amp; focused contract projects, the latter only existing for simulation tests. The root project imports near-sdk-sim and tests interaction between these contracts. You can run all these tests with one command: cargo test  If you want to run only simulation tests, you can use cargo test simulate, since all the simulation tests include &quot;simulate&quot; in their names. ","version":null,"tagName":"h2"},{"title":"Notes​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#notes","content":"The maximum balance value is limited by U128 (2**128 - 1).JSON calls should pass U128 as a base-10 string. E.g. &quot;100&quot;.This does not include escrow functionality, as ft_transfer_call provides a superior approach. An escrow system can, of course, be added as a separate contract or additional functionality within this contract. ","version":null,"tagName":"h2"},{"title":"No AssemblyScript?​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#no-assemblyscript","content":"near-contract-standards is currently Rust-only. We strongly suggest using this library to create your own Fungible Token contract to ensure it works as expected. Someday NEAR core or community contributors may provide a similar library for AssemblyScript, at which point this example will be updated to include both a Rust and AssemblyScript version. ","version":null,"tagName":"h2"},{"title":"Contributing​","type":1,"pageTitle":"Fungible Token (FT)","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/MLB1-contract/#contributing","content":"When making changes to the files in ft or test-contract-defi, remember to use ./build.sh to compile all contracts and copy the output to the res folder. If you forget this, the simulation tests will not use the latest versions. Note that if the rust-toolchain file in this repository changes, please make sure to update the .gitpod.Dockerfile to explicitly specify using that as default as well. ","version":null,"tagName":"h2"},{"title":"Polygon","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Polygon/","content":"","keywords":"","version":null},{"title":"Table Of Contents​","type":1,"pageTitle":"Polygon","url":"/Wisdom-Hub/blockchain/Polygon/#table-of-contents","content":"How to write Smart Contracts on PolygonHow to transfer ERC-20 tokens to the Polygon chainHow to transfer ERC-721 tokens to the Polygon chainHow to transfer ERC-1155 tokens to the Polygon chainReferences ","version":null,"tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Polygon","url":"/Wisdom-Hub/blockchain/Polygon/#references","content":"https://polygon.technology/ ","version":null,"tagName":"h2"},{"title":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge","content":"","keywords":"","version":null},{"title":"Goerli​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#goerli","content":"The Goerli testnet is pre-configured in Metamask's list of available networks. You can select it from the dropdown list at the top of the Metamask interface. You can fund your account with testnet Ether from the Goerli Authenticated faucet as long as you are willing to make a post on a valid Twitter or Facebook account. If this is not something you wish to do, there is an alternative faucet at goerli-faucet.slock.it ","version":null,"tagName":"h2"},{"title":"Mumbai​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#mumbai","content":"You can either open mumbai.polygonscan.com and click on &quot;Add Mumbai Network&quot; in the footer at the bottom of the page or add it manually using the following information: Network Name: Polygon Mumbai testnetRPC URL: https://rpc-mumbai.maticvigil.com/Chain ID: 80001Currency Symbol: MATICBlock Explorer URL: https://mumbai.polygonscan.com/  You can fund your Mumbai account with MATIC here MLBs ERC-1155 Contract ERC-1155 is a token standard where you can have multiple fungible and non-fungible tokens in one smart contract. MLBs is the contract we have already deployed on the Goerli testnet. An standdard OpenZeppelin ERC-1155. This contract contains two tokens only: MLBFun which is a fungible token with id 0MLBNFun which is a non-fungible token with id 1 We'll map this contract and transfer some tokens. You can find a step-by-step guide to creating an ERC-1155 token here Contract info: Name: MLBs Tokens: MLBFun, MLBNFun Owner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C Contract Address: 0x11C47A4F19cc52923b9C495080ADB441ADe38883 Goerli etherscan: https://goerli.etherscan.io/address/0x11C47A4F19cc52923b9C495080ADB441ADe38883  Gather this information for the contract you intend to map. Wallet Balance using Web3js ERC-1155 contracts have a balanceOf function. It takes two arguments: Wallet Address: The address, for example, the contract owner (0xD8f24D419153E5D03d614C5155f900f4B5C8A65C)TokenID: The token ID. For example, 0 refers to the MLBFun token in our ERC-1155 contract  If you have already configured a provider and the truffle-hdwallet-provider, you can use this function to check your ERC-1155 tokens. async function getTokenBalance(web3, address, contractABI, contractAddress) { let contractInstance = new web3.eth.Contract(contractABI, contractAddress); let result = await contractInstance.methods.balanceOf(address, 0).call() // 0 is a tokenID console.log(`TokenID ${0}:` , result); result = await contractInstance.methods.balanceOf(address, 1).call() // 1 is a tokenID console.log(`TokenID ${1}:` , result); }  The balanceOf output for our contract in Goerli would be like: TokenID 0: 7000000000000000000 TokenID 1: 1  And for Mumbai: TokenID 0: 0 TokenID 1: 0  The full source code is: const Web3 = require(&quot;web3&quot;); const HDWalletProvider = require(&quot;@truffle/hdwallet-provider&quot;) const secrets = require('./secrets.json') let address = &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;; // The address to check balance of let contractAddressInMumbai = &quot;0x7242B6E18F85DB7b2A19d027e0b81Dcf6637C68b&quot;; // Mumbai Contract Address let contractABIMumbai = [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;MLBF.......&quot;}]}] let contractAddressGoerli = &quot;0x11C47A4F19cc52923b9C495080ADB441ADe38883&quot;; // Goerli Contract Address let contractABIGoerli = [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;MLBF.......&quot;}]}] const provider = new HDWalletProvider(secrets.privateKey, secrets.mumbai); // mumbai Provider // const provider = new HDWalletProvider(secrets.privateKey, secrets.localGeth); // Goerli Provider const web3 = new Web3(provider); (async () =&gt; { try { await getBalance() } catch (e) { console.log(e) } })() async function getBalance() { let contractInstance = new web3.eth.Contract(contractABIMumbai, contractAddressInMumbai); let result = await contractInstance.methods.balanceOf(address, 0).call() console.log(`TokenID ${0}:` , result); result = await contractInstance.methods.balanceOf(address, 1).call() console.log(`TokenID ${1}:` , result); }  secrets.json: contains Seed, privateKey of the address (0xd8f2). And Mumbai API URL. ex: { &quot;privateKey&quot;: &quot;This should be the private key of an account specifically made for use on the Goerli testnet&quot;, &quot;seed&quot;: &quot;This should be a Secret Recovery Phrase from Metamask and ONLY used on Ethereum testnets&quot;, &quot;mumbai&quot;: &quot;https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/&quot;, &quot;localGeth&quot;: &quot;http://127.0.0.1:8545&quot; }  Mapping Now that everything is ready. Let's map our MLBs contract. Go to mapper.matic.today and complete the form Make sure the token you want to map has had its contract verified on Etherscan Choose Gorli Testnet -&gt; Mumbai testnet At this time the mapping process is not immediate. It can take up to 3 days to be confirmed. Then open mapper.matic.today, and enter the contract address to see if it has been added.  As you may notice, the contract address in Goerli and Mumbai is not the same. Let's remember to add it to Metamask so it shows up when we are connected to Mumbai as well. Open MetamaskSelect the Mumbai testnet from the list of available networksAdd TokenPaste the contract address there (0x7242B6E18F85DB7b2A19d027e0b81Dcf6637C68b) We don't yet have any tokens in Mumbai. We can transfer some across the bridge and check our balance again afterward. Transfer using SDK Let's take a look at the workflow for transferring tokens with the SDK: Approve: The owner of the token has to approve the Ethereum Predicate Contract which will lock the amount of token they want to transfer to Polygon.Deposit: Then a function has to be called on the RootChainManger contract which will trigger the ChildChainManager contract on the Mumbai testnet. The ChildChainManager contract will then call the deposit function of the Child token contract. Child contract is the copy of the Goerli token contract in Mumbai.  ","version":null,"tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#providers","content":"To interact with Goerli and Mumbai we can either run a local node (which is slightly more difficult) or use the RPC endpoints of infrastructure providers like DataHub or Infura (which is much simpler). For Goerli, we will run a local Geth node. You can also use infura. For Mumbai, we will use DataHub ","version":null,"tagName":"h2"},{"title":"Goerli​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#goerli-1","content":"Install the Geth client, if you have not installed it already, then run: geth --goerli --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot;  The default endpoint is 127.0.0.1:8545. You can get attached and see if everything is fine: geth attach http://127.0.0.1:8545 eth.getBalance(&quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;)  ","version":null,"tagName":"h3"},{"title":"Mumbai​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#mumbai-1","content":"Sign up for a DataHub Choose the Polygon service from the DataHub Services DashboardScroll down to see the Polygon endpoint URLsCopy the Mumbai Testnet JSONRPC URL. It is probably located hereForm the URL like so, replacing the text YOUR_API_KEY with the API key you got from DataHub:https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/ ","version":null,"tagName":"h3"},{"title":"Installing helpers​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#installing-helpers","content":"Now that we have the information we need and the other important pieces in place, we can write some useful code using the maticjs client library and the HDWalletProvider class from Truffle. We will need to install both of these packages on the commandline with the Node package manager. Use these commands to install the packages and save them in the project manifest, package.json: npm install @maticnetwork/maticjs --save npm install @truffle/hdwallet-provider --save  ","version":null,"tagName":"h2"},{"title":"Approve​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#approve","content":"To approve the Ethereum Predicate Contract we just need to call the approveERC1155ForDeposit function. The code for this is straightforward: let result = await maticPOSClient.approveERC1155ForDeposit(rootToken, { from: user, gasPrice: &quot;10000000000&quot; });  ","version":null,"tagName":"h2"},{"title":"Deposit​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#deposit","content":"Next, we would call the depositERC20ForUser function of the Ethereum Predicate Contract: let result_2 = await maticPOSClient.depositSingleERC1155ForUser( rootToken, user, tokenId.toString(), amount, data, { from: user, gasPrice: &quot;10000000000&quot; } )  To bring it all together in JavaScript that can be executed either in a web browser or on the commandline, we can add some constants and use an external file to hold the sensitive API keys and wallet seed phrases. This is a complete example of how to use maticjs and the HDWalletProvider class to communicate with a deployed smart contract on Polygon. Use the following code as a guide for building your own solution! // main.js const HDWalletProvider = require(&quot;@truffle/hdwallet-provider&quot;) const { MaticPOSClient } = require(&quot;@maticnetwork/maticjs&quot;) const secrets = require(&quot;./secrets.json&quot;) let user = &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot; let rootToken = &quot;0x11C47A4F19cc52923b9C495080ADB441ADe38883&quot; // Goerli Contract Address let amount = 999 // amount of token we want to trasnfer let tokenId = 0 // Token ID let data = &quot;0x0&quot; // Additional data const parentProvider = new HDWalletProvider(secrets.seed, &quot;http://127.0.0.1:8545&quot;) // // Local Geth client address const maticProvider = new HDWalletProvider(secrets.seed, secrets.mumbai) // DataHub Mumbai Testnet JSONRPC URL const maticPOSClient = new MaticPOSClient({ network: &quot;testnet&quot;, version: &quot;mumbai&quot;, parentProvider, maticProvider }); (async () =&gt; { try { let result = await maticPOSClient.approveERC1155ForDeposit(rootToken, { from: user, gasPrice: &quot;10000000000&quot; }) let result_2 = await maticPOSClient.depositSingleERC1155ForUser( rootToken, user, tokenId.toString(), amount, data, { from: user, gasPrice: &quot;10000000000&quot; } ) console.log(result) console.log(result_2) } catch (error) { console.log(error) } })()  The expected output for approveERC1155ForDeposit is something like this: { blockHash: '0xc6b7b5a0ace622ca73abb20923fd1995976f8fbff0ea2b92111f72924288c204', blockNumber: 5571533, contractAddress: null, cumulativeGasUsed: 26780, effectiveGasPrice: '0x2540be400', from: '0xd8f24d419153e5d03d614c5155f900f4b5c8a65c', gasUsed: 26780, logsBloom: '0xstatus: true, to: '0x11c47a4f19cc52923b9c495080adb441ade38883', transactionHash: '0x2627a28ff17a57565445bb4222b5ccf99389e325c3b388ba21c8293288bea1e7', transactionIndex: 0, type: '0x0', events: { ApprovalForAll: { address: '0x11C47A4F19cc52923b9C495080ADB441ADe38883', blockNumber: 5571533, transactionHash: '0x2627a28ff17a57565445bb4222b5ccf99389e325c3b388ba21c8293288bea1e7', transactionIndex: 0, blockHash: '0xc6b7b5a0ace622ca73abb20923fd1995976f8fbff0ea2b92111f72924288c204', logIndex: 0, removed: false, id: 'log_c2ae5ce3', returnValues: [Result], event: 'ApprovalForAll', signature: '0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31', raw: [Object] } } }  And for depositSingleERC1155ForUser: { blockHash: '0x1a95b0e2633ea2691841c358ad87811ad0413e6e60d3c1a1dd0b738fbf4bb0e0', blockNumber: 5571535, contractAddress: null, cumulativeGasUsed: 497826, effectiveGasPrice: '0x2540be400', from: '0xd8f24d419153e5d03d614c5155f900f4b5c8a65c', gasUsed: 125838, logsBloom: '0xa010000', status: true, to: '0xbbd7cbfa79faee899eaf900f13c9065bf03b1a74', transactionHash: '0xfd107f2ce76b183153eaff4bccaff6873386ef89e6e5937bf30aa153612757ee', transactionIndex: 1, type: '0x0', events: { '0': { address: '0xB19a86ba1b50f0A395BfdC3557608789ee184dC8', blockNumber: 5571535, transactionHash: '0xfd107f2ce76b183153eaff4bccaff6873386ef89e6e5937bf30aa153612757ee', transactionIndex: 1, blockHash: '0x1a95b0e2633ea2691841c358ad87811ad0413e6e60d3c1a1dd0b738fbf4bb0e0', logIndex: 1, removed: false, id: 'log_6fa41672', returnValues: Result {}, event: undefined, signature: null, raw: [Object] }, '1': { address: '0x11C47A4F19cc52923b9C495080ADB441ADe38883', . . . } }  Just a few things to mention: secrets.json: contains Seed, privateKey of the address (0xd8f2). And Mumbai API URL. ex: { &quot;privateKey&quot;: &quot;This should be the private key of an account specifically made for use on the Goerli testnet&quot;, &quot;seed&quot;: &quot;This should be a Secret Recovery Phrase from Metamask and ONLY used on Ethereum testnets&quot;, &quot;mumbai&quot;: &quot;https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/&quot; }  @truffle/hdwallet-provider: Handles signing transactions processfrom: The Goerli address we created token and want to send transactions withrootToken: The ERC-1155 contract address on the Goerli testnetamount: the amount of token we want to transfer. ","version":null,"tagName":"h2"},{"title":"Not able to run main.js​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#not-able-to-run-mainjs","content":"If you are facing an error message like Error: execution reverted: ERC1155: approve to the zero address  The contract probably has not been mapped yet. If you have not run Geth, you will get an error like this (node:3962) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1) (node:3962) [DEP0018] DeprecationWarning: Unhandled terminate the Node.js process with a non-zero exit code. node_modules/safe-event-emitter/index.js:74 throw err ^ Error: PollingBlockTracker - encountered an error while attempting to update latest block: Error: connect ECONNREFUSED 127.0.0.1:8545  If you get an error like this { code: -32000, message: 'getDeleteStateObject (0000000000000000000000000000000000000000) error: no suitable peers available' }  Wait a bit and try again ","version":null,"tagName":"h2"},{"title":"Sync & Confirmation​","type":1,"pageTitle":"How to transfer ERC-1155 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc1155-pos-bridge#sync--confirmation","content":"It takes up to 5 minutes for Mumbai to read data from the Goerli chain and sync itself. Once it has synced, then we can check the token balance via web3js. The balanceOf output for our contract in Goerli would be like: TokenID 0: 6999999999999998935 TokenID 1: 1  And for Mumbai: TokenID 0: 999 TokenID 1: 0  Transfer using Web UI Transferring assets through Web UI is pretty simple. Just like the SDK, there is the Approve and a Deposit steps. Open mintnft Make sure Goerli Testnet is selected in Metamask Enter the contract address in Goerli and Mumbai, and ID of the token you want to transfer. We put 0 (MLBFun) Click on Approve Then review the transaction details, like gas fees and the smart contract you are sending tokens to - before clicking on Confirm Now, wait until you receive confirmations. Metamask and the website both will send a notification. Now Click on Deposit Once the transaction is mined, the process is complete! It takes about 7 minutes to complete the transfer. As mentioned before Polygon needs about 5 minutes to sync. Conclusion Congratulations! By completing this tutorial you learned how to use the Polygon PoS Bridge. We have configured Metamask and Geth, to communicate with the Goerli testnet and the Mumbai testnet. We then mapped an ERC-1155 contract between the networks so it can be transferred via the bridge. Finally, we called functions on the PoS Bridge contracts and moved our assets from Ethereum to Polygon. About The Author I'm mlibre, a random guy from the solar galaxy. I am interested in blockchain tech and find it very useful for lots of things. Feel free to check my Github ","version":null,"tagName":"h2"},{"title":"Building a simple swap DApp On The NEAR Blockchain","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/","content":"","keywords":"","version":null},{"title":"Table of Contents​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#table-of-contents","content":"RequirementsSetting up near-cliAccounts &amp; WalletSetting up rustGetting startedMLB1 contract Building MLB1 contractDeploying MLB1 contract Exchange contract Deploying the contractSwap near to token Web UIHosting On SkynetReferencesAbout The AuthorDonations ","version":null,"tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#requirements","content":"We will use the following technologies: NEAR CLI v2.2.0 or higher installed globallynear-sdk v3 or higher installed globallyNodejs and NPM v14.17.6 LTS or higher installedRust v1.56 or higher installedReact v17.0.1 or higher installednear-api-js v0.43.1 or higher installedparcel v2 or higher installed ","version":null,"tagName":"h2"},{"title":"Setting up near-cli​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#setting-up-near-cli","content":"NEAR CLI is a Node.js application that relies on near-api-js to connect to and interact with the NEAR blockchain. Create accounts, access keys, sign &amp; send transactions with this command line interface tool. sudo npm install -g near-cli near login # Store testnet access keys locally  near login will open the browser, testnet wallet page. You will login to the testnet and store the access keys locally. Note: All the near commands work on the testnet chain (https://rpc.testnet.near.org), unless you specify the NEAR_ENV variable or provide the --nodeUrl flag. ","version":null,"tagName":"h2"},{"title":"Accounts & Wallet​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#accounts--wallet","content":"In NEAR, accounts are string, like mlibre.near. Each account can have multiple keys-pair. If you use near login, near will save your key-pair from the wallet into your local computer. You can find them here: cat .near-credentials/testnet/ACCOUNT_ID.near.json  You can also query an account's public keys by running: near keys mlibre.testnet  Go ahead and create a testnet wallet. https://wallet.testnet.near.org/ ","version":null,"tagName":"h2"},{"title":"Setting up rust​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#setting-up-rust","content":"Rust is a modern systems programming language, focused on safety, speed and concurrency. It is used to write high-performance, distributed systems. Rust also supports WebAssembly. it is currently, the preferred programming language for writing smart contracts on NEAR. install Rust, and add the wasm to the rust toolchain. # https://www.rust-lang.org/ rustup target add wasm32-unknown-unknown  ","version":null,"tagName":"h2"},{"title":"Getting started​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#getting-started","content":"First, we write a fungible token (FT) named MLB1 in rust, and will deploy it on the chain. We use it as the near-token swap pair.We write an Exchange Contract that will handle the swap functionality. Each token-near pair, one exchange contract.We make a simple Web UI to interact with the Exchange Contract, using near-sdk-js and React libraries.We host our DApp on Skynet. ","version":null,"tagName":"h2"},{"title":"MLB1 contract​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#mlb1-contract","content":"MLB1 is the symbol of the token we are going to deploy on the NEAR testnet. We will use the official template for the contract, which is based on the NEP-141 standard. Note, In NEAR each account can only have one smart contract. And re-deploying contracts DOES NOT create a new state. ","version":null,"tagName":"h2"},{"title":"Building MLB1 contract​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#building-mlb1-contract","content":"git clone https://github.com/near-examples/FT.git MLB1 # cloning the FT template cd MLB1 ./build.sh # Build  ","version":null,"tagName":"h3"},{"title":"Deploying MLB1 contract​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#deploying-mlb1-contract","content":"From now we consider mlibre.testnet as the master account. near create-account mlb1.mlibre.testnet --masterAccount mlibre.testnet # Create a sub account for mlb1 contract near state mlb1.mlibre.testnet # checking the newly created account state near deploy --wasmFile res/fungible_token.wasm --accountId mlb1.mlibre.testnet # Deploying the contract  Deploy output is something like this: Starting deployment. Account id: mlb1.mlibre.testnet, node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: res/fungible_token.wasm Transaction Id 8JJCqCXiwVCppQTExUXJBnnXkj4pzvqjNN2jJx5RPeGs To see the transaction in the transaction explorer, please open this url in your browser https://explorer.testnet.near.org/transactions/8JJCqCXiwVCppQTExUXJBnnXkj4pzvqjNN2jJx5RPeGs Done deploying to mlb1.mlibre.testnet  You can check the account in the explorer, there you will find the actions that happened.  Now we should call the new method of the contract to initialize a token: near call mlb1.mlibre.testnet new '{&quot;owner_id&quot;: &quot;mlb1.mlibre.testnet&quot;, &quot;total_supply&quot;: &quot;1000000000000000&quot;, &quot;metadata&quot;: { &quot;spec&quot;: &quot;ft-1.0.0&quot;, &quot;name&quot;: &quot;MLB1&quot;, &quot;symbol&quot;: &quot;MLB1&quot;, &quot;decimals&quot;: 8 }}' --accountId mlb1.mlibre.testnet  You can check the explorer for details, or query the account's state with cli: near state mlb1.mlibre.testnet # Account status # near view-state mlb1.mlibre.testnet --finality final # key-value status # near view-state mlb1.mlibre.testnet --finality final --utf8 # key-value status in utf8 # near view mlb1.mlibre.testnet ft_metadata # Token metadata  Output is something like this: { amount: '100000262536618865600000010', block_hash: 'Br6C34jP4B587P7S4fXPocxfMYe85bzU252UH9KXjudf', block_height: 72853693, code_hash: '7Mjzf1s65QZ7aeh7xFjfoihrqpinVS7FaNmyh7kqupEN', locked: '0', storage_paid_at: 0, storage_usage: 226967, formattedAmount: '100.00026253661886560000001' }  And for MLB1 balance of the account: near view mlb1.mlibre.testnet ft_balance_of '{&quot;account_id&quot;: &quot;mlb1.mlibre.testnet&quot;}'  ","version":null,"tagName":"h3"},{"title":"Exchange contract​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#exchange-contract","content":"The exchange contract takes a token address parameter in its new method, which is the token that can be swapped for NEAR and vice versa. Follow the official template to start a new contract. cargo new exchange # Follow the doc: https://docs.near.org/docs/develop/contracts/rust/intro  The folder structure looks like this: ├── Cargo.toml ├── src │ └── lib.rs └── target └── exchange.wasm  Contract code is straightforward: // lib.rs use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize}; use near_sdk::{env, log, near_bindgen, ext_contract, AccountId, Balance, PanicOnDefault, PromiseOrValue}; near_sdk::setup_alloc!(); #[ext_contract(mlb1)] trait FungibleToken { fn ft_transfer(&amp;mut self, receiver_id: String, amount: String, memo: Option&lt;String&gt;); fn ft_total_supply(&amp;self) -&gt; String; fn ft_balance_of(&amp;self, account_id: String) -&gt; String; } #[near_bindgen] #[derive(Default, BorshDeserialize, BorshSerialize)] pub struct Exchange { token_address: AccountId, logo_url: String } #[near_bindgen] impl Exchange { #[init] pub fn new(_token_address: AccountId) -&gt; Self { assert!(!env::state_exists(), &quot;Already initialized&quot;); assert!(&amp;env::signer_account_id() == &amp;env::current_account_id(), &quot;Owner's method&quot;); Self { token_address: _token_address, logo_url: &quot;&quot;.to_string() } } #[payable] pub fn near_to_token(&amp;mut self) { let near = env::attached_deposit(); let account = &amp;env::signer_account_id(); env::log(near.to_string().as_bytes()); env::log(account.to_string().as_bytes()); mlb1::ft_transfer( account.to_string(), near.to_string(), None, &amp;self.token_address.to_string(), // mlb1 account id 1, // yocto NEAR to attach 5_000_000_000_000 // gas to attach ); } pub fn get_token_address(self) -&gt; AccountId { self.token_address } pub fn set_token_address(&amp;mut self, _token_address: AccountId) { assert!(&amp;env::signer_account_id() == &amp;env::current_account_id(), &quot;Owner's method&quot;); self.token_address = _token_address } pub fn set_logo_url(&amp;mut self, url: String) { assert!(&amp;env::signer_account_id() == &amp;env::current_account_id(), &quot;Owner's method&quot;); self.logo_url = url } pub fn get_logo_url(self) -&gt; String { self.logo_url } }  new function is used to initialize the contract. assert!(&amp;env::signer_account_id() == &amp;env::current_account_id() is used to check if the current account is the owner of the contract. near_to_token function is used to swap NEAR for tokensset_token_address function is used to set the token address.get_token_address function is used to get the token address. And Cargo.toml is: [package] name = &quot;exchange&quot; version = &quot;1.0.0&quot; authors = [&quot;Mlibre &lt;m.gh@linuxmail.org&gt;&quot;] edition = &quot;2021&quot; [lib] crate-type = [&quot;cdylib&quot;, &quot;rlib&quot;] [dependencies] near-sdk = &quot;3.1.0&quot; [profile.release] codegen-units = 1 # Tell `rustc` to optimize for small code size. opt-level = &quot;z&quot; lto = true debug = false panic = &quot;abort&quot; overflow-checks = true  As you can see in [dependencies] section, we are using near-sdk version 3.1.0 rust library. ","version":null,"tagName":"h2"},{"title":"Deploying the contract​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#deploying-the-contract","content":"Lets create an account for the exchange contract, compile and deploy it: # near delete exchange.mlibre.testnet mlibre.testnet near create-account exchange.mlibre.testnet --masterAccount mlibre.testnet cargo build --target wasm32-unknown-unknown --release cp target/wasm32-unknown-unknown/release/*.wasm ./target near deploy --wasmFile target/exchange.wasm --accountId exchange.mlibre.testnet  There is a new method in the exchange contract, we should call it to initialize the token: near call exchange.mlibre.testnet new '{&quot;_token_address&quot;: &quot;mlb1.mlibre.testnet&quot;}' --accountId exchange.mlibre.testnet # near call exchange.mlibre.testnet set_token_address '{&quot;_token_address&quot;: &quot;mlb1.mlibre.testnet&quot;}' --accountId exchange.mlibre.testnet # near deploy exchange.mlibre.testnet --wasmFile target/exchange.wasm --initFunction 'new' --initArgs '{&quot;_token_address&quot;: &quot;mlb1.mlibre.testnet&quot;}' near view exchange.mlibre.testnet get_token_address --accountId exchange.mlibre.testnet  In order to deposit some MLB1 to the exchange contract, we need to call the storage_deposit method: near call mlb1.mlibre.testnet storage_deposit '' --accountId exchange.mlibre.testnet --amount 0.0125 near call mlb1.mlibre.testnet ft_transfer '{&quot;receiver_id&quot;: &quot;exchange.mlibre.testnet&quot;, &quot;amount&quot;: &quot;1900&quot;}' --accountId mlb1.mlibre.testnet --amount 0.000000000000000000000001 near view mlb1.mlibre.testnet ft_balance_of '{&quot;account_id&quot;: &quot;mlb1.mlibre.testnet&quot;}'  ","version":null,"tagName":"h3"},{"title":"Swap near to token​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#swap-near-to-token","content":"Now to swap some NEAR for MLB1 as mlibre.testnet, we call the near_to_token method: near call mlb1.mlibre.testnet storage_deposit '' --accountId mlibre.testnet --amount 0.0125 near call exchange.mlibre.testnet near_to_token --accountId mlibre.testnet --amount 0.000000000000000000000001 near view mlb1.mlibre.testnet ft_balance_of '{&quot;account_id&quot;: &quot;exchange.mlibre.testnet&quot;}' near view mlb1.mlibre.testnet ft_balance_of '{&quot;account_id&quot;: &quot;mlibre.testnet&quot;}'  You can find the source codes here ","version":null,"tagName":"h3"},{"title":"Web UI​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#web-ui","content":"Writing a web DApp for the exchange contract is easy. We can use the npx create-near-app web-ui tool to create a ready-to-use react, rust, parcel stack. npx create-near-app web-ui --frontend=react --contract=rust cd web-ui yarn start # Installing dependencies and starting the app  The folder structure should look like: | ├── babel.config.js ├── dist ├── package.json ├── src │ ├── App.js │ ├── assets │ │ ├── favicon.ico │ │ ├── mlogo-black.svg │ │ └── mlogo-white.svg │ ├── config.js │ ├── global.css │ ├── index.html │ ├── index.js │ ├── utils.js │ └── wallet │ └── login │ └── index.html  To connect to a wallet, signing in and out, NEAR provides near-api-js library. It is imported in utils.js. export async function initContract() { // Initialize connection to the NEAR testnet const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig)) // Initializing Wallet based Account. It can work with NEAR testnet wallet that // is hosted at https://wallet.testnet.near.org window.walletConnection = new WalletConnection(near) // Getting the Account ID. If still unauthorized, it's just empty string window.accountId = window.walletConnection.getAccountId() window.account = await window.walletConnection.account(); // Initializing our contract APIs by contract name and configuration window.contract = await new Contract(window.account, nearConfig.contractName, { viewMethods: ['get_token_address'], changeMethods: ['near_to_token'], sender: window.account }) }  Every time the app starts, the initContract function is called. It initializes the connection to the NEAR testnet and creates an Account, Wallet, and Contract object. Then we call the get_token_address method to get the token address in App.js. export default function App() { const [token_address, set_token_address] = React.useState() const [showNotification, setShowNotification] = React.useState(false) React.useEffect( async () =&gt; { if (window.walletConnection.isSignedIn()) { try { let token_address = await window.contract.get_token_address(); set_token_address(token_address) } catch (error) { console.log(error); } } }, [] ) . . .  We also need to change the form action to: await window.contract.near_to_token({}, 300000000000000, // attached GAS (optional) token_address.value // attached deposit in yoctoNEAR (optional) )  Before we start the app we are going to make some changes minor changes as well. Start by upgrading the parcel dependency to the latest version: Replace parcel-bundler with parcel in the package.json npm i parcel@latest Add type=&quot;module&quot; to the script tag in the src/index.html file. &lt;script type=&quot;module&quot; src=&quot;./index.js&quot;&gt;&lt;/script&gt; In config.js set the contract name to exchange.mlibre.testnet function getConfig() { return { networkId: 'testnet', nodeUrl: 'https://rpc.testnet.near.org', contractName: 'exchange.mlibre.testnet', walletUrl: 'https://wallet.testnet.near.org', helperUrl: 'https://helper.testnet.near.org', explorerUrl: 'https://explorer.testnet.near.org', } }  You can now run the app using the following command: parcel src/index.html --open   You can find the source codes here ","version":null,"tagName":"h2"},{"title":"Hosting On Skynet​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#hosting-on-skynet","content":"After running dapp using parcel src/index.html --open, copy the dist folder and upload it on Skynet. ","version":null,"tagName":"h2"},{"title":"References​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#references","content":"https://docs.near.orghttps://github.com/near/near-clihttps://github.com/mlibre/blockchain/tree/master/NEAR/simple-exchange ","version":null,"tagName":"h2"},{"title":"About The Author​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#about-the-author","content":"I'm mlibre, a random guy from the solar galaxy. I am interested in blockchain tech and find it very useful for lots of things. Feel free to check my Github ","version":null,"tagName":"h2"},{"title":"Donations​","type":1,"pageTitle":"Building a simple swap DApp On The NEAR Blockchain","url":"/Wisdom-Hub/blockchain/NEAR/simple-exchange/#donations","content":"ETH: 0xc9b64496986E7b6D4A68fDF69eF132A35e91838e NEAR: mlibre.near ","version":null,"tagName":"h2"},{"title":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#table-of-content","content":"PrerequisitesRequirementsGetting startedSetting up Metamask GoerliMumbai MLB ERC20 ContractMappingTransfer using SDK ProvidersInstalling helpersApproveDepositNot able to run main.jsSync &amp; Confirmation Transfer using Web UIConclusion Prerequisites In this tutorial, We will use Metamask as our wallet. If you are not familiar with it or don't know how to use it, check this video on youtube. When you are creating a Metamask wallet, it gives you a Secret Recovery Phrase (Seed). With this seed, you can recover all of your accounts in Metamask. We will use this seed later in this tutorial. here is an article about How to reveal your Secret Recovery Phrase Requirements MetamaskNodejs v14.17.6 LTS or higher installedGeth: version 1.10.8 Getting started In order to transfer assets between root (Ethereum) and child (Polygon) contracts, they should be mapped first. This is a process by which an existing token contract is mirrored between the root and child chain. If the token you intend to transfer already exists on Polygon, this means you don't need to perform the mapping. Check the official docs to learn about the mapping process.Now that contracts are mapped. it's time to transfer the assets. We can either use the Polygon Wallet UI or the Polygon SDK We use the SDK for our ERC-20 token that is deployed on the Goerli testnetWe use the Polygon Wallet UI for tokens that are deployed on Ethereum mainnet Setting up Metamask Before we get into the details of moving the tokens, let's set up Metamask so we can check our ETH, MATIC, and MLB token balances. ","version":null,"tagName":"h2"},{"title":"Goerli​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#goerli","content":"The Goerli testnet is pre-configured in Metamask's list of available networks. You can select it from the dropdown list at the top of the Metamask interface. You can fund your account with testnet Ether from the Goerli Authenticated faucet as long as you are willing to make a post on a valid Twitter or Facebook account. If this is not something you wish to do, there is an alternative faucet at goerli-faucet.slock.it ","version":null,"tagName":"h2"},{"title":"Mumbai​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#mumbai","content":"You can either open mumbai.polygonscan.com and click on &quot;Add Mumbai Network&quot; in the footer at the bottom of the page or add it manually using the following information: Network Name: Polygon Mumbai testnetRPC URL: https://rpc-mumbai.maticvigil.com/Chain ID: 80001Currency Symbol: MATICBlock Explorer URL: https://mumbai.polygonscan.com/  You can fund your Mumbai account with MATIC here MLB ERC20 Contract MLB is the symbol of the token (deployed on the Goerli testnet) that we'll map and transfer, which is a standard OpenZeppelin ERC-20 token. You can find a step by step guide to creating an ERC-20 token here Token info: Name: Mlibre Symbol: MLB Owner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C Contract Address: 0xd2d40892B3EebdA85e4A2742A97CA787559BF92f Goerli etherscan: https://goerli.etherscan.io/address/0xd2d40892B3EebdA85e4A2742A97CA787559BF92f  Gather this information for the token you intend to map. Mapping Now that everything is ready. Let's map our MLB token. Go to mapper.matic.today and complete the form Make sure the token you want to map has had its contract verified on Etherscan Choose Gorli Testnet -&gt; Mumbai testnet At this time the mapping process is not immediate, it can take up to 3 days to be confirmed. Then open mapper.matic.today, and enter the contract address to see if it has been added.  As you may notice, the contract address in Goerli and Mumbai are not the same. Let's remember to add it to Metamask so it shows up when we are connected to Mumbai as well. Open MetamaskSelect the Mumbai testnet from the list of available networksAdd TokenPaste the contract address there (0x0F6886ca4476D3aAb965F2D1b9185F2dd857E653) Now it should be something like:  We don't yet have any MLB tokens in Mumbai. We can transfer some across the bridge and check our Metamask balance again afterward. Transfer using SDK Let's take a look at the workflow for transferring tokens with the SDK: Approve: The owner of the token has to approve the Ethereum Predicate Contract which will lock the amount of token they want to transfer to Polygon.Deposit: Then a function has to be called on the RootChainManger contract which will trigger the ChildChainManager contract on the Mumbai testnet. The ChildChainManager contract will then call the deposit function of the Child token contract. Child contract is the copy of the Goerli token contract in Mumbai.  ","version":null,"tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#providers","content":"To Interact with Goerli and Mumbai we can either run a local node (which is slightly more difficult) or use the RPC endpoints of infrastructure providers like DataHub or Infura (which is much simpler). For Goerli, we will run a local Geth node. You can also use infura. For Mumbai, we will use DataHub ","version":null,"tagName":"h2"},{"title":"Goerli​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#goerli-1","content":"Install the Geth client, if you have not installed it already, then run: geth --goerli --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot;  The default endpoint is 127.0.0.1:8545. You can get attached and see if everything is fine: geth attach http://127.0.0.1:8545 eth.getBalance(&quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;)  ","version":null,"tagName":"h3"},{"title":"Mumbai​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#mumbai-1","content":"Sign up for a DataHubChoose the Polygon service from the DataHub Services DashboardScroll down to see the Polygon endpoint URLsCopy the Mumbai Testnet JSONRPC URL. It is probably located hereForm the URL like so, replacing the text YOUR_API_KEY with the API key you got from DataHub:https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/ ","version":null,"tagName":"h3"},{"title":"Installing helpers​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#installing-helpers","content":"Now that we have the information we need and the other important pieces in place, we can write some useful code using the maticjs client library and the HDWalletProvider class from Truffle. We will need to install both of these packages on the commandline with the node package manager. Use these commands to install the packages and save them in the project manifest, package.json: npm install @maticnetwork/maticjs --save npm install @truffle/hdwallet-provider --save  ","version":null,"tagName":"h2"},{"title":"Approve​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#approve","content":"To approve the Ethereum Predicate Contract we just need to call the approveERC20ForDeposit function. The code for this is straightforward: await maticPOSClient.approveERC20ForDeposit(rootToken, amount.toString(), { from, gasPrice: &quot;10000000000&quot; });  ","version":null,"tagName":"h2"},{"title":"Deposit​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#deposit","content":"Next, we would call the depositERC20ForUser function of the Ethereum Predicate Contract: await maticPOSClient.depositERC20ForUser(rootToken, from, amount.toString(), { from, gasPrice: &quot;10000000000&quot;, });  To bring it all together in JavaScript that can be executed either in a web browser or on the commandline, we can add some constants and use an external file to hold the sensitive API keys and wallet seed phrases. This is a complete example of how to use maticjs and the HDWalletProvider class to communicate with a deployed smart contract on Polygon. Use the following code as a guide for building your own solution! // main.js import { HDWalletProvider } from '@truffle/hdwallet-provider'; import { MaticPOSClient } from '@maticnetwork/maticjs'); import { secrets } from './secrets.json' const from = &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;; const rootToken = &quot;0xd2d40892B3EebdA85e4A2742A97CA787559BF92f&quot;; const amount = 999 * (10 ** 18); const parentProvider = new HDWalletProvider(secrets.seed, 'http://127.0.0.1:8545'); // Local Geth client address const maticProvider = new HDWalletProvider(secrets.seed, secrets.mumbai) // DataHub Mumbai Testnet JSONRPC URL const maticPOSClient = new MaticPOSClient({ network: &quot;testnet&quot;, version: &quot;mumbai&quot;, parentProvider, maticProvider, }); (async () =&gt; { try { let result = await maticPOSClient.approveERC20ForDeposit( rootToken, amount.toString(), { from, gasPrice: &quot;10000000000&quot;, } ); let result_2 = await maticPOSClient.depositERC20ForUser( rootToken, from, amount.toString(), { from, gasPrice: &quot;10000000000&quot;, } ); console.log(result); console.log(result_2); } catch (error) { console.log(error); } })();  The expected output for approveERC20ForDeposit is something like this: { blockHash: '0x9616fab5f19fb93580fe5dc71da9062168f1f1f5a4a5297094cad0b2b3e2dceb', blockNumber: 5513011, contractAddress: null, cumulativeGasUsed: 46263, effectiveGasPrice: '0x2540be400', from: '0xd8f24d419153e5d03d614c5155f900f4b5c8a65c', gasUsed: 46263, logsBloom: '0x0000000000000000000000000000000000000000000000800000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000010000000000000000000000', status: true, to: '0xd2d40892b3eebda85e4a2742a97ca787559bf92f', transactionHash: '0x3aba80ae8938ed1abbb18560cb061f4915d202a731e5e2ec443aded67169e28a', transactionIndex: 0, type: '0x0', events: { Approval: { address: '0xd2d40892B3EebdA85e4A2742A97CA787559BF92f', blockNumber: 5513011, transactionHash: '0x3aba80ae8938ed1abbb18560cb061f4915d202a731e5e2ec443aded67169e28a', transactionIndex: 0, blockHash: '0x9616fab5f19fb93580fe5dc71da9062168f1f1f5a4a5297094cad0b2b3e2dceb', logIndex: 0, removed: false, id: 'log_0e714fbf', returnValues: [Result], event: 'Approval', signature: '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925', raw: [Object] } } }  And for depositERC20ForUser: { blockHash: '0x622989e0d1097ea59c557663bf4fa19b3064cfb858706021a6eecb11bb1c19b2', blockNumber: 5513012, contractAddress: null, cumulativeGasUsed: 89761, effectiveGasPrice: '0x2540be400', from: '0xd8f24d419153e5d03d614c5155f900f4b5c8a65c', gasUsed: 89761, logsBloom: '0x0200000000000000000000000000000800000040000000800000000000000000000080000000000000040008000000000000200000000000008000100020000000000000000000001000000a000000000000000000000100000000000000000000000000000008000000000400000014000000000000000000000010200000000000000000000000000000000200000000000000000000000000020000080000020000000200008000000000000000040000000000000800000000000000000000000002000000000000000000000002000000140000000000200000000000000010000000000000000000000000000000000000010000000000000000000000', status: true, to: '0xbbd7cbfa79faee899eaf900f13c9065bf03b1a74', transactionHash: '0x58a7f01edc2b9772f87fca57789f0912152615813e6231ab137e4759c8f6415f', transactionIndex: 0, type: '0x0', events: { '0': { address: '0xdD6596F2029e6233DEFfaCa316e6A95217d4Dc34', blockNumber: 5513012, transactionHash: '0x58a7f01edc2b9772f87fca57789f0912152615813e6231ab137e4759c8f6415f', transactionIndex: 0, blockHash: '0x622989e0d1097ea59c557663bf4fa19b3064cfb858706021a6eecb11bb1c19b2', logIndex: 0, removed: false, id: 'log_20b9b372', returnValues: Result {}, event: undefined, signature: null, raw: [Object] }, '1': { . . .  Just a few things to mention: secrets.json: contains Seed, privateKey of the address (0xd8f2). And Mumbai API URL. ex: { &quot;privateKey&quot;: &quot;This should be the private key of an account specifically made for use on the Goerli testnet&quot;, &quot;seed&quot;: &quot;This should be a Secret Recovery Phrase from Metamask and ONLY used on Ethereum testnets&quot;, &quot;mumbai&quot;: &quot;https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/&quot; }  @truffle/hdwallet-provider: Handles signing transactions processfrom: The Goerli address we created token and want to send transactions withrootToken: The ERC-20 contract address on the Goerli testnetamount: the amount of token we want to transfer. By default, the open zeppelin V4 ERC20 contract uses a value of 18 for decimals. That is why 999 is multiplied by (10 18)** ","version":null,"tagName":"h2"},{"title":"Not able to run main.js​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#not-able-to-run-mainjs","content":"If you are facing an error message like Error: execution reverted: ERC20: approve to the zero address  The contract probably has not been mapped yet. If you have not run Geth, you will get an error like this (node:3962) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1) (node:3962) [DEP0018] DeprecationWarning: Unhandled terminate the Node.js process with a non-zero exit code. node_modules/safe-event-emitter/index.js:74 throw err ^ Error: PollingBlockTracker - encountered an error while attempting to update latest block: Error: connect ECONNREFUSED 127.0.0.1:8545  If you get an error like this { code: -32000, message: 'getDeleteStateObject (0000000000000000000000000000000000000000) error: no suitable peers available' }  Wait a bit and try again ","version":null,"tagName":"h2"},{"title":"Sync & Confirmation​","type":1,"pageTitle":"How to transfer ERC-20 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc20-pos-bridge#sync--confirmation","content":"It takes up to 5 minutes for Mumbai to read data from the Goerli chain and sync itself. Once it has synced, then we can check the token balance in Metamask.  Transfer using Web UI Transferring assets through Web UI is pretty simple. Note that we can't use Goerli to Mumbai here. Because Web UI only supports Ethereum and Polygon mainnets. So I am going to transfer some real tokens from my Ethereum account to Polygon and pay the fees. You may just follow the images below to see how the process works. Open wallet.polygon.technology Make sure Ethereum Mainnet is selected in Metamask Click on Metamask. first login option You will be asked to sign a Signature Request to make sure you have access to the wallet. It costs no fees I chose DAI token from Ethereum Click on Transfer Then review the transaction details, like gas fees and the smart contract you are sending tokens to - before clicking on Confirm Once the transaction is mined, the process is complete! It takes about 7 minutes to complete the transfer, as mentioned before Polygon needs about 5 minutes to sync. Conclusion Congratulations! By completing this tutorial you learned how to use the Polygon PoS Bridge. We have configured Metamask and Geth, to communicate with the Goerli testnet and the Mumbai testnet. We then mapped an ERC-20 token between the networks so it can be transferred via the bridge. Finally, we called functions on the PoS Bridge contracts and moved our assets from Ethereum to Polygon. About The Author I'm mlibre, a random guy from the solar galaxy. I am interested in blockchain tech and find it very useful in lots of things. Feel free to check my Github ","version":null,"tagName":"h2"},{"title":"How to write Smart Contracts on Polygon","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/","content":"","keywords":"","version":null},{"title":"Table of content​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#table-of-content","content":"RequirementsAccountInstallationImplementationDeployingInteracting with the blockchain GethWeb3 MATIC ","version":null,"tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#requirements","content":"Node.js 14ethereum-smart-contract-deployer 2.0.0 solc: 0.8.9web3: 1.6.0 ","version":null,"tagName":"h2"},{"title":"Account​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#account","content":"First, create an Ethereum account if you don't have one. If you already have, you don't need another. You just need to send some credit to your account using Matic faucet. Click on the link below, and request for a fund. https://faucet.polygon.technology/ now we need to communicate with the Testnet. Create an Datahub account. Now let's check if your account is funded. geth attach https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOURKEY/ &gt; eth.getBalance(&quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;) 1987540120000000000  ","version":null,"tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#installation","content":"If you are using Arch-based Linux, like Manjaro here are the commands. for other distributions, are also almost the same. sudo pacman -S nodejs npm geth sudo npm install -g solc solcjs --version git clone https://github.com/mlibre/blockchain.git cd blockchain/Polygon/Smart Contracts npm install  ","version":null,"tagName":"h2"},{"title":"Implementation​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#implementation","content":"You can find the Voter contract source code here. In this contract, you can simply add options to vote for, start a voting process, vote the options and get the result. ","version":null,"tagName":"h2"},{"title":"Deploying​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#deploying","content":"We use ethereum-smart-contract-deployer npm module to deploy the contract. node main.js  The output is something like: Network Name: private Network Peers: 118 Solidity Version: 0.8.9 Compiling contract voter.sol Deploying Contract Voter Arguments: [ [ 'mlibre', 'Good' ] ] Transaction hash: 0x347177fb10ce9028e75bdb98885ac33f98fcd46ac67f0371d8dbac3d8e5ebe6d Owner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C Contract Address: 0xeaFEAf1e75B89DabfAf4E8C41858AFBe51c291B8  Congratulations. you made your first contract in Polygon Network. You can find your contract address in the output log. Check it here: https://mumbai.polygonscan.com/address/0xeaFEAf1e75B89DabfAf4E8C41858AFBe51c291B8 ","version":null,"tagName":"h2"},{"title":"Interacting with the blockchain​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#interacting-with-the-blockchain","content":"The next step is to interact with the blockchain using Geth and web3js. ","version":null,"tagName":"h2"},{"title":"Geth​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#geth","content":"geth attach https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/a99e72c92474b4eaec9340d7c03f3b81/ eth.getCode(&quot;0xeaFEAf1e75B89DabfAf4E8C41858AFBe51c291B8&quot;) # To load a contract using geth just need to put the abi we created, and the address var abi = [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;string[]&quot;,&quot;name&quot;:&quot;_options&quot;,&quot;type&quot;:&quot;string[]&quot;}],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;constructor&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;string&quot;,&quot;name&quot;:&quot;option&quot;,&quot;type&quot;:&quot;string&quot;}],&quot;name&quot;:&quot;addOption&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;getOptions&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;string[]&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string[]&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;getVotes&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;uint256[]&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256[]&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;name&quot;:&quot;options&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;string&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;owner&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;address&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;remove&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[],&quot;name&quot;:&quot;startVoting&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;option&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;name&quot;:&quot;vote&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;},{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;name&quot;:&quot;votes&quot;,&quot;outputs&quot;:[{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;}] var voter = eth.contract(abi).at(&quot;0xeaFEAf1e75B89DabfAf4E8C41858AFBe51c291B8&quot;); voter  ","version":null,"tagName":"h3"},{"title":"Web3​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#web3","content":"To interact with the blockchain using web3js, we need to create a web3 instance. And have the contract address and the abi. So you need to keep the abi and the address in a file for later use. You can also use the deployer contract instance just after the deployment. const sender = &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;; const deployer = await new Deployer({ contractFilePath: &quot;voter.sol&quot;, input: [[&quot;mlibre&quot; , &quot;Good&quot;]], sender, privateKey: secrets.privateKey, address: secrets.mumbai }); const contract = await deployer.deploy(); // let abi = deployer.contract.abi // let contract = deployer.contractInstance await contract.methods.addOption(&quot;new option&quot;).send({from: sender}); const options = await contract.methods.getOptions().call(); await contract.methods.startVoting().send({from: sender}); await contract.methods.vote(0).send({from: sender}); const votes = await contract.methods.getVotes().call({ from: sender, }); console.log(options, votes);  ","version":null,"tagName":"h3"},{"title":"MATIC​","type":1,"pageTitle":"How to write Smart Contracts on Polygon","url":"/Wisdom-Hub/blockchain/Polygon/Smart Contracts/#matic","content":"MATIC is the Polygon Network native token. The MATIC token will be used as the gas fee by default. Polygon network provides an API to get the recommended gas price. The javascript code would be something like this: fetch('https://gasstation-mainnet.matic.network') .then(response =&gt; response.json()) .then(json =&gt; console.log(json))  and the result is like: { &quot;safeLow&quot;: 1, &quot;standard&quot;: 1, &quot;fast&quot;: 5, &quot;fastest&quot;: 7.5, &quot;blockTime&quot;: 2, &quot;blockNumber&quot;: 3091956 }  ","version":null,"tagName":"h2"},{"title":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","type":0,"sectionRef":"#","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge","content":"","keywords":"","version":null},{"title":"Goerli​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#goerli","content":"The Goerli testnet is pre-configured in Metamask's list of available networks. You can select it from the dropdown list at the top of the Metamask interface. You can fund your account with testnet Ether from the Goerli Authenticated faucet as long as you are willing to make a post on a valid Twitter or Facebook account. If this is not something you wish to do, there is an alternative faucet at goerli-faucet.slock.it  ","version":null,"tagName":"h2"},{"title":"Mumbai​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#mumbai","content":"You can either open mumbai.polygonscan.com and click on &quot;Add Mumbai Network&quot; in the footer at the bottom of the page or add it manually using the following information: Network Name: Polygon Mumbai testnetRPC URL: https://rpc-mumbai.maticvigil.com/Chain ID: 80001Currency Symbol: MATICBlock Explorer URL: https://mumbai.polygonscan.com/  You can fund your Mumbai account with MATIC here MLBn ERC-721 Contract ERC-721 is a standard for representing ownership of non-fungible tokens. A non-fungible token can represent a piece of data stored somewhere, in a blockchain, decentralized storage, or ... MLBNft is the contract we have already deployed on the Goerli testnet. It is a standard OpenZeppelin ERC-721. This contract has a MLBn NFT, which was only minted once with TokenID 1. We'll map this contract and transfer the NFT. You can find a step-by-step guide to creating an ERC-721 token here Contract info: Name: MLBNft Token: MLBn Balance: 1 TokenID: 1 Owner: 0xD8f24D419153E5D03d614C5155f900f4B5C8A65C Contract Address: 0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b goerli etherscan https://goerli.etherscan.io/address/0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b  Gather this information for the contract you intend to map. Wallet Balance using Web3js ERC-721 contracts have a balanceOf function. It takes Wallet Address as an argument and returns the balance. If you have already configured a provider and the truffle-hdwallet-provider, you can use this function to check your ERC-721 token info and balance. async function getBalance(web3, contract, contractAddress) { let contractInstance = new web3.eth.Contract(ABI, contractAddress); let result = await contractInstance.methods.balanceOf(address).call() console.log(`Balance:` , result); }  The balanceOf output for our contract in Goerli would be like: Balance: 1  And for Mumbai: Balance: 0  The full source code is: const Web3 = require(&quot;web3&quot;); const HDWalletProvider = require(&quot;@truffle/hdwallet-provider&quot;) const secrets = require('./secrets.json') let address = &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;; // The address to check balance of let contractAddressGoerli = &quot;0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b&quot;; // Goerli Contract Address let contractAddressInMumbai = &quot;0xf6320326327c07759602423f01D8fad4AF9E3f24&quot;; // Mumbai Contract Address let ABI = [{&quot;inputs&quot;:[],&quot;s...&quot;}] // const provider = new HDWalletProvider(secrets.privateKey, secrets.localGeth); // Goerli Provider const provider = new HDWalletProvider(secrets.privateKey, secrets.mumbai); // mumbai Provider const web3 = new Web3(provider); (async () =&gt; { try { await getBalance() } catch (e) { console.log(e) } })() async function getBalance() { let contractInstance = new web3.eth.Contract(ABI, contractAddressInMumbai); let result = await contractInstance.methods.balanceOf(address).call() console.log(`Balance` , result); }  secrets.json: contains Seed, privateKey of the address (0xd8f2). And Mumbai API URL. ex: { &quot;privateKey&quot;: &quot;This should be the private key of an account specifically made for use on the Goerli testnet&quot;, &quot;seed&quot;: &quot;This should be a Secret Recovery Phrase from Metamask and ONLY used on Ethereum testnets&quot;, &quot;mumbai&quot;: &quot;https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/&quot;, &quot;localGeth&quot;: &quot;http://127.0.0.1:8545&quot; }  Mapping Now that everything is ready. Let's map our MLBn contract. Go to mapper.matic.today and complete the form Make sure the token you want to map has had its contract verified on Etherscan Choose Gorli Testnet -&gt; Mumbai testnet At this time the mapping process is not immediate. It can take up to 3 days to be confirmed. Then open mapper.matic.today, and enter the contract address to see if it has been added.  As you may notice, the contract address in Goerli and Mumbai is not the same. Let's remember to add it to Metamask so it shows up when we are connected to Mumbai as well. Open MetamaskSelect the Mumbai testnet from the list of available networksAdd TokenPaste the contract address there (0xf6320326327c07759602423f01D8fad4AF9E3f24) We don't yet have any tokens in Mumbai. We can transfer some across the bridge and check our balance again afterward. Transfer using SDK Let's take a look at the workflow for transferring tokens with the SDK: Approve: The owner of the token has to approve the Ethereum Predicate Contract which will lock the amount of token they want to transfer to Polygon.Deposit: Then a function has to be called on the RootChainManger contract which will trigger the ChildChainManager contract on the Mumbai testnet. The ChildChainManager contract will then call the deposit function of the Child token contract. The Child contract is the copy of the Goerli testnet token contract in Mumbai testnet.  ","version":null,"tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#providers","content":"To interact with Goerli and Mumbai we can either run a local node (which is slightly more difficult) or use the RPC endpoints of infrastructure providers like DataHub or Infura (which is much simpler). For Goerli, we will run a local Geth node. You can also use infura. For Mumbai, we will use DataHub Goerli: Install the Geth client, if you have not installed it already, then run: geth --goerli --ws --http --syncmode=light --http.api=&quot;eth,net,web3,personal,txpool&quot; --allow-insecure-unlock --http.corsdomain &quot;*&quot;  The default endpoint is 127.0.0.1:8545. You can get attached and see if everything is fine: geth attach http://127.0.0.1:8545 eth.getBalance(&quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot;)  Mumbai: Sign up for a DataHub Choose the Polygon service from the DataHub Services DashboardScroll down to see the Polygon endpoint URLsForm the URL like so, replacing the text YOUR_API_KEY with the API key you got from DataHub:https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/ ","version":null,"tagName":"h2"},{"title":"Installing helpers​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#installing-helpers","content":"Now that we have the information we need and the other important pieces in place, we can write some useful code using the maticjs client library and the HDWalletProvider class from Truffle. We will need to install both of these packages on the commandline with the Node package manager. Use these commands to install the packages and save them in the project manifest, package.json: npm install @maticnetwork/maticjs --save npm install @truffle/hdwallet-provider --save  ","version":null,"tagName":"h2"},{"title":"Approve​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#approve","content":"To approve the Ethereum Predicate Contract we just need to call the approveERC721ForDeposit function. The code for this is straightforward: await maticPOSClient.approveERC721ForDeposit(rootToken, tokenId, { from: user })  ","version":null,"tagName":"h2"},{"title":"Deposit​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#deposit","content":"Next, we would call the depositERC721ForUser function of the Ethereum Predicate Contract: await maticPOSClient.depositERC721ForUser( rootToken, user, tokenId.toString(), { from: user } )  To bring it all together in JavaScript that can be executed either in a web browser or on the commandline, we can add some constants and use an external file to hold the sensitive API keys and wallet seed phrases. This is a complete example of how to use maticjs and the HDWalletProvider class to communicate with a deployed smart contract on Polygon. Use the following code as a guide for building your own solution! // main.js const HDWalletProvider = require(&quot;@truffle/hdwallet-provider&quot;) const { MaticPOSClient } = require(&quot;@maticnetwork/maticjs&quot;) const secrets = require(&quot;./secrets.json&quot;) let user = &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot; let rootToken = &quot;0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b&quot; // Goerli Contract Address let childToken = &quot;0xf6320326327c07759602423f01D8fad4AF9E3f24&quot; // Goerli Contract Address let tokenId = 3 // Token ID const parentProvider = new HDWalletProvider(secrets.seed, &quot;http://127.0.0.1:8545&quot;) // // Local Geth client address const maticProvider = new HDWalletProvider(secrets.seed, secrets.mumbai) // DataHub Mumbai Testnet JSONRPC URL const maticPOSClient = new MaticPOSClient({ network: &quot;testnet&quot;, version: &quot;mumbai&quot;, parentProvider, maticProvider }); (async () =&gt; { try { let result = await maticPOSClient.approveERC721ForDeposit(rootToken, tokenId, { from: user, gasPrice: &quot;10000000000&quot; }) console.log(result) let result_2 = await maticPOSClient.depositERC721ForUser( rootToken, user, tokenId.toString(), { from: user, gasPrice: &quot;10000000000&quot; } ) console.log(result_2) } catch (error) { console.log(error) } })()  The expected output for approveERC721ForDeposit is something like this: { blockHash: '0xc20d22a31da707a97930a0277dfdc64c4d1fdabe619ee8d5c30e8ec4429de8a7', blockNumber: 5611016, contractAddress: null, cumulativeGasUsed: 29345, effectiveGasPrice: '0x87ffb64b', from: '0xd8f24d419153e5d03d614c5155f900f4b5c8a65c', gasUsed: 29345, logsBloom: '0xstatus: true, to: '0xcce32d5a6b433972fa3ff21233470d60ab7afd6b', transactionHash: '0xe397fe030e14402ecfd4920a2e4dc32f3adb7b2cd8baa6df2cb7fa22decd4b8c', transactionIndex: 0, type: '0x0', events: { Approval: { address: '0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b', blockNumber: 5611016, transactionHash: '0xe397fe030e14402ecfd4920a2e4dc32f3adb7b2cd8baa6df2cb7fa22decd4b8c', transactionIndex: 0, blockHash: '0xc20d22a31da707a97930a0277dfdc64c4d1fdabe619ee8d5c30e8ec4429de8a7', logIndex: 0, removed: false, id: 'log_3c37d4f8', returnValues: [Result], event: 'Approval', signature: '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925', raw: [Object] } } }  And for depositERC721ForUser:  { blockHash: '0xb353ae7b47953a6bec8c2a0d01852dbb917d4b018cf3d8243d1fd69cdde3ee56', blockNumber: 5611018, contractAddress: null, cumulativeGasUsed: 268430, effectiveGasPrice: '0x87ffb64b', from: '0xd8f24d419153e5d03d614c5155f900f4b5c8a65c', gasUsed: 111868, logsBloom: '0x0000000000000000000000000002000000000008000840000000000000000000000400000000000000040108010000000000080000000000000000000024000000004000400000001000000a000000000000000000040000000000100000000000000000020000000000000400000810000000000000000000000010000000000000000800000000000000000000000000000000000004000000020000080000020000000200000000000000000000000400000000000800000000000000000000000002000000000000000000000102000000100000000000000000400060000010000000000000000800000000000000000000000000000000000000000000', status: true, to: '0xbbd7cbfa79faee899eaf900f13c9065bf03b1a74', transactionHash: '0x5167f0d875aeeb0b9a695be6acbcfe568039f7e43084d58f6211dbf14ec8336f', transactionIndex: 2, type: '0x0', events: { '0': { address: '0x74D83801586E9D3C4dc45FfCD30B54eA9C88cf9b', blockNumber: 5611018, transactionHash: '0x5167f0d875aeeb0b9a695be6acbcfe568039f7e43084d58f6211dbf14ec8336f', transactionIndex: 2, blockHash: '0xb353ae7b47953a6bec8c2a0d01852dbb917d4b018cf3d8243d1fd69cdde3ee56', logIndex: 2, removed: false, id: 'log_bed4a03e', returnValues: Result {}, event: undefined, signature: null, raw: [Object] }, '1': { address: '0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b', blockNumber: 5611018, transactionHash: '0x5167f0d875aeeb0b9a695be6acbcfe568039f7e43084d58f6211dbf14ec8336f', transactionIndex: 2, blockHash: '0xb353ae7b47953a6bec8c2a0d01852dbb917d4b018cf3d8243d1fd69cdde3ee56', . . .  Just a few things to mention: secrets.json: contains Seed, privateKey of the address (0xd8f2). And Mumbai API URL. ex: { &quot;privateKey&quot;: &quot;This should be the private key of an account specifically made for use on the Goerli testnet&quot;, &quot;seed&quot;: &quot;This should be a Secret Recovery Phrase from Metamask and ONLY used on Ethereum testnets&quot;, &quot;mumbai&quot;: &quot;https://matic-mumbai--jsonrpc.datahub.figment.io/apikey/YOUR_API_KEY/&quot; }  @truffle/hdwallet-provider: Handles signing transactions processfrom: The Goerli address we created token and want to send transactions withrootToken: The ERC-721 contract address on the Goerli testnetamount: the amount of token we want to transfer. Potential errors and solutions Not able to run main.js If you are facing an error message like Error: execution reverted: RootChainManager: TOKEN_NOT_MAPPED  The contract has not been mapped yet. Geth not running If you have not run Geth, you will get an error like this Error: PollingBlockTracker - encountered an error while attempting to update latest block: Error: connect ECONNREFUSED 127.0.0.1:8545  No peers available If you get an error like this { code: -32000, message: 'getDeleteStateObject (0000000000000000000000000000000000000000) error: no suitable peers available' }  Wait a bit and try again Sync &amp; Confirmation It takes up to 5 minutes for Mumbai to read data from the Goerli chain and sync itself. Once it has synced, then we can check the token balance in Metamask or via web3js. The balanceOf output for our contract in Goerli would be: Balance: 0  And for Mumbai: Balance: 1  Withdraw using SDK Now if we want to transfer our tokens from Mumbai to Goerli, similar before, we can call burnERC721 and exitERC721 functions in order. Let's take a look at the workflow for withdrawing tokens with the SDK: We will call the burn function of the Child token contract, which will burn the tokens.We will call the exit function of the RootChainManager contract, that submit the proof of burn and transfer the tokens.  ","version":null,"tagName":"h2"},{"title":"Burn​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#burn","content":"To burn the tokens we just need to call the burnERC721 function. The code for this is straightforward: let result = await maticPOSClient.burnERC721(childToken, tokenId, { from: user })  The expected output is something like this: { blockHash: '0x5e259cb402d7537b3d030e511865ab5e0aeb13416c72a52846fcceb2785788d8', blockNumber: 19748463, contractAddress: null, cumulativeGasUsed: 1088161, effectiveGasPrice: '0xb2d05e00', from: '0xd8f24d419153e5d03d614c5155f900f4b5c8a65c', gasUsed: 35319, logsBloom: '0x00000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000018020000000000000000000240000000000000000000000000008000000800001000000040000000100000000000000000000020000000000000400000800000000000000000080000010000000000000000000000000000000000000000000000000000000000000020000000000220000000000000000000000000000000000000000000000000000000000024800000002000000000001000000000000000000100000000000100000000060000010000000000000000000000000000000000000000000000000000000100000', status: true, to: '0xf6320326327c07759602423f01d8fad4af9e3f24', transactionHash: '0x09400584a1eabdf85fc491bbbfbc9d5283905478e76fd6a5d7d22bb63e0510fa', transactionIndex: 4, type: '0x0', events: { '0': { address: '0x0000000000000000000000000000000000001010', blockNumber: 19748463, transactionHash: '0x09400584a1eabdf85fc491bbbfbc9d5283905478e76fd6a5d7d22bb63e0510fa', transactionIndex: 4, blockHash: '0x5e259cb402d7537b3d030e511865ab5e0aeb13416c72a52846fcceb2785788d8', logIndex: 9, removed: false, id: 'log_8aa0a436', returnValues: Result {}, event: undefined, signature: null, raw: [Object] }, Approval: { address: '0xf6320326327c07759602423f01D8fad4AF9E3f24', blockNumber: 19748463, transactionHash: '0x09400584a1eabdf85fc491bbbfbc9d5283905478e76fd6a5d7d22bb63e0510fa', transactionIndex: 4, blockHash: '0x5e259cb402d7537b3d030e511865ab5e0aeb13416c72a52846fcceb2785788d8', logIndex: 7, removed: false, id: 'log_a24d5618', returnValues: [Result], event: 'Approval', signature: '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925', raw: [Object] }, Transfer: { address: '0xf6320326327c07759602423f01D8fad4AF9E3f24', blockNumber: 19748463, transactionHash: '0x09400584a1eabdf85fc491bbbfbc9d5283905478e76fd6a5d7d22bb63e0510fa', transactionIndex: 4, blockHash: '0x5e259cb402d7537b3d030e511865ab5e0aeb13416c72a52846fcceb2785788d8', logIndex: 8, removed: false, id: 'log_eb4348bf', returnValues: [Result], event: 'Transfer', signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', raw: [Object] } } }  Keep the transactionHash value. We should pass it to the exit function. ","version":null,"tagName":"h2"},{"title":"Exit​","type":1,"pageTitle":"How to transfer ERC-721 tokens to the Polygon (Matic) chain","url":"/Wisdom-Hub/blockchain/Polygon/PoS Bridge/erc721-pos-bridge#exit","content":"Once the checkpoint has been submitted, we can call the exitERC721 function with the transaction hash we got by calling burnERC721: Note that it may take some time for the checkpoint to get submitted and included. You can check if it is included or not by sending the block number to this API: https://apis.matic.network/api/v1/mumbai/block-included/THE_BLOCK_NUMBER await maticPOSClient.exitERC721( burnTxHash, // transactionHash: 0x09400584a1eabdf85fc491bbbfbc9d5283905478e76fd6a5d7d22bb63e0510fa { from: user } )  The expected output is something like this: { from: '0xD8f24D419153E5D03d614C5155f900f4B5C8A65C', gas: 285406, gasLimit: 285406, gasPrice: '10000000000', nonce: 74, chainId: 5, value: 0, to: '0xBbD7cBFA79faee899Eaf900F13C9065bF03B1A74', data: '0x3805550f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a25f90a228421989dd0b901a037f4568e3b7554bb03b542d686e68448de982f4a254613497c08d7cb1f8e445d73e51ba1b6d9045 . . . }  The full source code is: // main.js const HDWalletProvider = require(&quot;@truffle/hdwallet-provider&quot;) const { MaticPOSClient } = require(&quot;@maticnetwork/maticjs&quot;) const secrets = require(&quot;./secrets.json&quot;) let user = &quot;0xD8f24D419153E5D03d614C5155f900f4B5C8A65C&quot; let rootToken = &quot;0xcCE32d5A6B433972fA3Ff21233470D60ab7AFD6b&quot; // Goerli Contract Address let childToken = &quot;0xf6320326327c07759602423f01D8fad4AF9E3f24&quot; // Mumbai Contract Address let tokenId = 4 // Token ID const parentProvider = new HDWalletProvider(secrets.seed, secrets.goerli) // Goerli provider address const maticProvider = new HDWalletProvider(secrets.seed, secrets.mumbai) // DataHub Mumbai Testnet JSONRPC URL const maticPOSClient = new MaticPOSClient({ network: &quot;testnet&quot;, version: &quot;mumbai&quot;, parentProvider, maticProvider }); (async () =&gt; { try { // STEP 1: // let result = await maticPOSClient.burnERC721(childToken, tokenId, { // from: user // }) // console.log(result) // STEP 2: let burnTxHash = &quot;0x09400584a1eabdf85fc491bbbfbc9d5283905478e76fd6a5d7d22bb63e0510fa&quot; // result.transactionHash let result_2 = await maticPOSClient.exitERC721( burnTxHash, { from: user, encodeAbi: true, gasPrice: &quot;10000000000&quot; } ) console.log(result_2) } catch (error) { console.log(error) } })()  Transfer using Web UI Transferring assets through Web UI is pretty simple. Just like the SDK, there is the Approve and a Deposit steps. Open MintNFT Bridge Make sure Goerli Testnet is selected in Metamask Enter the contract address in Goerli and Mumbai, and ID of the token you want to transfer. We put 1 (MLBn) Click on Approve Then review the transaction details, like gas fees and the smart contract you are sending tokens to - before clicking on Confirm Now, wait until you receive confirmations. Metamask and the website both will send a notification. Now Click on Deposit Once the transaction is mined, the process is complete! It takes about 7 minutes to complete the transfer. As mentioned before Polygon needs about 5 minutes to sync. Conclusion Congratulations! By completing this tutorial you learned how to use the Polygon PoS Bridge. We have configured Metamask and Geth, to communicate with the Goerli testnet and the Mumbai testnet. We then mapped an ERC-721 contract between the networks so it can be transferred via the bridge. Finally, we called functions on the PoS Bridge contracts and moved our assets from Ethereum to Polygon. About The Author I'm mlibre, a random guy from the solar galaxy. I am interested in blockchain tech and find it very useful for lots of things. Feel free to check my Github ","version":null,"tagName":"h2"},{"title":"Docusaurus","type":0,"sectionRef":"#","url":"/Wisdom-Hub/docusaurus","content":"","keywords":"","version":null},{"title":"Install​","type":1,"pageTitle":"Docusaurus","url":"/Wisdom-Hub/docusaurus#install","content":"nano .gitignore node_modules npx create-docusaurus@latest docusaurus classic cd website # npx create-docusaurus@latest --help  ","version":null,"tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Docusaurus","url":"/Wisdom-Hub/docusaurus#configuration","content":"nano package.json &quot;mybuild&quot;: &quot;rm -r .docusaurus/; rm -r docs/; rm -rf ../docs; cp -r ../Contents docs/; docusaurus build; cp -r build ../docs&quot; nano docusaurus.config.js # Visit https://github.com/mlibre/Wisdom-Hub/blob/master/website/docusaurus.config.js  ","version":null,"tagName":"h2"},{"title":"Run​","type":1,"pageTitle":"Docusaurus","url":"/Wisdom-Hub/docusaurus#run","content":"# Starts the development server. npm start # Bundles your website into static files for production into the &quot;build&quot; folder npm run build # Build website for github pages npm run mybuild # Serves the built website locally npm run serve # Publishes the website to GitHub pages npm deploy  ","version":null,"tagName":"h2"},{"title":"Github Actions​","type":1,"pageTitle":"Docusaurus","url":"/Wisdom-Hub/docusaurus#github-actions","content":"mkdir -p .github/workflows nano .github/workflows/npm.yml  name: Generate Docs Folder on: push: branches: ['master'] jobs: build: name: Make Website runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: 20.x - name: Build docs working-directory: ./docusaurus run: npm install; npm run mybuild - name: Commit and push changes run: | git config --global user.name &quot;mlibre&quot; git config --global user.email &quot;m.gh@linuxmail.org&quot; git config --global core.autocrlf input git config --global core.fileMode false git config core.autocrlf input git config core.fileMode false git add . git commit -m &quot;Build docs&quot; git push  ","version":null,"tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"Docusaurus","url":"/Wisdom-Hub/docusaurus#troubleshooting","content":"Refresh the git repo, if anything is wrong with it: git config --global user.name &quot;mlibre&quot; git config --global user.email &quot;m.gh@linuxmail.org&quot; git config --global core.autocrlf input git config --global core.fileMode false git config core.autocrlf input git config core.fileMode false git add --renormalize . git commit -m &quot;Build docs&quot; git push  ","version":null,"tagName":"h2"},{"title":"Resources​","type":1,"pageTitle":"Docusaurus","url":"/Wisdom-Hub/docusaurus#resources","content":"Website: https://docusaurus.io/docs ","version":null,"tagName":"h2"},{"title":"Learn Linux","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/","content":"","keywords":"","version":null},{"title":"Tutorials​","type":1,"pageTitle":"Learn Linux","url":"/Wisdom-Hub/linux/#tutorials","content":"This repository is organized into several sections, each containing tutorials for specific topics. Here's a brief overview: Access and PermissionDisk and FileSystemdLog and MonitoringShell-scriptingTextProcessesMultimediaToolsOther ","version":null,"tagName":"h2"},{"title":"My ETH Address​","type":1,"pageTitle":"Learn Linux","url":"/Wisdom-Hub/linux/#my-eth-address","content":"0xc9b64496986E7b6D4A68fDF69eF132A35e91838e ","version":null,"tagName":"h2"},{"title":"General","type":0,"sectionRef":"#","url":"/Wisdom-Hub/Health","content":"General Avoid processed foods: sausages, processed or industrial sauces and oils, Processed drinks (soda, industrial malt, etc.) Avoid artificial sweeteners and added sugar: processed chocolate milk, processed banana milk, processed fruit juice, and other artificially made combinations that contain unhealthy additives such as refined or added sugar and preservatives. These refined sugar weaken the immune system and have other negative effects Limit daily milk intake to one glass maximum. Mixed with honey. Drinking more than one glass can be harmful. Use bran bread: The bran is the outer layer of the grain and is rich in fiber, vitamins, minerals, and antioxidants. It provides essential nutrients like B vitamins, iron, magnesium, and dietary fiber Do not drink water with meals. From half an hour before the meal to 1.5 hours after the meal. It puts pressure on the stomach. Avoid straining to poop, as it can put pressure on the stomach. Maintain your body's energy. Avoid self-indulgence and masturbation, as it weakens the body. Reduce stress levels, as stress weakens the immune system. Going to bed late is not good for digestion. you should be Sleep by 11 max. Sleep properly. Lie on your back or side, but not on your stomach. Proper posture when sitting Walking for at least 10 minutes in the sun before or after noon. Take a shower at least twice a week. Showering is also exercise for your muscles. Back, Neck, and Body Do daily light core exercises. Perform a few sessions per day, such as 4 sessions.Do isometric neck exercises to strengthen your neck muscles. make sure your head is not in the middle. For example, if you are doing resistance exercise in front of your head, your head better be slightly bent forward. Do this for all directions. several sessions per day, such as 3 sessions. Each movement 10 seconds or 10 repetitions.Stay active and avoid keeping your neck still. Move your neck every 30 minutes.Limit work to a maximum of 6 hours per day.Avoid impact. Avoid carrying heavy bagsAvoid bumps and cars with weak shock absorbers.Avoid bending your neck backward too much or keeping your neck bent backward for extended periods FoodsMattresses: A medium-firm mattress is generally considered to be the best option. This is because it provides enough support to keep the spine in alignment, without being too firm that restrict your movement and may causing pain, or too soft and causing sinking and misalignment Juice Strawberry juicePineapple juiceApple juicePomegranate juiceMulberry juiceCarrot juice Foods Sesame seedsFigsBananasLentilsHoney Drinks Honey boiled with lukewarm water + Chia seedHoney with warm boiled water + Rose waterHoney with lukewarm boiled water + lemon disinfection 10 minutes of breathing onion or mint fumes. 3 onionsLemon and honey","keywords":"","version":null},{"title":"Access","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/access","content":"","keywords":"","version":null},{"title":"whoami, id, groups, users​","type":1,"pageTitle":"Access","url":"/Wisdom-Hub/linux/access#whoami-id-groups-users","content":"Command\tShort Descriptionwhoami\tPrint current user's name id\tPrint user and group information groups\tPrint group memberships groups username\tShow groups for a specific user users\tShow a list of all logged-in users cat /etc/passwd\tinformation about system users cat /etc/group\tinformation about groups cat /etc/shadow\tencrypted password hashes for user accounts ","version":null,"tagName":"h2"},{"title":"chmod​","type":1,"pageTitle":"Access","url":"/Wisdom-Hub/linux/access#chmod","content":"Command\tShort Descriptionchmod\tChange file permissions chmod +x file\tAdd execute permission to a file chmod -w file\tRemove write permission from a file chmod 644 file\tSet read and write for owner, read for group and others chmod -R 755 dir\tRecursively set permission chmod u=rwx,g=rx,o=rx file\tSet specific permissions for user, group, and others chmod u+s executable\tSet the setuid bit on an executable chmod g+s executable\tSet the setgid bit on an executable chmod a=-r file\tRemove read permission for all (owner, group, and others) chmod -x $(find /path -type f)\tRemove execute permission of all files in directory and its sub find /path -type f -exec chmod -x {} \\;\tAlternative to above command find /path -type f -print0 | xargs -0 chmod -x\tAlternative to above command a+x will set all the x bits of the file +x will set all the x bits of the file that are not present in the umask -print0 tells find to print the results separated by null characters, instead of spaces or newlines. This is useful for safely handling filenames that might contain spaces or special characters -0 tells xargs to expect input separated by null characters, and not by spaces or newlines. It ensures that xargs correctly processes the list of files provided by find ","version":null,"tagName":"h2"},{"title":"chown, chgrp, newgrp​","type":1,"pageTitle":"Access","url":"/Wisdom-Hub/linux/access#chown-chgrp-newgrp","content":"Command\tShort Descriptionchown user file\tChange the owner of a file chown user:group file\tChange the owner and group of a file chown -R user:group directory\tRecursively change the owner and group of a directory and its contents chown -c user:group file\tChange the ownership, show a message if the ownership changes chgrp\tChange group ownership of files and directories. chgrp groupname file.txt\tChange the group ownership of file.txt to groupname. chgrp -R groupname /path/to/directory\tRecursively change group ownership to groupname. chgrp --reference=file.txt test.txt\tChange group ownership of test.txt to match that of file.txt. newgrp\tChange the user primary group (default) newgrp staff\tSwitch to the 'staff' group ","version":null,"tagName":"h2"},{"title":"SUID, GUID​","type":1,"pageTitle":"Access","url":"/Wisdom-Hub/linux/access#suid-guid","content":"When the SUID permission is set on an executable file, it means that when a regular user runs that executable, it will run with the permissions of the file's owner instead of the user who is executing it. when any user executes the /usr/bin/passwd command, it runs with the elevated permissions of the root user. This is necessary because changing a user's password requires write access to the /etc/shadow file, which is typically only accessible by the root user for security reasons. The /etc/shadow file is owned by the root user and has restrictive permissions (e.g., readable and writable only by the root user). This means regular users do not have the necessary permissions to modify the file. ls -l /usr/bin/passwd -rwsr-xr-x 1 root root 51552 Jan 25 2023 /usr/bin/passwd  ","version":null,"tagName":"h2"},{"title":"Sticky bit​","type":1,"pageTitle":"Access","url":"/Wisdom-Hub/linux/access#sticky-bit","content":"The sticky bit on a directory ensures that only the owner of a file within that directory (or the superuser) can modify, delete or rename that file, even if others have write permissions on the directory or the files. Imagine you have a /tmp directory on a Linux system with the sticky bit set: chmod +t /tmp  In this setup: Alice can delete files she creates in /tmpBob can delete files he creates in /tmpOther users cannot delete files created by Alice or Bob in /tmp, enhancing file security in shared directories like /tmp ","version":null,"tagName":"h2"},{"title":"umask​","type":1,"pageTitle":"Access","url":"/Wisdom-Hub/linux/access#umask","content":"umask is a Linux command that controls the default permissions for newly created files and directories umask # 0022  For files: 666 - 0022 = 0644For directories: 777 - 0022 = 0755 # read and write permissions to the owner and remove all permissions for others and groups on newly created files: umask u=rw,go= # remove write permissions for the users, group and others on newly created directories: umask ugo-w  ","version":null,"tagName":"h2"},{"title":"Log","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/log-monitoring","content":"","keywords":"","version":null},{"title":"dmesg​","type":1,"pageTitle":"Log","url":"/Wisdom-Hub/linux/log-monitoring#dmesg","content":"The dmesg command is used to display the kernel ring buffer. By default it read the messaged from /dev/kmsg, that provides access to the kernel ring buffer. dmesg sudo dmesg --level=emerg,alert,crit,err  ","version":null,"tagName":"h2"},{"title":"journalctl​","type":1,"pageTitle":"Log","url":"/Wisdom-Hub/linux/log-monitoring#journalctl","content":"journalctl is a command-line utility for viewing and querying logs from the systemd journal, a system logging service commonly used in modern Linux distributions sudo systemctl restart systemd-journald.service  Description\tCommandKernel Logs\tjournalctl -k Systemd Logs (Live)\tjournalctl -f Current Boot Logs (Inlcuding kernel logs)\tjournalctl -b Monitor Boot Logs\tjournalctl -b -f Boot Logs with priority level of &quot;err&quot;\tjournalctl -b -p err Unit Files Logs\tjournalctl -u sshd.service Verbose\tjournalctl -u sshd.service -x Flush Journal Logs\tjournalctl --flush ","version":null,"tagName":"h2"},{"title":"Log Level​","type":1,"pageTitle":"Log","url":"/Wisdom-Hub/linux/log-monitoring#log-level","content":"Log Level refers to the severity or importance of the log messages generated by various components of the system P\tLevel\tDescription0\temerg\tSystem is unusable 1\talert\tAction must be taken immediately 2\tcrit\tCritical conditions 3\terr\tError conditions 4\twarning\tWarning conditions 5\tnotice\tNormal but significant condition 6\tinfo\tInformational messages 7\tdebug\tDebug-level messages ","version":null,"tagName":"h3"},{"title":"Syslog​","type":1,"pageTitle":"Log","url":"/Wisdom-Hub/linux/log-monitoring#syslog","content":"It is a standard for recording events in a computer system. ","version":null,"tagName":"h2"},{"title":"rsyslog​","type":1,"pageTitle":"Log","url":"/Wisdom-Hub/linux/log-monitoring#rsyslog","content":"rsyslog is a free and open source syslog implementation. ","version":null,"tagName":"h3"},{"title":"lastlog​","type":1,"pageTitle":"Log","url":"/Wisdom-Hub/linux/log-monitoring#lastlog","content":"The lastlog command displays the last login times and information for all users on the system. It provides details such as the username, port, and timestamp of the last login for each user. It reads the /var/log/lastlog binary file to retrieve this information. lastlog Username Port From Latest root **Never logged in** nobody **Never logged in** dbus **Never logged in** bin **Never logged in** mlibre pts/2 127.0.0.1 Sun Aug 20 22:39:47 +0330 2023  ","version":null,"tagName":"h2"},{"title":"Disk","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/disk-file","content":"","keywords":"","version":null},{"title":"fdisk, gdisk, parted, mkfs, mkswap, lsblk​","type":1,"pageTitle":"Disk","url":"/Wisdom-Hub/linux/disk-file#fdisk-gdisk-parted-mkfs-mkswap-lsblk","content":"Command\tShort Descriptionlsblk -af\tall devices + empty ones with infomration sudo blkid -o list\tList devices in a machine-readable format blkid /dev/sda1\tRetrieve information about /dev/sda1 sudo fdisk -l\tList partitions on all disks sudo fdisk -l /dev/sdb\tList partitions on /dev/sdb sudo fdisk /dev/sda\tLaunch fdisk for /dev/sda gdisk\tGPT disk partitioning utility sudo gdisk /dev/sda\tLaunch gdisk for /dev/sda parted\tDisk partitioning tool with more features sudo parted /dev/sda\tLaunch parted for /dev/sda mkfs.ext4 /dev/sdb1\tCreate an ext4 file system on /dev/sdb1 mkfs -t ntfs /dev/sdd1\tCreate a VFAT File System on /dev/sdd1 sudo mkswap /dev/sdc1\tCreate swap on /dev/sdc1 ","version":null,"tagName":"h2"},{"title":"df, du, fsck, tune2fs​","type":1,"pageTitle":"Disk","url":"/Wisdom-Hub/linux/disk-file#df-du-fsck-tune2fs","content":"Command\tShort Descriptiondu -sh /path/to/dir\tDisplay disk usage summary for a directory du -hd 1 /path/to/dir\tDisplay disk usage for each subdirectory in the specified directory df -h\tDisplay disk usage for all mounted filesystems in readable format df -hiT\tDisplay disk space usage with inodes and file system type sudo fsck /dev/sda1\tCheck and repair the file system on /dev/sda1 sudo fsck -y /dev/sdb2\tAutomatically repair the file system on /dev/sdb2 sudo fsck -C /dev/sdc1\tDisplay progress while checking and repairing /dev/sdc1 sudo fsck.ext4 -yvfBcD /dev/sda4\tCheck and repair /dev/sda4 tune2fs -l /dev/sda1\tDisplay detailed filesystem information for /dev/sda1 ","version":null,"tagName":"h2"},{"title":"mount, umount​","type":1,"pageTitle":"Disk","url":"/Wisdom-Hub/linux/disk-file#mount-umount","content":"Command\tShort Descriptionmount\tlist of currently mounted file systems mount /dev/sda1 /mnt\tMounts the partition /dev/sda1 to the /mnt directory mount /dev/sda1\tMounts a device defined in /etc/fstab mount -o loop image.iso /mnt/iso\tMounts an ISO image file as a loop device to the /mnt/iso directory umount /mnt\tUnmounts the file system mounted at /mnt umount -l /mnt\tLazy unmount, detaches the file system only when it's no longer in use mount UUID=1...AB /mnt/uuid\tMounts file system using its UUID to the /mnt/uuid ","version":null,"tagName":"h2"},{"title":"ln​","type":1,"pageTitle":"Disk","url":"/Wisdom-Hub/linux/disk-file#ln","content":"Command\tShort Descriptionln -s source_file link_name\tCreate a symbolic link to a file or directory ln source_file hard_link_name\tCreate a hard link to a file ","version":null,"tagName":"h2"},{"title":"rsync​","type":1,"pageTitle":"Disk","url":"/Wisdom-Hub/linux/disk-file#rsync","content":"Option\tDescription-a\tArchive mode (recursive, permissions, etc.) -r\tSync recursively -e\tSpecify the remote shell to use -v\tVerbose output --progress\tShow progress during transfer -z\tCompress data during transfer --delete\tDelete extraneous files on the receiving side -A\tPreserve ACLs (Access Control Lists) -X\tPreserve extended attributes -H\tPreserve hard links -n\tPerform a dry run # Backup local directory to another location rsync -avz /path/to/source /path/to/destination # Backup local directory to remote server rsync -avz /path/to/local/directory user@remote.server:/path/to/remote/directory # Backup local directory to remote server, deleting files on remote server if they are deleted locally rsync -avz --delete /path/to/local/directory user@remote.server:/path/to/remote/directory # Create a full backup of the system to an external drive sudo rsync -aAXHv --exclude={&quot;/dev/*&quot;,&quot;/proc/*&quot;,&quot;/sys/*&quot;,&quot;/tmp/*&quot;,&quot;/run/*&quot;,&quot;/mnt/*&quot;,&quot;/var/*&quot;,&quot;/media/*&quot;,&quot;/usr/*&quot;,&quot;/lib/*&quot;,&quot;/lib64/&quot;,&quot;/lost+found&quot;,&quot;/swapfile&quot;,&quot;.npm*&quot;,&quot;.npm/*&quot;,&quot;node_modules*&quot;,&quot;node_modules/*&quot;,&quot;mesa_shader_cache*&quot;,&quot;steamapps*&quot;,&quot;Data*&quot;,&quot;Steam*&quot;} / /run/media/mlibre/H/OS/full-copy/ # Backup to a server rsync -e &quot;ssh -p 2222&quot; source/ user@host:/destination/  ","version":null,"tagName":"h2"},{"title":"dd​","type":1,"pageTitle":"Disk","url":"/Wisdom-Hub/linux/disk-file#dd","content":"Command\tShort Descriptiondd\tCopy and convert files dd if=input of=output bs=block_size\tCopy data from 'input' to 'output' with specified block size dd if=/dev/zero of=zerofile bs=1M count=100\tCreate a 100MB zero-filled file dd if=input of=output bs=512 count=1 skip=2\tCopy 512 bytes from 'input' to 'output' starting from byte 1024 dd if=/dev/random of=randomfile bs=1M count=1\tGenerate a 1MB file filled with random data dd if=input | gzip &gt; backup.dd.gzip\tCompress 'input' data using 'gzip' and save as 'backup.dd.gzip' dd if=ubuntu.iso of=/dev/sdX bs=4M status=progress\tWrite 'ubuntu.iso' to a USB drive ('/dev/sdX') ","version":null,"tagName":"h2"},{"title":"Backup using locate​","type":1,"pageTitle":"Disk","url":"/Wisdom-Hub/linux/disk-file#backup-using-locate","content":"sudo tar -czvf backup.tar.gz $(locate x-ui) sudo tar -czvf backup.tar.gz $(locate x-ui) /root/ sudo tar -czvf backup.tar.gz $(locate x-ui) /root/cert /root/cert.crt /root/private.key /root/.acme.sh sudo tar xvf backup.tar.gz -C / # Extract in root directory  ","version":null,"tagName":"h2"},{"title":"multimedia","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/multimedia","content":"","keywords":"","version":null},{"title":"Make a startup script using XDG startup​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#make-a-startup-script-using-xdg-startup","content":"mkdir -p ~/.config/autostart nano ~/.config/autostart/gamma_on_startup.desktop  [Desktop Entry] Name=gamma-on-startup Type=Application Exec=bash -c &quot;/usr/local/bin/gamma_on_startup &amp;&gt; /dev/null&quot; Terminal=true  desktop-file-validate ~/.config/autostart/gamma_on_startup.desktop chmod +x ~/.config/autostart/gamma_on_startup.desktop  Example program: sudo chmod a+rwx /usr/local/bin/ nano /usr/local/bin/gamma_on_startup sleep 5 export DISPLAY=:0 xrandr --output HDMI-A-0 --brightness 0.70 --gamma 0.70:0.70:0.70  sudo chmod a+rwx /usr/local/bin/gamma_on_startup  ","version":null,"tagName":"h2"},{"title":"Font​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#font","content":"","version":null,"tagName":"h2"},{"title":"Locations​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#locations","content":"~/.local/share/fonts//usr/local/share/fonts//usr/share/fonts/ ","version":null,"tagName":"h3"},{"title":"List​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#list","content":"List installed fonts fc-match -a fc-list NotoSansBengali-Light  ","version":null,"tagName":"h3"},{"title":"Cache​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#cache","content":"sudo rm -v /var/cache/fontconfig/* fc-cache -r  ","version":null,"tagName":"h3"},{"title":"Resetting KDE​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#resetting-kde","content":"qdbus org.kde.KWin /Compositor suspend; rm ~/.cache/ksycoca5*; kquitapp5 plasmashell; killall plasmashell; kstart5 plasmashell;  ","version":null,"tagName":"h2"},{"title":"Disable KDE desktop effects​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#disable-kde-desktop-effects","content":"qdbus org.kde.KWin /Compositor suspend ## qdbus org.kde.KWin /Compositor resume xset -dpms xset s off  ","version":null,"tagName":"h3"},{"title":"Resetting sound, audio​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#resetting-sound-audio","content":"systemctl --user restart pulseaudio # OR pulseaudio --kill pulseaudio --start  ","version":null,"tagName":"h2"},{"title":"Changing monitor or screen Brightness and Gamma​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#changing-monitor-or-screen-brightness-and-gamma","content":"# List available outputs xrandr # Screen 0: minimum 320 x 200, current 2560 x 1440, maximum 16384 x 16384 # DisplayPort-0 disconnected (normal left inverted right x axis y axis) # HDMI-A-0 connected primary 2560x1440+0+0 (normal left inverted right x axis y axis) 621mm x 341mm # 3840x2160 60.00 + 50.00 59.94 30.00 30.00 25.00 24.00 29.97 23.98 # 2560x1600 59.97 # 2560x1440 59.95* # Change the brightness and gamma of the HDMI-A-0 output xrandr --output HDMI-A-0 --brightness 0.70 --gamma 0.70:0.70:0.70  ","version":null,"tagName":"h2"},{"title":"Vulkan​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#vulkan","content":"sudo pacman -S vulkan-radeon lib32-vulkan-radeon  sudo nano /etc/environment VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json  ","version":null,"tagName":"h2"},{"title":"Steam​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#steam","content":"","version":null,"tagName":"h2"},{"title":"Fix common bugs​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#fix-common-bugs","content":"Move Games to your local linux machineDisable steam overlay, steam inputs, ...Link NTFS game folder sudo mkdir -p /media/gamedisk sudo blkid ## FA709D69709D2CFF id -u ## 1000 id -g ## 1000 sudo nano /etc/fstab UUID=FA709D69709D2CFF /media/gamedisk ntfs uid=1000,gid=1000,rw,user,exec,umask=000 0 0 ## UUID=FA709D69709D2CFF /media/gamedisk lowntfs-3g uid=1000,gid=1000,rw,user,exec,umask=000 0 0 mkdir -p ~/.steam/steam/steamapps/compatdata sudo reboot ln -s ~/.steam/steam/steamapps/compatdata /media/gamedisk/Steam/steamapps/  ","version":null,"tagName":"h3"},{"title":"Scaling Interface​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#scaling-interface","content":"Run Steam like this: STEAM_FORCE_DESKTOPUI_SCALING=1.5 steam-runtime  ","version":null,"tagName":"h3"},{"title":"Run using proxy​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#run-using-proxy","content":"proxychains steam steam://rungameid/100  ","version":null,"tagName":"h3"},{"title":"lutris​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#lutris","content":"","version":null,"tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#installation","content":"sudo pacman -S telegram-desktop lutris vkd3d tsocks proxychains  ","version":null,"tagName":"h3"},{"title":"With Proxy​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#with-proxy","content":"sudo nano /etc/tsocks.conf server = 127.0.0.1 server_port = 1080 server_type = 5 tsocks lutris  ## make sure proxy_dns is commneted proxychains lutris  ","version":null,"tagName":"h3"},{"title":"Proxy per game​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#proxy-per-game","content":"# Check show advanced options # Put /usr/bin/tsocks in # Game -&gt; configuration -&gt; System options -&gt; command prefix  ","version":null,"tagName":"h3"},{"title":"Fix Unexpected wine errors​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#fix-unexpected-wine-errors","content":"rm -r ~/.wine  ","version":null,"tagName":"h3"},{"title":"AMDGPU​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#amdgpu","content":"","version":null,"tagName":"h2"},{"title":"TearFree, EnablePageFlip, DRI3​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#tearfree-enablepageflip-dri3","content":"# settings files /usr/share/X11/xorg.conf.d/ /etc/X11/xorg.conf.d/ sudo nano /usr/share/X11/xorg.conf.d/10-amdgpu.conf Section &quot;OutputClass&quot; Identifier &quot;AMDgpu&quot; MatchDriver &quot;amdgpu&quot; Driver &quot;amdgpu&quot; Option &quot;TearFree&quot; &quot;true&quot; Option &quot;DRI&quot; &quot;3&quot; Option &quot;EnablePageFlip&quot; &quot;on&quot; EndSection cat /var/log/Xorg.0.log | grep -i tear  ","version":null,"tagName":"h3"},{"title":"Reducing DRI latency​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#reducing-dri-latency","content":"sudo nano /etc/drirc &lt;driconf&gt; &lt;device&gt; &lt;application name=&quot;Default&quot;&gt; &lt;option name=&quot;vblank_mode&quot; value=&quot;0&quot; /&gt; &lt;/application&gt; &lt;/device&gt; &lt;/driconf&gt;  ","version":null,"tagName":"h3"},{"title":"check xorg config file​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#check-xorg-config-file","content":"sudo Xorg -config /usr/share/X11/xorg.conf.d/10-amdgpu.conf  ","version":null,"tagName":"h3"},{"title":"Blocking radon​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#blocking-radon","content":"sudo nano /etc/modprobe.d/radeon.conf blacklist radeon  ","version":null,"tagName":"h3"},{"title":"Install AMDGPU-PRO​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#install-amdgpu-pro","content":"# https://wiki.archlinux.org/title/AMDGPU_PRO pamac install vulkan-amdgpu-pro lib32-vulkan-amdgpu-pro pamac install amdgpu-pro-oglp lib32-amdgpu-pro-oglp # pamac install amdgpu-pro-libgl lib32-amdgpu-pro-libgl # pamac install opencl-amd # pamac install amf-amdgpu-pro glxinfo | grep &quot;OpenGL vendor string&quot; lspci -v | grep -A 10 VGA vk_pro steam  ","version":null,"tagName":"h3"},{"title":"Uninstall AMDGPU-PRO​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#uninstall-amdgpu-pro","content":"pacman -R $(pacman -Qg Radeon_Software_for_Linux | cut -f2 -d&quot; &quot;)  ","version":null,"tagName":"h3"},{"title":"Blacklist Radeon​","type":1,"pageTitle":"multimedia","url":"/Wisdom-Hub/linux/multimedia#blacklist-radeon","content":"sudo nano /etc/modprobe.d/radeon.conf blacklist radeon  ","version":null,"tagName":"h3"},{"title":"process","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/processes","content":"","keywords":"","version":null},{"title":"Other","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/other","content":"","keywords":"","version":null},{"title":"GRUB​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#grub","content":"File: /etc/default/grub/etc/grub.d//boot/grub/grub.cfg/boot/efi/EFI//boot/grub/x86_64-efi/ ","version":null,"tagName":"h2"},{"title":"Regenerate grub.cfg​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#regenerate-grubcfg","content":"sudo grub-mkconfig -o /boot/grub/grub.cfg  ","version":null,"tagName":"h3"},{"title":"Fixing broken grub​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#fixing-broken-grub","content":"Easy method using Manjaro Live​ Boot a live Manjaro image sudo manjaro-chroot -a grub-install update-grub  It will detect your current installed linux. Restart the computer and it will boot the installed linux. Then run: update-grub  General method​ # Mount the file system and efi partition sudo mount /dev/nvme0n1p4 /mnt sudo mount --bind /dev /mnt/dev sudo mount --bind /dev/pts /mnt/dev/pts sudo mount --bind /proc /mnt/proc sudo mount --bind /sys /mnt/sys sudo mkdir /efi sudo mount /dev/nvme0n1p1 /efi # Install grub and update grub configuration sudo grub-install --root-directory=/mnt/ /dev/nvme0 --efi-directory=/efi --target=x86_64-efi --recheck sudo chroot /mnt sudo blkid -s UUID -o value /dev/nvme0n1p1 nano /etc/fstab sudo update-grub  ","version":null,"tagName":"h3"},{"title":"Autostart​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#autostart","content":"","version":null,"tagName":"h2"},{"title":"Init​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#init","content":"the init command refers to the process initialization system. It's the first process that gets started by the kernel during system boot, and it's assigned the process ID (PID) of 1 which init # Output: /usr/bin/init readlink -f /usr/bin/init # Output: /usr/lib/systemd/systemd ps -p 1 # Output: # PID TTY TIME CMD # 1 ? 00:00:01 systemd pstree -p 1 # Output: # systemd(1)─┬─...  ","version":null,"tagName":"h3"},{"title":"Scripts and programs locations​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#scripts-and-programs-locations","content":"nano .profilenano /etc/profilenano ~/.bash_profilenano .bashrcnano /etc/bash.bashrcls /etc/profile.d/ls ~/.config/autostartls /etc/xdg/autostartls /usr/share/xsessionsls -1 /lib/systemd/system/.service /etc/systemd/system/.servicels usr/share/dbus-1/system-services/sudo systemctl list-unit-files --type=service --state=enabled --allls /etc/init.d/nano ~/.xinitrcnano /etc/X11/xinit/xinitrcls /etc/X11/xinit/xinitrc.d/cat ~/.xserverrcls /etc/pam.d/ls /etc/rc*cat /etc/xdg/lxsession/LXDE/autostartls ~/.config/lxsession/LXDE/autostartcrontab -esudo crontab -els -rla /etc/cron.*cat /usr/lib/sddm/sddm.conf.d/default.confcat /etc/sddm.conf.d/00_manjaro_settings.conf ","version":null,"tagName":"h3"},{"title":"Automatic Shutdown​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#automatic-shutdown","content":"Command\tDescriptionshutdown now\tShutdown the system immediately. shutdown -h +5\tShutdown the system in 5 minutes. shutdown -r now\tReboot the system immediately. shutdown -r +10\tReboot the system in 10 minutes. shutdown -H now\tHalt the system immediately. shutdown +5\tShutdown the system in 5 minutes. ","version":null,"tagName":"h2"},{"title":"Reading symlinks​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#reading-symlinks","content":"readlink /bin/init # ../lib/systemd/systemd  ","version":null,"tagName":"h3"},{"title":"System Info​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#system-info","content":"uname -a  ","version":null,"tagName":"h3"},{"title":"Performance​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#performance","content":"","version":null,"tagName":"h2"},{"title":"Disable Linux Watchdogs, compaction and more​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#disable-linux-watchdogs-compaction-and-more","content":"sudo systemctl start systemd-sysctl.service sudo systemctl enable systemd-sysctl.service sudo nano /etc/sysctl.conf # And sudo nano /etc/sysctl.d/sys.conf net.ipv4.tcp_fastopen=3 net.ipv4.ip_forward=1 kernel.nmi_watchdog=0 kernel.watchdog=0 vm.compaction_proactiveness=0 vm.zone_reclaim_mode=0 vm.page_lock_unfairness=1 kernel.perf_event_paranoid=-1 fs.inode-nr=200000 vm.dirty_background_ratio=5 vm.vfs_cache_pressure=50 net.ipv4.tcp_max_syn_backlog=8192 net.ipv4.tcp_tw_reuse=1 vm.min_free_kbytes=2500000  ","version":null,"tagName":"h3"},{"title":"Improve fstab, ssd, nvme performance​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#improve-fstab-ssd-nvme-performance","content":"sudo nano /etc/fstab UUID=f74c37b2-8a12-4252-90a6-d31504507bcb / ext4 defaults,noatime,nodiratime,commit=60,barrier=0 0 1  sudo nano /etc/udev/rules.d/60-ioschedulers.rules ACTION==&quot;add|change&quot;, KERNEL==&quot;nvme[0-9]n[0-9]&quot;, ATTR{queue/scheduler}=&quot;none&quot;  ","version":null,"tagName":"h3"},{"title":"Disabling journaling​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#disabling-journaling","content":"sudo tune2fs -f -O &quot;^has_journal&quot; /dev/sda2  ","version":null,"tagName":"h3"},{"title":"Journal Size​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#journal-size","content":"sudo nano /etc/systemd/journald.conf SystemMaxUse=100M sudo systemctl restart systemd-journald  ","version":null,"tagName":"h3"},{"title":"Manjaro​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#manjaro","content":"","version":null,"tagName":"h2"},{"title":"Things to do before installing​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#things-to-do-before-installing","content":"Backup important data. Recovery-keys, Passwords, Postman and ...  cp -rf /home/mlibre/.local/share/TelegramDesktop /run/media/mlibre/D/linux/caches cp $HISTFILE /run/media/mlibre/D/linux/caches/ sudo cp -r /etc /run/media/mlibre/D/caches/ # Or full backup sudo rsync -aAXHv --exclude={&quot;/dev/*&quot;,&quot;/proc/*&quot;,&quot;/sys/*&quot;,&quot;/tmp/*&quot;,&quot;/run/*&quot;,&quot;/mnt/*&quot;,&quot;/var/*&quot;,&quot;/media/*&quot;,&quot;/usr/*&quot;,&quot;/lib/*&quot;,&quot;/lib64/&quot;,&quot;/lost+found&quot;,&quot;/swapfile&quot;,&quot;.npm*&quot;,&quot;.npm/*&quot;,&quot;node_modules*&quot;,&quot;node_modules/*&quot;,&quot;mesa_shader_cache*&quot;,&quot;steamapps*&quot;,&quot;Data*&quot;,&quot;Steam*&quot;} / /run/media/mlibre/D/Linux/backup/  Mark EFI partition while installing Manjaro/Arch Linux as /boot/efi. Don't check Format option. ","version":null,"tagName":"h3"},{"title":"Things to do after installing​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#things-to-do-after-installing","content":"Remove and disable unnecessary packages echo &quot;$USER ALL=(ALL:ALL) NOPASSWD: ALL&quot; | sudo tee /etc/sudoers.d/$USER sudo systemctl disable pamac-daemon sudo systemctl disable pamac-mirrorlist.timer sudo systemctl disable pamac-mirrorlist.service sudo pacman -R manjaro-hello web-installer-url-handler matray print-manager samba kdenetwork-filesharing thunderbird hplip cups yakuake manjaro-printer gutenprint cups-pdf snapd libpamac-snap-plugin flatpak libpamac-flatpak-plugin bluedevil timeshift timeshift-autosnap-manjaro pamac-tray-icon-plasma kdeconnect vde2 qemu-common qemu-system-arm qemu-user-static-binfmt qemu-system-arm-firmware scrcpy ## or echo &quot;manjaro-hello web-installer-url-handler matray print-manager samba kdenetwork-filesharing thunderbird hplip cups yakuake manjaro-printer gutenprint cups-pdf snapd libpamac-snap-plugin flatpak libpamac-flatpak-plugin bluedevil timeshift timeshift-autosnap-manjaro pamac-tray-icon-plasma kdeconnect vde2 qemu-common qemu-system-arm qemu-user-static-binfmt qemu-system-arm-firmware scrcpy&quot; | xargs -d &quot; &quot; -I {} sudo pacman --noconfirm -R {} Pacman downloads parallel sudo nano /etc/pacman.conf ParallelDownloads = 5 Upgrade pamac update --force-refresh pamac update -a sudo pacman-mirrors --fasttrack sudo pacman -Syyuu sudo pacman -S mlocate telegram-desktop unzip thermald ntfs-3g firefox vlc aria2 sudo pacman -S qbittorrent libreoffice-fresh meld ttf-ubuntu-font-family gnome-keyring libsecret core/iputils clinfo tor torsocks steam-native-runtime gparted sudo pacman -S clamav sudo systemctl enable --now thermald.service sudo updatedb pamac install visual-studio-code-bin onlyoffice-bin Import Data cp -r /run/media/mlibre/H/OS/caches/TelegramDesktop /home/mlibre/.local/share/ Make an XDG autostart script for gamma adjustment Put the gamma script in the .bashrc and .zshrc as well Remove Mainspring from startups. Use 24-hour clock. Uncheck automatically load images. Disabsetle mail signature KDE Settings -&gt; Disable Mouse acceleration KDE Settings -&gt; Startup and Shutdown: Start with empty session, Choose KDE Screen Saver, Review background services and Autostarts. KDE Settings -&gt; Appearance -&gt; Theme -&gt; Breeze Dark, Breath Dark KDE Settings -&gt; Appearance -&gt; Font -&gt; Enabled Anti-Aliasing, RGB, Slight. all +1 PT KDE Settings -&gt; Workspace -&gt; Search -&gt; Disable Web Search Keywords KDE Settings -&gt; Workspace Behavior -&gt; Activities -&gt; Privacy -&gt; Dont remember soft KDE Settings -&gt; Search for kRunner -&gt; settings -&gt; uncheck all Pin Firefox, Terminal, ProtonVPN, Kate and VSCode to the panel Software Center: Disable automatic updates, Add AUR support Remove Virtual Desktops Make a Swapfile sudo dd if=/dev/zero of=/swapfile bs=1M count=4096 status=progress sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile cat /etc/fstab sudo bash -c &quot;echo /swapfile none swap defaults 0 0 &gt;&gt; /etc/fstab&quot; sudo nano /etc/sysctl.conf ## vm.swappiness=10  Fix time difference between linux and windows sudo timedatectl set-local-rtc 1 --adjust-system-clock ## sudo timedatectl set-local-rtc 1 sudo ntpdate time.nist.gov ## update time Firefox: Enable DNS over HTTPS Enable automatic mounting of external drives: Settings -&gt; Hardware -&gt; Removable Storage -&gt; Automount Konsole config: Font: Monospace 13ptTheme: Breath (customized, a bit darker)Shell: Manjaro zsh Steam: Allow auto-update only between 1AM - 11AM Performance sudo systemctl disable bluetooth.service sudo systemctl disable tor.service sudo systemctl disable samba sudo systemctl disable cups balooctl disable &amp;&amp; balooctl purge sudo rm /etc/cron.d/0hourly sudo rm /etc/xdg/autostart/baloo_file.desktop sudo rm /etc/xdg/autostart/pamac-tray-budgie.desktop sudo rm /etc/xdg/autostart/pamac-tray.desktop sudo rm /etc/xdg/autostart/msm_kde_notifier.desktop sudo rm /etc/xdg/autostart/org.gnome.SettingsDaemon* sudo rm /etc/xdg/autostart/print-applet.desktop # sudo systemctl enable firewalld # sudo systemctl restart firewalld # sudo firewall-cmd --permanent --add-service=https # sudo firewall-cmd --permanent --add-port=30303/tcp # sudo firewall-cmd --permanent --add-port=30303/udp # sudo systemctl restart --now clamav-daemon # sudo freshclam # clamscan --recursive --infected /home # sudo systemctl disable --now clamav-freshclam # sudo systemctl disable --now clamav-daemon # sudo systemctl enable --now clamav-daemon # sudo systemctl enable --now clamav-freshclam  ","version":null,"tagName":"h3"},{"title":"Apply New Configs​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#apply-new-configs","content":"# Default config file ls -laR /etc/skel # apply default configs # method 1 cp -rf /etc/skel/.* ~/ rm -f ~/.config/dconf/user # method 2 sudo useradd --create-home newusername sudo passwd newusername  ","version":null,"tagName":"h3"},{"title":"Windows 11​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#windows-11","content":"","version":null,"tagName":"h2"},{"title":"Make boatable usb​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#make-boatable-usb","content":"","version":null,"tagName":"h3"},{"title":"WoeUsb​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#woeusb","content":"sudo pacman -Suy p7zip python-pip python-wxpython git clone https://github.com/WoeUSB/WoeUSB-ng.git sudo pip3 install . sudo woeusb --workaround-skip-grub --target-filesystem NTFS --device ~/Win11_22H2_English_x64v1.iso /dev/sdb  ","version":null,"tagName":"h3"},{"title":"Win2USB​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#win2usb","content":"https://github.com/ValdikSS/windows2usb chmod +x windows2usb* ./windows2usb-0.2.4-x86_64.AppImage /dev/sdb ~/Win11_22H2_English_x64v1.iso gpt+uefintfs  ","version":null,"tagName":"h3"},{"title":"Things to do after installing Windows 11​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#things-to-do-after-installing-windows-11","content":"Download and install all the updatesEnable Ransomware protectionDownload DimScreen, Copy it to the download folder. Open. click on the settings. set brightness to 20%. Make a shortcut to the desktopsearch for gamma calibration in windows settings. set it to minimumAdjust date and time: auto. Timezone tehran +3:30Downloading updates active hours: 24 hours format. 1-&gt;11Disable all data usages settings in privacy and securityuninstall mail, teams, one drive. xbox, facebook, microsoft todo, sticky notes, tips, weatherInstall firefox and loginInstall protonVPNpersonalize: sunrisenetwork connection: metered connectionDisplay: 3840x2160, 200%Steam: add your games' location to the Games' folder library. make it as defaultSteam: If your games are in a NTFS file system, follow this to make game compatible with Linux.Pause windows updates for 5 weeksCheck windows startups appsApp store: disable automatic updateLeave from &quot;AMD user experience program&quot;. AMD settings -&gt; last tab -&gt; last optionwindows features: WSL, virtual machine, hyper-v (for android and linux apps)wsl --updatewsl --install -d UbuntuDisable Error Reporting: WIN+R -&gt; services.msc -&gt; Windows Error Reporting Service -&gt; Properties -&gt; disable ","version":null,"tagName":"h3"},{"title":"Install a new os on the phone​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#install-a-new-os-on-the-phone","content":"","version":null,"tagName":"h2"},{"title":"Backup data​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#backup-data","content":"sudo pacman -S android-tools sudo adb devices adb backup -apk -shared -all -f backup-file.ab  ","version":null,"tagName":"h3"},{"title":"Restore​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#restore","content":"adb restore file.ab  ","version":null,"tagName":"h3"},{"title":"Enable Developer options​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#enable-developer-options","content":"Several times clicks on the kernel tabAllow OEM unlockingEnter Download mod: Turn off the phone. Hold vol key up + down.Now in the warning message page. choose &quot;unlocking bootloader&quot; that will perform a factory reset ","version":null,"tagName":"h3"},{"title":"Install odin tools for Samsung >= 3.14​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#install-odin-tools-for-samsung--314","content":"https://samsungodin.com/ ","version":null,"tagName":"h3"},{"title":"Install samsung driver​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#install-samsung-driver","content":"https://developer.samsung.com/android-usb-driver ","version":null,"tagName":"h3"},{"title":"Install adb​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#install-adb","content":"https://developer.android.com/studio/releases/platform-tools adb reboot download  ","version":null,"tagName":"h3"},{"title":"Download TWRP​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#download-twrp","content":"https://www.droidthunder.com/install-twrp-recovery-on-galaxy-A10/https://twrp.me/samsung/samsunggalaxya10.html ","version":null,"tagName":"h3"},{"title":"convert it to .md5​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#convert-it-to-md5","content":"https://www.droidthunder.com/convert-img-to-tar-md5/ ","version":null,"tagName":"h3"},{"title":"Run Odin as administrator​","type":1,"pageTitle":"Other","url":"/Wisdom-Hub/linux/other#run-odin-as-administrator","content":"follow the instructionshttps://www.droidthunder.com/install-twrp-recovery-on-galaxy-A10/ ","version":null,"tagName":"h3"},{"title":"ps, bg, fg, jobs, &, ctrl+comb​","type":1,"pageTitle":"process","url":"/Wisdom-Hub/linux/processes#ps-bg-fg-jobs--ctrlcomb","content":"Command\tDescriptionps -ef\tList all processes with ppid and exec path ps aux | grep &lt;process_name&gt;\tFilter processes by name bg &lt;job_id&gt;\tResume a specific suspended job in the background fg &lt;job_id&gt;\tBring a specific background job to the foreground jobs -l\tList background jobs with process IDs jobs %&lt;job_id&gt;\tDisplay information about a specific job systemctl status 1234\tShow the status of a specific systemd unit by its PID command1 &amp;\tRun command1 in the background nohup\tRun a command that keeps running even after you log out nohup command1\tRun command1 and keep it running after logging out ctrl+c\tInterrupt a process ctrl+z\tSuspend a process ctrl+l\tClear the terminal screen ","version":null,"tagName":"h2"},{"title":"kill, pkill, killall​","type":1,"pageTitle":"process","url":"/Wisdom-Hub/linux/processes#kill-pkill-killall","content":"Command\tDescriptionkill PID\tTerminate the process with PID, default is SIGTERM kill -15 PID\tSend the SIGTERM signal to the process with the specified PID kill -9 PID\tForcefully terminate the process with the specified PID kill -1 PID\tSend the SIGHUP signal to the process with the specified PID killall process\tTerminate all processes with the specified name pkill -u username\tKill by Username pkill -t tty\tKill by Terminal pkill -f pattern\tKill by Pattern pkill -x process\tKill Exact Process pkill -n process\tKill Newest Process pgrep Command\tDescriptionpgrep\tList processes by name or other attributes pgrep sshd\tList processes with the name 'sshd' pgrep nginx | xargs kill\tprocesses with 'nginx' in their name, send a SIGTERM to them pgrep -u masoud | xargs -I {} kill -9 {}\tand forcefully terminate prccess with &quot;masoud&quot; ","version":null,"tagName":"h2"},{"title":"free, uptime, watch​","type":1,"pageTitle":"process","url":"/Wisdom-Hub/linux/processes#free-uptime-watch","content":"Command\tDescriptionfree -h\tDisplay memory usage with human-readable format free -m\tDisplay memory usage in megabytes uptime -p\tDisplay uptime in a more human-readable format uptime -s\tDisplay the date and time since system started watch -n 1 date\tWatch and display the date and time every 1 second watch -n 5 df -h\tWatch and update disk space usage every 5 seconds watch -cd -n 1 uptime\tWatch system uptime every 1 second with color highlighting for changes ","version":null,"tagName":"h2"},{"title":"tmux​","type":1,"pageTitle":"process","url":"/Wisdom-Hub/linux/processes#tmux","content":"Command\tDescriptiontmux\tTerminal multiplexer tmux new -s mysession\tCreate a new tmux session named &quot;mysession&quot; tmux attach -t mysession\tAttach to an existing session named &quot;mysession&quot; tmux kill-session -t mysession\tRemove the tmux session named &quot;mysession&quot; tmux ls\tList all available tmux sessions tmux split-window\tSplit the current window horizontally tmux detach\tDetach from the current tmux session tmux rename-session -t oldsession newsession\tRename a tmux session from &quot;oldsession&quot; to &quot;newsession&quot; Ctrl-b %\tSplit the current window vertically (shortcut) Ctrl-b &quot;\tSplit the current window horizontally (shortcut) Ctrl-b d\tDetach from the current tmux session (shortcut) Ctrl-b $\tRename the current session (shortcut) Ctrl-b o\tCycle through open windows in the current session (shortcut) Ctrl-b Up\tChoose the previous window using the Up arrow key (shortcut) Ctrl-b Down\tChoose the next window using the Down arrow key (shortcut) Ctrl-b [\tEnter copy mode to scroll through the terminal output (shortcut) ","version":null,"tagName":"h2"},{"title":"nice, renice​","type":1,"pageTitle":"process","url":"/Wisdom-Hub/linux/processes#nice-renice","content":"Command\tShort Descriptionnice -n 10 command\tStart a command with a low priority (10) nice -n -10 command\tStart a command with a high priority (-10) renice -n 5 -p 1234\tChange the priority of a process with PID 1234 to 5 renice -n -2 -g sys\tChange the priority of all processes in the sys group to -2 ","version":null,"tagName":"h2"},{"title":"Systemd","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/systemd","content":"","keywords":"","version":null},{"title":"Targets​","type":1,"pageTitle":"Systemd","url":"/Wisdom-Hub/linux/systemd#targets","content":"Systemd targets are units in the systemd initialization system that represent specific system states or operational modes. They are used to group and manage other units, such as services, that are relevant to a particular mode of operation systemctl cat graphical.target  ","version":null,"tagName":"h2"},{"title":"Isolate​","type":1,"pageTitle":"Systemd","url":"/Wisdom-Hub/linux/systemd#isolate","content":"Start the unit specified on the command line and its dependencies and stop all others, unless they have IgnoreOnIsolate=yes ","version":null,"tagName":"h2"},{"title":"Add a system service​","type":1,"pageTitle":"Systemd","url":"/Wisdom-Hub/linux/systemd#add-a-system-service","content":"sudo nano /etc/systemd/system/sshtunnel.service [Unit] Description=SSH Tunnel After=network.target [Service] User=mlibre Restart=always RestartSec=20 ExecStart=ssh -L 0.0.0.0:1234:localhost:3128 -N pachan@43.204.151.127 -p 8756 [Install] WantedBy=graphical.target sudo systemctl daemon-reload sudo systemctl enable sshtunnel sudo systemctl reenable sshtunnel.service sudo systemctl restart sshtunnel sudo systemctl status sshtunnel sudo journalctl -f -u sshtunnel  ","version":null,"tagName":"h2"},{"title":"Add a user service​","type":1,"pageTitle":"Systemd","url":"/Wisdom-Hub/linux/systemd#add-a-user-service","content":"nano ~/.config/systemd/user/my-service.service [Unit] Description=My User Service [Service] ExecStart=echo &quot;hi everyone, hope good things happen for all&quot; [Install] WantedBy=default.target systemctl --user daemon-reload systemctl --user enable my-service systemctl --user reenable my-service.service systemctl --user restart my-service systemctl --user status my-service journalctl --user -f -u my-service  ","version":null,"tagName":"h2"},{"title":"Run a script after suspending has finished (resume)​","type":1,"pageTitle":"Systemd","url":"/Wisdom-Hub/linux/systemd#run-a-script-after-suspending-has-finished-resume","content":"sudo nano /etc/systemd/system/gamma.service  [Unit] Description=Start Script in terminal After=suspend.target graphical.target [Service] User=mlibre Type=idle Environment=DISPLAY=:0 ExecStartPre=/bin/sleep 10 ExecStart=/bin/bash /usr/local/bin/gamma_on_startup [Install] WantedBy=suspend.target graphical.target  sudo systemctl daemon-reload sudo systemctl enable gamma.service systemctl status gamma journalctl -u gamma  ","version":null,"tagName":"h2"},{"title":"Shell and Scripting","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/shell-scripting","content":"","keywords":"","version":null},{"title":"Login shell vs non-login-shell​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#login-shell-vs-non-login-shell","content":"A shell session can be either a login shell or a non-login shell. A login shell is the first shell that runs under your user ID when you start an interactive session, such as logging in via tmux, SSH, or su -. This shell reads and executes the environment configuration files /etc/profile and ~/.bash_profile for bash. You can verify if a shell is a login shell by running shopt login_shell. A non-login shell is any shell started in an existing session, like a terminal in a graphical environment, a shell inside tmux, or a shell within another shell. These shells do not read the environment configuration files (/etc/profile or ~/.bash_profile), but they do read the shell configuration file (~/.bashrc, /etc/bash.bashrc). ","version":null,"tagName":"h2"},{"title":"/etc/skel​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#etcskel","content":"The /etc/skel/ directory in Linux is used as a template for creating a new user's home directory. When a new user is created with the adduser command, the system copies the files and directories contained in the /etc/skel/ directory to the new user's home directory. ","version":null,"tagName":"h2"},{"title":"Bash​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#bash","content":"","version":null,"tagName":"h2"},{"title":"Execution methods​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#execution-methods","content":"Command\tDescription\tExecution Method./script\tExecute script in current directory as a new process\tShebang (#!/) sh ./script\tRun script with the default system shell (/bin/sh)\tNo Shebang (#!/) bash ./script\tRun script explicitly with the Bash shell\tNo Shebang (#!/) source ./script\tExecute script in the current shell, preserving changes\tNo Shebang (#!/) exec ./script\tReplace the current shell with the script (keeps PID)\tShebang (#!/) ","version":null,"tagName":"h3"},{"title":"Basics​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#basics","content":"Variables my_var=&quot;Hello, World!&quot; echo $my_var  if if [ condition ]; then # Code to execute if condition is true fi  loops for i in {1..5}; do echo &quot;Iteration $i&quot; done  Functions my_function() { echo &quot;Hello from my function!&quot; } my_function  Command Line Arguments echo &quot;First argument: $1&quot;  Input and Output read -p &quot;Enter your name: &quot; name echo &quot;Hello, $name!&quot;  ","version":null,"tagName":"h3"},{"title":"wait, ;, &&, ||, `, $()​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#wait-----","content":"Command\tShort Descriptioncommand1; command2\tRun 'command1' followed by 'command2' ls; pwd\tList files and then print the current directory mkdir myfolder; cd myfolder\tCreate a folder and then navigate into it command1 || command2\tRun 'command1', if it fails, run 'command2' ls /nonexistent || echo &quot;Directory not found&quot;\tList a directory, and if it doesn't exist, display an error message command1 &amp;&amp; command2\tRun 'command1', if it succeeds, run 'command2' git pull &amp;&amp; npm install\tPull from a Git and install Node.js packages if the pull is successful wait\tPause execution until all background jobs are done sleep 10 &amp; wait; echo &quot;hi&quot;&quot;\tWait for background jobs to finish and then display a message `command`\tExecutes command and returns its output as text. $()\tExecutes a command within parentheses and returns its output. output=$(command)\tExecutes command and stores its output in output. ","version":null,"tagName":"h3"},{"title":"echo, env, export, set, unset, variables​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#echo-env-export-set-unset-variables","content":"Commands\tDescriptionVAR_NAME=val\tSet VAR_NAME to val set\tdisplays shell variables and functions set -o\tDisplay current shell options set -e\tExit immediately if a command in a script exits with a non-zero status unset MYVAR\tUnset the environment variable named VAR_NAME export VAR\tMake var available to child processes env\tView current environment vars echo $VAR\tDisplay value of VAR echo $PATH\tDisplay value of PATH echo $HOME\tDisplay user's home directory echo $EDITOR\tDisplay default text editor echo $HISTFILE\tDisplay command history file echo $SHELL\tDisplay default shell program echo $USER\tDisplay current username echo $?\tDisplay last command exit status echo $PS1\tDisplay the shell prompt Use export when you want to make a variable available to child processes Use set primarily for managing shell options and attributes, but it can also be used to set local variables ","version":null,"tagName":"h3"},{"title":"source, alias, type​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#source-alias-type","content":"Command\tDescriptionsource\tLoad functions into the current shell session source ~/.bashrc\tReloads the user's Bash profile source my_script.sh\tExecutes a shell script within the current shell alias\tCreate or display command aliases alias ll='ls -l'\tCreates an alias 'll' for the 'ls -l' command alias c=clear\tCreates an alias 'c' for the 'clear' command unalias c\tRemove the alias 'c' for the 'clear' command type\tinformation about a command type ls\toutput: ls is an alias for ls $LS_OPTIONS type ssh\toutput: ssh is /usr/bin/ssh type source\toutput: source is a shell builtin ","version":null,"tagName":"h3"},{"title":"history​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#history","content":"Commands\tDescriptionhistory 5\tDisplays the last 5 commands in the history !!\tRepeats the last executed command !*\tRepresents all arguments of the last command !n\tRepeats the nth command in history !-n\tRepeats the nth command from the current command !string\tRepeats the most recent command that starts with string !:1, !:2, ...\tRepresents the first, second, etc. arguments of the last command !:0\tRepresents the command + arguments command !:0-2\tExecutes the command with the first two arguments of the last command command !:1-2\tExecutes the command with the second and third arguments of the last command command !:2*\tExecutes command from the second arguments of the last command some !571:2*\tExecutes some from the second arguments of 571st command in the history ","version":null,"tagName":"h3"},{"title":"Prompt Shell​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#prompt-shell","content":"echo $PS1 PS1='$(if [ $? -eq 0 ]; then echo -e &quot;\\[\\033[42m\\] \\[\\033[0m\\]&quot;; else echo -e &quot;\\[\\033[41m\\] \\[\\033[0m\\]&quot;; fi) \\[\\033[1;32m\\]$(if [ $(jobs | wc -l) -gt 0 ]; then echo -n &quot;\\j &quot;; fi)\\[\\033[1;36m\\]\\u\\[\\033[0m\\] \\[\\033[1;33m\\]\\w\\[\\033[0m\\] \\[\\033[1;34m\\]$(if [ $(date +%H) -ge 6 -a $(date +%H) -lt 18 ]; then echo -n &quot;☀️&quot;; else echo -n &quot;🌙&quot;; fi)\\[\\033[0m\\] ' # you may put your PS1 in .bashrc nano .bashrc  ","version":null,"tagName":"h3"},{"title":"Case-insensitive Auto completion​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#case-insensitive-auto-completion","content":"# Add the following line to the /etc/inputrc file to enable case-insensitive auto completion echo 'set completion-ignore-case On' | sudo tee -a /etc/inputrc # or as root echo 'set completion-ignore-case On' &gt;&gt; /etc/inputrc # or for current user only echo &quot;set completion-ignore-case on&quot; &gt;&gt; ~/.inputrc  ","version":null,"tagName":"h3"},{"title":"Simple Bash Scripts​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#simple-bash-scripts","content":"Mouse location​ while true; do sleep 2 xdotool getmouselocation done  Get screen resolution​ RES=$(xdpyinfo | grep dimensions | awk '{print $2}') WIDTH=$(echo $RES | awk -Fx '{print $1}') HEIGHT=$(echo $RES | awk -Fx '{print $2}')  Click, Move and scroll on the screen​ #!/bin/bash # Usage: ./click2.bash 3 30 # Check for two arguments if [[ $# -ne 3 ]]; then echo &quot;Usage: $0 &lt;mouse idle time in seconds&gt; &lt;sleep time in each loop&gt; &lt;specific action each Nth time&gt;&quot; exit 1 fi mousemoveAndClick() { # Move the mouse to the specified coordinates xdotool mousemove $1 $2 # mouse click xdotool click 1 # Sleep for 1 second sleep 1 } scroll() { local direction=$1 local count=$2 if [[ $direction == &quot;up&quot; ]]; then for i in $(seq 1 $count); do xdotool click 4 sleep 0.5 done elif [[ $direction == &quot;down&quot; ]]; then for i in $(seq 1 $count); do xdotool click 5 sleep 0.5 done fi } remove_esc() { # Move the mouse to the specified coordinates xdotool mousemove 1575 572 # mouse click xdotool click 1 # Sleep for 1 second sleep 1 } press_esc_and_click() { # Press ESC xdotool key Escape # Sleep for 1 second sleep 1 # mouse click xdotool click 1 remove_esc } buy() { # Move the mouse to the specified coordinates xdotool mousemove 1556 1230 # mouse click xdotool click 1 # Sleep for 1 second sleep 1 } counter=0 # Get the idle time in milliseconds IDLE_TIME=$(echo &quot;$1 * 1000&quot; | bc) while true; do # Get the current idle time of the mouse pointer in milliseconds IDLE=$(xprintidle) # Check if the mouse has been idle for at least the specified time if [[ $IDLE -ge $IDLE_TIME ]]; then ((counter++)) echo &quot;Increasing $counter&quot; # Boss mousemoveAndClick 34 393 press_esc_and_click # top left mousemoveAndClick 1173 647 buy if [[ $((counter % $3)) -eq 0 ]]; then scroll &quot;down&quot; 40 fi fi # Sleep for specified time sleep $2 done  And run: chmod +x click.sh ./click.sh 1 30 50  ","version":null,"tagName":"h3"},{"title":"zsh​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#zsh","content":"sudo pacman -S zsh  ","version":null,"tagName":"h2"},{"title":"Font​","type":1,"pageTitle":"Shell and Scripting","url":"/Wisdom-Hub/linux/shell-scripting#font","content":"Monospace 12  ","version":null,"tagName":"h2"},{"title":"Text","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/text","content":"","keywords":"","version":null},{"title":"cat, zcat, less, more, head, tail, ccat, bat​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#cat-zcat-less-more-head-tail-ccat-bat","content":"Command\tDescriptioncat file.txt\tConcatenate and display cat -n file.txt\tDisplay with line numbers zcat file.gz\tDisplay compressed content ccat file.txt\tColorize and concatenate bat file.txt\tCat clone with syntax tail file.txt\tDisplay last N line (10 by default) tail -f file.txt\tContinuously display new lines head file.txt\tDisplay first N lines (10 by default) head -n 5 file.txt\tDisplay first 5 lines less file.txt\tView file with pagination more file.txt\tView file page by page ","version":null,"tagName":"h2"},{"title":"tee​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#tee","content":"tee allows you to read from standard input and write to both standard output and files simultaneously. Command\tDescriptiontee file.txt\tRead from stdin and write to file.txt, creating or overwriting it ls | tee list.txt\tRedirect the ls output to both terminal and list.txt tee -a file.txt\tAppend to file.txt instead of overwriting it ps aux | grep &quot;node&quot; | tee processes.txt\tlist and save running processes containing node ","version":null,"tagName":"h2"},{"title":"split​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#split","content":"Command\tDescriptionsplit file.txt\tSplit file into parts, by default 1000 lines per file split -l 100\tSplit into 100-line files split -b 1M\tSplit into 1MB files split -n 3 file.txt\tSplit into 3 equal parts split -d\tUse numeric suffixes split test.txt -d hi\tUse numeric suffixes and custom prefix &quot;hi&quot; split -a 3\tUse 3-character suffix cat hi* &gt; concatenated_file.txt\tConcatenate files starting with &quot;hi&quot; ","version":null,"tagName":"h2"},{"title":"cut​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#cut","content":"Command\tDescriptioncut -f 1,3 file.txt\tPrint the first and third fields from each line of file.txt cut -d' ' -f 2-4 file.txt\tPrint fields 2 to 4 from each line of &quot;file.txt&quot; using space as the delimiter cut -c 1-5 file.txt\tSelect and print characters 1 to 5 from each line of &quot;file.txt&quot; Tab is the defualt delimiter ","version":null,"tagName":"h2"},{"title":"sort, nl, shuf, uniq, tr​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#sort-nl-shuf-uniq-tr","content":"Command\tDescriptionsort file.txt\tSort lines in a text file sort -r file.txt\tSort lines in reverse order sort -n file.txt\tSort lines numerically nl file.txt\tNumber lines in a file nl -b a file.txt\tNumber lines, showing all lines nl -s &quot;,&quot; file.txt\tNumber lines, custom separator shuf file.txt\tShuffle lines in a file shuf -n 5 file.txt\tShuffle and display only 5 lines uniq file.txt\tDisplay unique lines in a file uniq -c file.txt\tCount and display unique lines with count cat file.txt | tr -s ' ' ','\tTranslate spaces to commas in a text stream ","version":null,"tagName":"h2"},{"title":"diff, sha256sum, cp, mv, rm​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#diff-sha256sum-cp-mv-rm","content":"Certainly, here's a table of the commands you requested in markdown format, with centered text alignment as per your preference: Command\tDescriptiondiff file1 file2\tCompares two files and shows differences sha256sum file.txt\tCalculates and prints the SHA-256 hash of the file file.txt cp -r\tCopies directories and their contents recursively cp -v\tCopies files or directories with verbose output mv -i\tMoves (renames) files or directories with prompt rm -r\tRemoves directories and their contents recursively mkdir\tCreates a new directory rmdir\tRemoves an empty directory ","version":null,"tagName":"h2"},{"title":"find​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#find","content":"Command\tDescriptionfind\tSearch for files and directories find path -name pattern\tFiles with a specific name in the 'path' directory find /home/user -name &quot;*.txt&quot;\tAll files with the '.txt' extension in '/home/user' find /etc -type d -name &quot;conf&quot;\tLocate directories named 'conf' under '/etc' find /var/log -type f -mtime +7\tFind files in '/var/log' modified more than 7 days ago find /usr/bin -executable -type f\tFind executable files in '/usr/bin' find /home -user masoud\tFiles owned by the user 'masoud' under '/home' find /mnt -size +100M\tFind files larger than 100MB in '/mnt' find /var/log -iname &quot;*.log&quot; -exec ls -l {} \\;\tFiles in '/var/log' with a case-insensitive name match find /backup -type f -exec cp {} /backup_archive/ \\;\tCopy found files to '/backup_archive/' directory find ./ -type f -exec ls {} \\; -exec echo &quot;file: {}&quot; \\;\tHaving two commands ","version":null,"tagName":"h2"},{"title":"tar, gzip, guzip, xz, unxz​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#tar-gzip-guzip-xz-unxz","content":"Command\tDescriptiongzip\tCompress files using gzip gzip file.txt\tCompress the file.txt using gzip gzip -d file.gz\tDecompress file.gz using gzip gunzip file.gz\tDecompress file.gz using gunzip xz\tCompress files using xz xz file.txt\tCompress the file.txt using xz xz -d file.xz\tDecompress file.xz using xz unxz file.xz\tDecompress file.xz using unxz tar\tCreate and extract tar archives tar -cvf archive.tar files/\tCreate a tar archive from the 'files/' directory tar -xvf archive.tar\tExtract files from 'archive.tar' tar -xvf archive.tar -C /\tChange to / directory and then extract ","version":null,"tagName":"h2"},{"title":"streams​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#streams","content":"Certainly, here's a Markdown table with centered text alignment that lists the Linux commands you mentioned, along with their short descriptions and real-world examples: Command\tDescription&gt;\tRedirects standard output to a file ls &gt; list.txt\tRedirects ls command output to list.txt &gt;&gt;\tAppends standard output to a file echo &quot;Hello&quot; &gt;&gt; greeting.txt\tAppends &quot;Hello&quot; to greeting.txt 2&gt;\tRedirects standard error to a file ls non_existent_dir 2&gt; error.log\tLogs error from ls to error.log 2&gt;&gt;\tAppends standard error to a file find /non_existent_dir 2&gt;&gt; errors.log\tAppends errors to errors.log &amp;&gt;\tRedirects both standard output and error to a file curl example.com &amp;&gt; website.log\tLogs both output and errors from curl to website.log &amp;&gt;&gt;\tAppends both standard output and error to a file git pull &amp;&gt;&gt; git.log\tAppends both git output and errors to git.log &lt;&gt;\tRedirects both input and output from/to a file cat &lt;&gt; combined.txt\tReads and writes to combined.txt command &gt; output.txt 2&gt; error.txt\tRedirects output to output.txt and error to error.txt command 2&gt;&amp;1 &gt; output_and_error.txt\tRedirects both output and error to output_and_error.txt ","version":null,"tagName":"h2"},{"title":"pipe​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#pipe","content":"Command\tDescription|\tRedirect output from one command to another. command1 | command2\tExecute command1 and pass its output to command2 ls | grep .txt\tList and filter files with a .txt extension ps aux | grep nginx\tList and filter processes related to nginx cat file.txt | less\tDisplay file contents using the less pager dmesg | tail -n 10\tDisplay the last 10 kernel log messages ls | sort -r\tList files in reverse alphabetical order find /home | wc -l\tCount files and directories in /home du -h | sort -rh\tList disk usage, human-readable, and sorted ls | tee file.txt\tList files and save output to file.txt ls | head -n 5\tList the first 5 files in the current directory ","version":null,"tagName":"h2"},{"title":"xargs​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#xargs","content":"xargs is a Linux command-line tool that takes input from standard input and passes it as arguments to another command. It separates input items by spaces, tabs or newlines by default, but you can specify a different delimiter with the -d option. The output is the result of executing the specified command with the input items as arguments. By default, xargs will process as many input items as possible in a single execution of the command. -n 1: This option in xargs specifies that only one input item should be used for each execution of the command. It ensures that the command is run once for each input item-I {}: The -I option allows you to specify a placeholder (in this case, {}) to represent where the input item should be placed within the command. It also process one input item at a time Command\tDescriptionxargs\tBuild and execute command lines from standard input find /path -type f -print | xargs command\tExecute command on each file found by the find command echo arg1 arg2 | xargs command\tExecute command with arguments arg1 and arg2 ls *.txt | xargs rm\tRemove all .txt files in the current directory cat list.txt | xargs -n 1 echo\tPrint each line of list.txt using echo (one by one) ls | xargs -I {} mv {} {}.bak\tAdd &quot;.bak&quot; extension to all files in this directory (one by one) find /path -type f -name &quot;*.log&quot; -print0 | xargs -0 rm\tRemove &quot;.log&quot; files in &quot;/path&quot; with handling of special characters grep pattern f1 f2 | xargs sed -i 's/pattern/replacement/g'\tSearch and replace &quot;pattern&quot; with &quot;replacement&quot; in multiple files echo file1 file2 file3 | xargs -I % sh -c 'cp % /backup'\tCopy multiple files to a backup directory find /path -type f -print | xargs -P 4 -I % gzip %\tParallel compression of files in &quot;/path&quot; using 4 processes ls *.txt | xargs -n 1 -I {} mv {} /destination/\tMove each &quot;.txt&quot; file to &quot;/destination/&quot; directory echo file1 file2 | xargs -d ' ' -I % sh -c 'touch %.txt'\tCreate &quot;.txt&quot; files with specified names ","version":null,"tagName":"h2"},{"title":"grep​","type":1,"pageTitle":"Text","url":"/Wisdom-Hub/linux/text#grep","content":"Command\tDescriptiongrep 'error' log.txt\tSearch for 'error' messages in a log file grep -r 'function foo()' /project\tRecursively find files containing 'function foo()' in the '/project' directory grep -i 'todo' *.js\tSearch case-insensitively for 'todo' in JavaScript files grep -E '^\\d{3}-\\d{2}-\\d{4}$' data.txt\tUse extended regex to find social security numbers in 'data.txt' grep -l 'pattern' *.txt\tList files containing 'pattern' in the current directory grep -v 'warning' log.txt\tInvert the match to display lines without 'warning' in the log file ","version":null,"tagName":"h2"},{"title":"Lovely Tools","type":0,"sectionRef":"#","url":"/Wisdom-Hub/Lovely Tools","content":"","keywords":"","version":null},{"title":"My ETH Address​","type":1,"pageTitle":"Lovely Tools","url":"/Wisdom-Hub/Lovely Tools#my-eth-address","content":"0xc9b64496986E7b6D4A68fDF69eF132A35e91838e ","version":null,"tagName":"h2"},{"title":"Learn Network","type":0,"sectionRef":"#","url":"/Wisdom-Hub/network/","content":"","keywords":"","version":null},{"title":"Tutorials​","type":1,"pageTitle":"Learn Network","url":"/Wisdom-Hub/network/#tutorials","content":"This repository is organized into several sections, each containing tutorials for specific topics. Here's a brief overview: networkssh ","version":null,"tagName":"h2"},{"title":"My ETH Address​","type":1,"pageTitle":"Learn Network","url":"/Wisdom-Hub/network/#my-eth-address","content":"0xc9b64496986E7b6D4A68fDF69eF132A35e91838e ","version":null,"tagName":"h2"},{"title":"Awesome Tools","type":0,"sectionRef":"#","url":"/Wisdom-Hub/linux/tools","content":"","keywords":"","version":null},{"title":"Shell​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#shell","content":"","version":null,"tagName":"h2"},{"title":"ble.sh​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#blesh","content":"Syntax highlighting and auto suggestions for bash # https://github.com/akinomyoga/ble.sh git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git make -C ble.sh install PREFIX=~/.local echo 'source ~/.local/share/blesh/ble.sh' &gt;&gt; ~/.bashrc # Install in Manjaro pamac install blesh-git  ","version":null,"tagName":"h3"},{"title":"Bash It​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#bash-it","content":"git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it ~/.bash_it/install.sh source ~/.bashrc bashit bash-it show aliases bash-it show plugins bash-it show completions bash-it enable completion all bash-it update bash-it reload ls ~/.bash_it/themes/ bash-it enable plugin man cd $BASH_IT ./uninstall.sh  ","version":null,"tagName":"h3"},{"title":"System monitoring​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#system-monitoring","content":"","version":null,"tagName":"h2"},{"title":"Neofetch​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#neofetch","content":"neofetch ██████████████████ ████████ mlibre@mlibre-systemproductname ██████████████████ ████████ ------------------------------- ██████████████████ ████████ OS: Manjaro Linux x86_64 ██████████████████ ████████ Kernel: 6.1.49-1-MANJARO ████████ ████████ Uptime: 38 mins ████████ ████████ ████████ Packages: 1657 (pacman) ████████ ████████ ████████ Shell: bash 5.1.16 ████████ ████████ ████████ Resolution: 2560x1440 ████████ ████████ ████████ DE: Plasma 5.27.7 ████████ ████████ ████████ WM: KWin ████████ ████████ ████████ Theme: [Plasma], Breeze [GTK2/3] ████████ ████████ ████████ Icons: [Plasma], breeze [GTK2/3] ████████ ████████ ████████ Terminal: konsole ████████ ████████ ████████ CPU: 12th Gen Intel i5-12400F (12) @ 5.600GHz GPU: AMD ATI Radeon RX 6400/6500 XT/6500M Memory: 5046MiB / 31906MiB  ","version":null,"tagName":"h3"},{"title":"htop​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#htop","content":"htop  ","version":null,"tagName":"h3"},{"title":"prettyping​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#prettyping","content":"sudo pacman -S prettyping prettyping  ","version":null,"tagName":"h3"},{"title":"Network Monitoring​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#network-monitoring","content":"","version":null,"tagName":"h2"},{"title":"bmon​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#bmon","content":"sudo pacman -S bmon bmon  ","version":null,"tagName":"h3"},{"title":"Wine​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#wine","content":"# pamac install wine-stable sudo pacman -S wine winetricks winetricks corefonts vcrun2013 vcrun2015 winhttp allcodecs d3dcompiler_42 d3dcompiler_43 d3dcompiler_47 d3dx9 dotnet dxvk quartz sudo setcap cap_net_raw+epi /usr/bin/wine  ","version":null,"tagName":"h2"},{"title":"proxy​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#proxy","content":"","version":null,"tagName":"h2"},{"title":"proxychains​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#proxychains","content":"sudo nano /etc/proxychains.conf socks5 127.0.0.1 1080 # comment proxy_dns # proxy_dns  # Use proxychains to run yay, git, npm and pacman proxychains yay --noprovides --answerdiff None --answerclean None --mflags &quot;--noconfirm&quot; -S protonvpn proxychains git clone https://github.com/boypt/vmess2json.git sudo proxychains npm -g install v2ray-tools sudo proxychains pacman -Syyuu # Set the http and https proxy environment variables export http_proxy=socks5://127.0.0.1:1080 export https_proxy=socks5://127.0.0.1:1080  ","version":null,"tagName":"h3"},{"title":"Youtube Download​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#youtube-download","content":"# Install sudo pacman -S youtube-dl yt-dlp # Download best quality yt-dlp &quot;https://www.youtube.com/link&quot; yt-dlp -f b --write-description --write-auto-sub --write-subs --embed-subs --write-info-json --max-filesize 100M --download-sections &quot;*6:02-13:40&quot; --proxy socks5://127.0.0.1:1080/ --verbose &quot;https://www.youtube.com/link&quot; # List formats and sizes yt-dlp -F &quot;https://www.youtube.com/link&quot; yt-dlp -f 22 &quot;https://www.youtube.com/link&quot; youtube-dl -f best &quot;https://www.youtube.com/link&quot;  ","version":null,"tagName":"h2"},{"title":"Add Alias​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#add-alias","content":"nano ~/.bashrc alias yd='yt-dlp -f b --write-auto-sub --write-subs --embed-subs --write-info-json --max-filesize 100M' yd &quot;link&quot; ## Install Genymotoin Android emulator ```bash sudo pamac install genymotion  ","version":null,"tagName":"h3"},{"title":"Instant cloud file share​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#instant-cloud-file-share","content":"# -F autodestroy=1 autodestroy on download or expire in 5 curl https://oshi.at -F f=@/home/true/backup.tar.gz -F expire=5 minutes curl -F &quot;file=@/home/mlibre/Downloads/backup.tar.gz&quot; &quot;https://file.io/?expires=1w&quot;  ","version":null,"tagName":"h2"},{"title":"Open Interpreter​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#open-interpreter","content":"python -m venv myvirtenv source myvirtenv/bin/activate pip install open-interpreter interpreter --model tiiuae/falcon-180B  ","version":null,"tagName":"h2"},{"title":"Timewarrior​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#timewarrior","content":"A simple time tracking tool for command line. sudo pacman -S timew  ","version":null,"tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#usage","content":"Command\tDescriptiontimew\tCreate the database if not exist timew start tag1 &quot;tag 2&quot;\tStart tracking with multiple tags timew stop\tStop tracking time for last task timew continue\tContinue the last task timew track 9:00 - 11:00 tag1\tHistorical track for tag1 timew modify end @1 12:45\tModify end @1 to 12:45 ","version":null,"tagName":"h3"},{"title":"Advanced Usage​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#advanced-usage","content":"Command\tDescriptiontimew track 12:00:00 to 13:00 tag1\tHistorical track for tag1 timew track 7pm for 2h tag1\tHistorical track for tag1 timew move @1 11:00:00\tMoving @1 to 11:00:00 timew lengthen @1 30min\tlengthing @1 by 30min ","version":null,"tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#features","content":"Command\tDescriptiontimew summary\tView time summary timew summary yesterday - now\tView time summary from yesterady timew summary tag1\tView summary for tasks with tag1 timew summary :ids\tView time summary with ids timew day\tShow daily summary timew tags\tList all available tags timew help delete\tUsing help timew delete @1\tDelete ID@1 entry timew export\tExport data for today to JSON ","version":null,"tagName":"h3"},{"title":"backup​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#backup","content":"tar -czvf tm.tar.gz /home/mlibre/.local/share/timewarrior  ","version":null,"tagName":"h3"},{"title":"Restpre​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#restpre","content":"tar -xzvf tm.tar.gz /home/mlibre/.local/share/timewarrior tar -xvzf tm.tar.gz -C /  ","version":null,"tagName":"h3"},{"title":"Alies​","type":1,"pageTitle":"Awesome Tools","url":"/Wisdom-Hub/linux/tools#alies","content":"nano .bashrc alias tm='timew' alias tms='timew start' alias tmt='timew track' alias tmd='timew delete' alias tmo='timew summary :ids' alias tmm='timew move' alias tml='timew lengthen' alias tmm='timew modify'  ","version":null,"tagName":"h3"},{"title":"SSH","type":0,"sectionRef":"#","url":"/Wisdom-Hub/network/ssh","content":"","keywords":"","version":null},{"title":"openVPN Over Socks​","type":1,"pageTitle":"SSH","url":"/Wisdom-Hub/network/ssh#openvpn-over-socks","content":"SS server address: 87.80.80.80 nano mlibre.ovpn socks-proxy 127.0.0.1 1090 route 87.80.80.80 255.255.255.255 net_gateway route 192.168.0.0 255.255.0.0 net_gateway  ","version":null,"tagName":"h2"},{"title":"Raspberry pi","type":0,"sectionRef":"#","url":"/Wisdom-Hub/raspberry pi","content":"","keywords":"","version":null},{"title":"Raspberry Pi OS​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#raspberry-pi-os","content":"Download the Raspberry Pi OS imageInstall rpi-imager sudo pacman -S rpi-imager  Connect your SD card to your computer and run: rpi-imager  First use Erase the SD card optionsFrom the settings menu, you can set the Hostname and ...Select Write and wait for the process to finishConnect the Raspberry Pi to your computer or router and run: sudo nmap -sP 192.168.1.0/24 | grep -B 2 -i raspberry Nmap scan report for 192.168.1.136 Host is up (0.00047s latency). MAC Address: DC:A6:32:9A:EF:16 (Raspberry Pi Trading)  Now you can connect to your Raspberry Pi using ssh: sudo ssh-copy-id -i .ssh/id_rsa.pub -p 22 mlibre@192.168.1.136 ssh mlibre@192.168.1.136 sudo passwd  ","version":null,"tagName":"h2"},{"title":"First Things​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#first-things","content":"sudo rm cron.daily/apt-compat sudo rm /etc/cron.weekly/update-notifier-common sudo rm /etc/cron.daily/update-notifier-common sudo apt-get purge geany mariadb-common apt-listchanges cups cups-browsed cups-daemon apparmor snapd apport sudo apt autoremove --purge sudo rpi-update # rollback from rpi-update # sudo apt install --reinstall raspberrypi-bootloader raspberrypi-kernel raspberrypi-kernel-headers sudo apt --allow-releaseinfo-change update sudo apt full-upgrade sudo apt install -y protobuf-compiler protobuf-c-compiler libyaml-cpp0.6 libyaml-cpp-dev libzxingcore-dev libzxingcore1 qtbase5-dev qtbase5-dev-tools build-essential cmake make linux-headers-arm64 ninja-build libqt5svg5-dev qttools5-dev mlocate ruby-google-protobuf python3-protobuf r-cran-rprotobuf libupb0 libupb-dev gogoprotobuf golang-gitaly-proto-dev golang-github-gogo-googleapis-dev golang-gogoprotobuf-dev gradle-plugin-protobuf grpc-proto libactivemq-protobuf-java libarcus-dev libarcus3 libghc-protobuf-dev libghc-protobuf-prof libhawtbuf-java g++ git bazel-bootstrap python3-grpc-tools python3-arcus protoc-gen-go libprotozero-dev libprotoc-dev libqt5x11extras5-dev fswebcam python3-pip libsdl2-dev wget git python3 python3-venv libgdbm-dev libsqlite3-dev tk-dev libncursesw5-dev aria2 libdb5.3-dev llvm autoconf rfkill raspberrypi-ui-mods realvnc-vnc-server raspberrypi-bootloader raspberrypi-kernel raspberrypi-kernel-headers libssl-dev automake libjansson-dev autotools-dev unzip gcc software-properties-common golang clang sudo apt clean sudo apt autoclean sudo rpi-update sudo usermod -a -G video $USER sudo usermod -a -G gpio $USER sudo updatedb pip install pyyaml pip3 install torch torchvision torchaudio sudo reboot  ","version":null,"tagName":"h2"},{"title":"rasp-config​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#rasp-config","content":"sudo raspi-config  UpdateDisplay Options: VNC ResolutionPerformance: GPU Memory to min of 896Advance Options: Expand filesystem, Predicetd Network Interface Names ","version":null,"tagName":"h2"},{"title":"Fix $PATH​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#fix-path","content":"nano .bashrc if [ -d &quot;$HOME/.local/bin&quot; ] ; then PATH=&quot;$HOME/.local/bin:$PATH&quot; fi  ","version":null,"tagName":"h2"},{"title":"Usuals​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#usuals","content":"","version":null,"tagName":"h2"},{"title":"bash completion​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#bash-completion","content":"echo set completion-ignore-case on | sudo tee -a /etc/inputrc  ","version":null,"tagName":"h3"},{"title":"No Password​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#no-password","content":"sudo nano /etc/sudoers %sys ALL=(ALL) NOPASSWD: ALL mlibre ALL=(ALL) NOPASSWD: ALL  ","version":null,"tagName":"h3"},{"title":"Performance​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#performance","content":"","version":null,"tagName":"h2"},{"title":"Logs​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#logs","content":"sudo systemctl disable syslog.socket sudo systemctl disable rsyslog  ","version":null,"tagName":"h3"},{"title":"sysctl​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#sysctl","content":"sudo nano /etc/sysctl.conf net.ipv4.tcp_rmem = 4096 87380 629145 net.ipv4.tcp_wmem = 4096 65536 16777216 net.ipv4.tcp_no_metrics_save = 1 net.ipv4.tcp_moderate_rcvbuf = 1 net.ipv4.tcp_timestamps = 0 net.ipv4.tcp_sack = 0 net.ipv4.tcp_window_scaling = 1  ","version":null,"tagName":"h3"},{"title":"Network​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#network","content":"","version":null,"tagName":"h2"},{"title":"Disable ipv6​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#disable-ipv6","content":"sudo nano /etc/sysctl.conf net.ipv6.conf.all.disable_ipv6 = 1  ","version":null,"tagName":"h3"},{"title":"Disable WiFi and Bluetooth​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#disable-wifi-and-bluetooth","content":"sudo systemctl disable wpa_supplicant sudo systemctl disable bluetooth sudo systemctl disable hciuart  sudo rfkill block wifi sudo rfkill block bluetooth  sudo nano /boot/config.txt [all] dtoverlay=disable-wifi dtoverlay=disable-bt  ","version":null,"tagName":"h3"},{"title":"Enable ipv4 forwarding​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#enable-ipv4-forwarding","content":"sudo nano /etc/sysctl.conf net.ipv4.ip_forward=1 sudo sysctl -p  ","version":null,"tagName":"h3"},{"title":"Find rpi in the Network​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#find-rpi-in-the-network","content":"sudo nmap -sP 192.168.1.0/24 | grep -B 2 -i raspberry  ","version":null,"tagName":"h3"},{"title":"Static DNS​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#static-dns","content":"sudo nano /etc/dhcpcd.conf static domain_name_servers=1.1.1.1 8.8.8.8  ","version":null,"tagName":"h3"},{"title":"Make Swap File​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#make-swap-file","content":"sudo dphys-swapfile swapoff sudo nano /etc/dphys-swapfile CONF_SWAPSIZE=10240 CONF_MAXSWAP=12240 sudo dphys-swapfile setup sudo dphys-swapfile swapon # sudo nano /etc/sysctl.conf # vm.swappiness=10  ","version":null,"tagName":"h2"},{"title":"VNC​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#vnc","content":"","version":null,"tagName":"h2"},{"title":"Enable VNC​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#enable-vnc","content":"sudo raspi-config # Enable VNC sudo systemctl restart vncserver-x11-serviced.service sudo systemctl status vncserver-x11-serviced.service sudo nano /root/.vnc/config.d/vncserver-x11 AllowChangeDefaultPrinter=0 Authentication=VncAuth EnableAutoUpdateChecks=0 Encryption=PreferOff sudo vncpasswd -legacy -service  ","version":null,"tagName":"h3"},{"title":"Fix VNC Low Resolution​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#fix-vnc-low-resolution","content":"sudo nano /boot/config.txt framebuffer_width=1920 framebuffer_height=1080 hdmi_force_hotplug=1 hdmi_group=2 hdmi_mode=16  ","version":null,"tagName":"h3"},{"title":"Docker​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#docker","content":"curl -sSL https://get.docker.com | sh sudo usermod -aG docker $USER newgrp docker # Dont use sudo anymore docker run hello-world sudo systemctl enable docker.service sudo systemctl enable containerd.service  ","version":null,"tagName":"h2"},{"title":"Fix permission​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#fix-permission","content":"If you encounter any permission issue sudo chown &quot;$USER&quot;:&quot;$USER&quot; /home/&quot;$USER&quot;/.docker -R sudo chmod g+rwx &quot;$HOME/.docker&quot; -R  ","version":null,"tagName":"h3"},{"title":"Make a custom docker image​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#make-a-custom-docker-image","content":"docker pull ubuntu docker ps -a docker images docker run --name proxy_container -it ubuntu /bin/bash apt update apt install sudo htop docker commit proxy_container proxy_image docker save proxy_image proxy_image.tar  ","version":null,"tagName":"h3"},{"title":"Ajenti 2​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#ajenti-2","content":"curl https://raw.githubusercontent.com/ajenti/ajenti/master/scripts/install.sh | sudo bash -s - sudo systemctl enable ajenti.service sudo systemctl start ajenti.service sudo tail -f /var/log/ajenti/ajenti.log  Open http://192.168.1.136:8000 and login with root and password ","version":null,"tagName":"h2"},{"title":"Nekoray​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#nekoray","content":"# https://github.com/MatsuriDayo/nekoray/blob/main/docs/Build_Linux.md git clone https://github.com/MatsuriDayo/nekoray.git --recursive cd nekoray ./libs/build_deps_all.sh mkdir build cd build cmake -GNinja .. ninja  Install Traffic Widget, Cron, Date And Time and Network plugins ","version":null,"tagName":"h2"},{"title":"NodeJs​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#nodejs","content":"curl -fsSL https://deb.nodesource.com/setup_18.x | sudo bash - sudo apt-get install -y nodejs  ","version":null,"tagName":"h2"},{"title":"Whisper​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#whisper","content":"git clone https://github.com/ggerganov/whisper.cpp.git cd whisper.cpp # git checkout reaspberry bash ./models/download-ggml-model.sh base.en bash ./models/download-ggml-model.sh small make make stream make base ./main -f samples/jfk.wav --print-colors # ffmpeg -i input.mp3 -ar 16000 -ac 1 -c:a pcm_s16le output.wav  ","version":null,"tagName":"h2"},{"title":"Install Latest Python​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#install-latest-python","content":"# https://www.python.org/downloads/ mkdir python3.10 cd python3.10 wget https://www.python.org/ftp/python/3.10.10/Python-3.10.10.tar.xz tar xvf Python-3.10.10.tar.xz rm Python-3.10.10.tar.xz cd Python-3.10.10 ./configure --enable-optimizations --with-ensurepip=install make -j 8 sudo make altinstall sudo make install sudo rm /usr/bin/python sudo rm /usr/bin/python3 sudo ln -s /usr/local/bin/python3.10 /usr/bin/python sudo ln -s /usr/local/bin/python3.10 /usr/bin/python3  ","version":null,"tagName":"h2"},{"title":"AUTOMATIC1111 Stable diffusion webui​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#automatic1111-stable-diffusion-webui","content":"# bash &lt;(wget -qO- https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh) git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git cd stable-diffusion-webui rm -r venv/ pip cache purge rm -r ~/.cache/pip/ git pull ./webui.sh  ","version":null,"tagName":"h2"},{"title":"chroot​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#chroot","content":"To fix bootloader, kernel and other issues ","version":null,"tagName":"h2"},{"title":"mount​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#mount","content":"mkdir /media/rootfs mount /dev/sdb2 /media/rootfs mount /dev/sdb1 /media/rootfs/boot cp /usr/bin/qemu-arm-static /media/rootfs mount -o bind /dev /media/rootfs/dev/ mount -o bind /proc/ /media/rootfs/proc/ mount -o bind /sys/ /media/rootfs/sys/ mount -o bind /dev/pts/ /media/rootfs/dev/pts/ chroot /media/rootfs/ export LANGUAGE=en_US.UTF-8 export LANG=en_US.UTF-8 export LC_ALL=en_US.UTF-8 sudo dpkg-reconfigure locales apt remove apt-listchanges apt update apt full-upgrade apt install --reinstall raspberrypi-bootloader raspberrypi-kernel raspberrypi-kernel-headers  ","version":null,"tagName":"h3"},{"title":"umount​","type":1,"pageTitle":"Raspberry pi","url":"/Wisdom-Hub/raspberry pi#umount","content":"umount /media/rootfs/dev/pts umount /media/rootfs/proc/ umount /media/rootfs/sys/ umount /media/rootfs/boot umount /media/rootfs/dev/ umount /media/rootfs/  ","version":null,"tagName":"h3"},{"title":"Network Tips","type":0,"sectionRef":"#","url":"/Wisdom-Hub/network/network tips","content":"","keywords":"","version":null},{"title":"Disable IPV6​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#disable-ipv6","content":"sudo nano /etc/sysctl.conf net.ipv6.conf.all.disable_ipv6=1 net.ipv6.conf.default.disable_ipv6=1 sudo sysctl -p  ","version":null,"tagName":"h2"},{"title":"SSH​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#ssh","content":"","version":null,"tagName":"h2"},{"title":"Script to fix ssh and restart to default config​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#script-to-fix-ssh-and-restart-to-default-config","content":"#!/bin/bash new_config=&quot; Port 22 AddressFamily any ListenAddress 0.0.0.0 SyslogFacility AUTH LogLevel INFO PermitRootLogin yes PubkeyAuthentication yes PasswordAuthentication yes UsePAM yes X11Forwarding yes Subsystem sftp /usr/lib/ssh/sftp-server MaxSessions 1000 &quot; # Backup the existing SSH server configuration sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup # Write the new configuration to the SSH server config file echo &quot;$new_config&quot; | sudo tee /etc/ssh/sshd_config &gt; /dev/null echo &quot;SSH server configuration has been replaced.&quot; sudo ufw disable sudo iptables -F sudo mv /etc/hosts.deny /etc/hosts.deny_backup sudo touch /etc/hosts.deny sudo systemctl enable sshd sudo systemctl restart sshd # User creation new_username=&quot;mlibre&quot; new_password=&quot;password&quot; sudo useradd -m -s /bin/bash &quot;$new_username&quot; echo &quot;$new_username:$new_password&quot; | sudo chpasswd # Add your public key to the new user's authorized_keys file your_public_key=&quot;your ssh public key&quot; sudo mkdir -p /home/&quot;$new_username&quot;/.ssh echo &quot;$your_public_key&quot; | sudo tee -a /home/&quot;$new_username&quot;/.ssh/authorized_keys &gt; /dev/null sudo chown -R &quot;$new_username&quot;:&quot;$new_username&quot; /home/&quot;$new_username&quot;/.ssh sudo chmod 700 /home/&quot;$new_username&quot;/.ssh sudo chmod 600 /home/&quot;$new_username&quot;/.ssh/authorized_keys echo &quot;Your public key has been added to the authorized_keys file of user $new_username.&quot; echo &quot;$new_username ALL=(ALL) NOPASSWD:ALL&quot; | sudo tee /etc/sudoers.d/&quot;$new_username&quot; &gt; /dev/null echo &quot;$new_username - maxlogins 1000&quot; | sudo tee -a /etc/security/limits.conf &gt; /dev/nulls echo &quot;fs.file-max = 65535&quot; | sudo tee -a /etc/sysctl.conf &gt; /dev/null  ","version":null,"tagName":"h3"},{"title":"Setup DNS​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#setup-dns","content":"","version":null,"tagName":"h2"},{"title":"Using resolv.conf​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#using-resolvconf","content":"sudo nano /etc/resolv.conf nameserver 1.1.1.1 nameserver 1.0.0.1 nameserver 208.67.222.222 nameserver 208.67.220.220 nameserver 8.8.8.8 nameserver 8.8.4.4 # echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf  sudo systemctl enable resolvconf sudo nano /etc/resolvconf/resolv.conf.d/head sudo nano /etc/resolvconf/resolv.conf.d/base nameserver 1.1.1.1 nameserver 208.67.222.222 nameserver 208.67.220.220 nameserver 8.8.8.8  ","version":null,"tagName":"h3"},{"title":"Using systemd​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#using-systemd","content":"sudo nano /etc/systemd/resolved.conf [Resolve] DNS=1.1.1.1 208.67.222.222 208.67.220.220 8.8.8.8 sudo nano /run/systemd/resolve/stub-resolv.conf nameserver 1.1.1.1 nameserver 208.67.222.222 nameserver 208.67.220.220 nameserver 8.8.8.8 sudo systemctl enable systemd-resolved sudo systemctl restart systemd-resolved # resolvectl dns enp3s0 1.1.1.1 # resolvectl dns enp1s0f0u6 1.1.1.1 resolvectl dns  ","version":null,"tagName":"h3"},{"title":"DNS Server - dhclient​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#dns-server---dhclient","content":"sudo nano /etc/dhcp/dhclient.conf prepend domain-name-servers 208.67.222.222, 208.67.220.220, 8.8.8.8 sudo nano /etc/network/interfaces iface eth0 inet static dns-nameservers 208.67.222.222 208.67.220.220 8.8.8.8  resolvectl dns eth0 # make sure dns is set # permanent?  ","version":null,"tagName":"h3"},{"title":"Flush System Settings​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#flush-system-settings","content":"sudo killall sslocal winedevice.exe wineserver services.exe EpicGamesLaunch EpicWebHelper.e explorer.exe lutris-wrapper:; sudo killall steamwebhelper gitstatusd steam; sudo killall -9 sslocal winedevice.exe wineserver services.exe EpicGamesLaunch EpicWebHelper.e explorer.exe lutris-wrapper:; sudo killall -9 steamwebhelper gitstatusd steam; pkill -f -e -c lutris-wrapper; pkill -f -e -c lutris; pkill -f -e -c wine; pkill -f -e -c steam; pkill -f -e -c sslocal; sudo systemctl stop shadowsocks-rust-local@config; sudo systemd-resolve --flush-caches; sudo resolvectl flush-caches; sudo ip link delete tun0; sudo wg-quick down wg0; sudo systemctl daemon-reload; sudo ip route flush table main; sudo iptables --flush; sudo systemctl restart network; sudo systemctl restart NetworkManager; sudo sysctl -p; sudo systemctl restart shadowsocks-rust-local@config; sync; echo 3 &gt; /proc/sys/vm/drop_caches;  ","version":null,"tagName":"h2"},{"title":"Open an application over socks​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#open-an-application-over-socks","content":"torsocks deluge tsokcs deluge  ","version":null,"tagName":"h2"},{"title":"Setup DNS Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#setup-dns-server","content":"","version":null,"tagName":"h2"},{"title":"Using Systemd​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#using-systemd-1","content":"sudo nano /etc/systemd/resolved.conf [Resolve] DNS=1.1.1.1 9.9.9.9#dns.quad9.net 8.8.8.8 FallbackDNS=208.67.222.222 208.67.220.220 #Domains= #LLMNR=no #MulticastDNS=no DNSSEC=yes DNSOverTLS=no Cache=yes DNSStubListener=yes ReadEtcHosts=yes sudo systemctl enable systemd-resolved.service sudo systemctl restart systemd-resolved.service sudo systemctl restart NetworkManager  ","version":null,"tagName":"h3"},{"title":"Using dnsmasq​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#using-dnsmasq","content":"sudo apt install dnsmasq  ","version":null,"tagName":"h3"},{"title":"Outline Proxy Server + Jump Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#outline-proxy-server--jump-server","content":"Server: NetherLandOS: Ubuntu 22.04 ","version":null,"tagName":"h2"},{"title":"Initialization​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#initialization","content":"ssh root@51.89.88.80 passwd adduser mlibre apt update apt dist-upgrade apt install htop sudo psmisc net-tools curl ntpdate sudo apt purge snapd ufw sudo apt autoremove --purge sudo ntpdate time.nist.gov nano /etc/sudoers mlibre ALL=(ALL:ALL) NOPASSWD: ALL nano /etc/hosts 127.0.0.1 mlibre sudo systemctl disable rsyslog sudo systemctl disable apparmor.service sudo systemctl disable systemd-journald sudo systemctl disable apport-autoreport.path sudo systemctl disable apport-forward.socket # CTRL +D ssh-keygen ssh-copy-id -i ~/.ssh/id_rsa.pub mlibre@51.89.88.80 # ssh-copy-id -i ~/.ssh/id_rsa.pub -p 2138 mlibre@87.107.164.69 ssh mlibre@51.89.88.80 su ssh-keygen ssh-copy-id -i ~/.ssh/id_rsa.pub root@51.89.88.80 ## Both server and client sudo nano /etc/ssh/sshd_config PermitTunnel yes # ClientAliveInterval 300 # ClientAliveCountMax 6 TCPKeepAlive yes AllowAgentForwarding yes AllowTcpForwarding yes PermitTunnel yes GatewayPorts yes sudo systemctl daemon-reload sudo systemctl restart sshd sudo systemctl status sshd sudo nano /etc/sysctl.conf net.ipv4.ip_forward=1 net.ipv4.tcp_fastopen=3 fs.file-max = 5000000 sudo sysctl -p sudo nano /etc/resolv.conf nameserver 1.1.1.1 nameserver 208.67.222.222 nameserver 208.67.220.220 nameserver 8.8.8.8 sudo ufw allow 9090/udp sudo ufw allow 9090/tcp sudo ufw allow 9090 sudo ufw allow OpenSSH sudo ufw allow dns sudo ufw allow 5353/tcp sudo ufw allow 5353/udp sudo ufw allow 443/tcp sudo ufw allow https sudo ufw allow ssh sudo ufw allow www sudo ufw allow bootps sudo ufw disable sudo systemctl enable ufw sudo ufw enable sudo systemctl restart ufw sudo systemctl status ufw sudo ufw status  ","version":null,"tagName":"h3"},{"title":"Outline Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#outline-server","content":"Download outline manager in your local linux system https://getoutline.org/get-started/#step-1 Run and follow instructions Save the credentials ... {&quot;apiUrl&quot;:&quot;https://41.249.49.191:13108/112-XA1EFIGPw&quot;,&quot;certSha256&quot;:&quot;121&quot;} In server: open ssh, https and other ports + ports mentioned in outline manager settings: sudo ufw allow 51449 sudo ufw allow 51449/tcp sudo ufw allow 51449/udp sudo ufw allow 64920 sudo ufw allow 64920/udp sudo ufw allow 64920/tcp Open Manager Create keys Share keys # Keys are like this ss://BASE64 STRING@IP:PORT/?outline=1 You can also open keys with ShadowSocks Run BBR script ","version":null,"tagName":"h3"},{"title":"Jump server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#jump-server","content":"SSHD configs: sudo nano /etc/ssh/sshd_config AllowAgentForwarding yes AllowTcpForwarding yes TCPKeepAlive yes PermitTunnel yes GatewayPorts yes  SysCtl Settings: sudo nano /etc/sysctl.conf net.ipv4.tcp_fastopen=3 net.ipv4.ip_forward=1 sudo sysctl -p  BBR script With IPTables​ sudo apt install iptables-persistent sudo nano /etc/iptables/rules.v4 *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] COMMIT *nat :PREROUTING ACCEPT [18895:9137441] :INPUT ACCEPT [6852:1538364] :OUTPUT ACCEPT [31:7269] :POSTROUTING ACCEPT [31:7269] -A PREROUTING -d 87.107.164.69/32 -p udp -m udp --dport 67 -j DNAT --to-destination 46.249.49.193:443 -A PREROUTING -d 87.107.164.69/32 -p tcp -m tcp --dport 67 -j DNAT --to-destination 46.249.49.193:443 -A PREROUTING -d 87.107.164.69/32 -p udp -m udp --dport 34964 -j DNAT --to-destination 46.249.49.193:34964 -A PREROUTING -d 87.107.164.69/32 -p tcp -m tcp --dport 34964 -j DNAT --to-destination 46.249.49.193:34964 #-A PREROUTING -p tcp -m tcp --dport 64921 -j DNAT --to-destination 46.249.49.193:64920 #-A PREROUTING -p udp -m udp --dport 64921 -j DNAT --to-destination 46.249.49.193:64920 #-A PREROUTING -p tcp -m tcp --dport 22055 -j DNAT --to-destination 46.249.49.193:22054 #-A PREROUTING -p udp -m udp --dport 22055 -j DNAT --to-destination 46.249.49.193:22054 -A POSTROUTING -j MASQUERADE COMMIT sudo systemctl enable netfilter-persistent.service sudo systemctl restart netfilter-persistent.service  Using SSH Forward​ Client -&gt; A (Jump Server) -&gt; B (Outline Server) Install shadowSocks in Server BRun following commands in server A # Server A IP: 87.107.164.69 # Server A SSH Port: 2138 # Server B IP: 46.249.49.193 # Server B SSH Port: 56777 # Server B ShadowSocks/Outline ports: 64920, 56777, 51449 # ufw allow ...... ssh-copy-id -i ~/.ssh/id_rsa.pub mlibre@46.249.49.193 -p 56777 sudo ssh-copy-id -i /root/.ssh/id_rsa.pub root@46.249.49.193 -p 56777 ssh -N -L 0.0.0.0:64920:46.249.49.193:64920 mlibre@46.249.49.193 -p 56777 # APort BIP BPort BIP BSSHPort  Using socat​ sudo socat -dd TCP4-LISTEN:8000,fork TCP4:Shadowsocks-server-ip:9000 sudo socat -dd UDP-LISTEN:8000,fork UDP:Shadowsocks-server-ip:9000  Optimization​ https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks Fake Traffic script​ namizun ","version":null,"tagName":"h3"},{"title":"Client-Side​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#client-side","content":"SSHD configs: sudo nano /etc/ssh/sshd_config AllowAgentForwarding yes AllowTcpForwarding yes TCPKeepAlive yes PermitTunnel yes GatewayPorts yes  SysCtl Settings: sudo nano /etc/sysctl.conf net.ipv4.tcp_fastopen=3 net.ipv4.ip_forward=1 sudo sysctl -p  ShadowSocks Json config example ( rust )​ { &quot;servers&quot;: [ { &quot;address&quot;: &quot;87.107.164.69&quot;, // Server A IP Address &quot;port&quot;: 64920, &quot;password&quot;: &quot;password&quot;, // Extracted OUTLINE Key Information &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, // Extracted OUTLINE Key Information &quot;timeout&quot;: 86400 } ], &quot;mode&quot;:&quot;tcp_and_udp&quot;, &quot;local_port&quot;:1080, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;fast_open&quot;: true }  ShadowSocks SS URL Format​ sslocal --server-url &quot;ss://dsadsadasda@11.11.49.193:11111&quot; --local-addr &quot;127.0.0.1:1080&quot;  ","version":null,"tagName":"h3"},{"title":"OpenVpn Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#openvpn-server","content":"https://github.com/mlibre/openvpn-install curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh chmod +x openvpn-install.sh sudo ./openvpn-install.sh port: random, tcp, curreny system resolver, compression yes scp -P 2138 mlibre@87.107.164.69:/home/mlibre/mlibre.ovpn . DNS_SERVER=&quot;1.1.1.1&quot; sudo sh -c &quot;echo nameserver $DNS_SERVER &gt; /etc/resolv.conf&quot; sudo sed -i '/^\\s*#*DNS=/d' /etc/systemd/resolved.conf &amp;&amp; sudo sed -i '$ a\\DNS='&quot;$DNS_SERVER&quot; /etc/systemd/resolved.conf sudo systemctl daemon-reload; wait; sudo systemctl restart systemd-networkd; wait; sudo systemctl restart systemd-resolved; wait; sudo systemd-resolve --flush-caches sudo resolvectl flush-caches sudo resolvectl dns eth0 &quot;$DNS_SERVER&quot; sudo resolvectl dns tun0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp3s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp5s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns docker0 &quot;$DNS_SERVER&quot; sudo resolvectl dns Global: 1.1.1.1 Link 2 (enp3s0): 1.1.1.1 Link 8 (tun0): 1.1.1.1 Add these lines to your .ovpn file: socks-proxy 127.0.0.1 1080 route SHADOWSOCKS_SERVER_IP 255.255.255.255 net_gateway  ","version":null,"tagName":"h2"},{"title":"V2Ray VPN/Proxy Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#v2ray-vpnproxy-server","content":"","version":null,"tagName":"h2"},{"title":"disable ping​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#disable-ping","content":"sudo nano /etc/sysctl.conf net.ipv4.conf.icmp_echo_ignore_all = 1 sudo nano /etc/sysctl.d/sys.conf net.ipv4.conf.icmp_echo_ignore_all = 1  ","version":null,"tagName":"h3"},{"title":"Change server hostname​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#change-server-hostname","content":"vultr.com -&gt; server setting -&gt; ipv4 -&gt; reverse DNS  proxychains ssh -p port true@000.000.13.13 sudo nano /etc/cloud/cloud.cfg # preserve_hostname: true sudo nano /etc/hostname domain.ga sudo nano /etc/hosts 127.0.1.1 domain.ga sudo hostnamectl set-hostname domain.ga  ","version":null,"tagName":"h3"},{"title":"Add domain to the cloudflare​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#add-domain-to-the-cloudflare","content":"SSL/TLS: FullDisable DNSSEC, Always Use HTTPS, Automatic HTTPS RewritesEnable TLS 1.3, HTTP2/3, GRPC, WS and ... in Network/SSL tabEnable Development modeAdd a &quot;A&quot; DNS record: domain.ga, DNS only ( no proxy )Add a &quot;A&quot; DNS record: v4p.domain.ga, proxyAdd a &quot;AAAA&quot; DNS record: v6.domain.ga, proxy ( don't make dns-only for ipv6 ) ","version":null,"tagName":"h3"},{"title":"XUI Panel​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#xui-panel","content":"sudo su cd apt purge snapd apt update apt dist-upgrade apt install git sudo ufw allow 2053 sudo ufw allow 2053/udp sudo ufw allow 2053/tcp sudo ufw allow 35400 sudo ufw allow 35400/udp sudo ufw allow 35400/tcp sudo ufw allow 2087 sudo ufw allow 2087/udp sudo ufw allow 2087/tcp sudo ufw allow 2096 sudo ufw allow 2096/udp sudo ufw allow 2096/tcp sudo ufw allow 8443 sudo ufw allow 8443/udp sudo ufw allow 8443/tcp sudo ufw allow 2053 sudo ufw allow 2053/udp sudo ufw allow 2053/tcp sudo ufw allow 3678 sudo ufw allow 3678/udp sudo ufw allow 3678/tcp sudo ufw allow 2289 sudo ufw allow 2289/udp sudo ufw allow 2289/tcp sudo ufw allow 9090 sudo ufw allow 9090/udp sudo ufw allow 9090/tcp sudo ufw allow 1080 sudo ufw allow 1080/udp sudo ufw allow 1080/tcp sudo ufw allow 443 sudo ufw allow 443/tcp sudo ufw allow 443/udp sudo ufw allow 80 sudo ufw allow 80/tcp sudo ufw allow 80/udp sudo ufw allow 5353 sudo ufw allow 5353/tcp sudo ufw allow 5353/udp sudo ufw allow 53 sudo ufw allow 53/tcp sudo ufw allow 53/udp sudo ufw allow OpenSSH sudo ufw allow https sudo ufw allow ssh sudo ufw allow www sudo ufw allow bootps sudo ufw allow dns cd bash &lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh) # cat /usr/local/x-ui/bin/config.json # tar -czvf x-ui.tgz /usr/local/x-ui/ # proxychains scp -P 3612 true@199.247.13.13:x-ui.tgz . # proxychains scp -P 3612 root@199.247.13.13:cert.crt . # proxychains scp -P 3612 root@199.247.13.13:private.key . sudo su x-ui # Open ports, active firewall # install BBR # revoke certificate the root domain # issue certificate # Set Panel port 8443 # Set the certs address for panel ls acme.sh --info acme.sh --list # lsof -i :80  Open Panel (https://domain.ga:8443/xui/inbounds)trojan-tls-443-allow-insecure-alp-allvmess-ws-tls-2053-allow-insecure-aph-allvmess-h2-TLS-H2-HTTP1-allow-insecure-stackoverflow.com-80vmess-h2-TLS-H2-allow-insecure-8443vless-2096-h2-reality-no-sniffIn firefox: Check Proxy DNS when using SOCKS v5 ","version":null,"tagName":"h3"},{"title":"Nekoray​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#nekoray","content":"Nekoray Supports SS, Vmess and ....Download from https://github.com/Matsuridayo/nekoray/releases aria2c -x 10 &quot;https://github.com/MatsuriDayo/nekoray/releases/download/2.9/nekoray-2.9-2022-12-19-linux64.zip&quot; unzip nekoray-2.9-2022-12-19-linux64.zip cd nekoray ./nekoray # Settings -&gt; security -&gt; Skip TLS certificate # paste vmess setting. Address: portal.domain.ga, host: portal.domain.ga # paste vmess setting. Address: iv6.domain.ga, host: iv6.domain.ga  Open Nekoray -&gt; Routing Settings -&gt; remote DNS: localhost ","version":null,"tagName":"h3"},{"title":"ShadowSocks Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#shadowsocks-server","content":"","version":null,"tagName":"h2"},{"title":"Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#server","content":"sudo apt install shadowsocks-libev -y sudo nano /etc/shadowsocks-libev/config.json { &quot;server&quot;:[&quot;::1&quot;, &quot;0.0.0.0&quot;], &quot;mode&quot;:&quot;tcp_and_udp&quot;, &quot;server_port&quot;:9090, &quot;password&quot;:&quot;password&quot;, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;timeout&quot;:1000, &quot;nameserver&quot;:&quot;1.1.1.1&quot;, &quot;fast_open&quot;: true } sudo ufw allow 9090/udp sudo ufw allow 9090/tcp sudo ufw allow 1080/udp sudo ufw allow 1080/tcp sudo ufw allow 443 sudo systemctl enable shadowsocks-libev.service sudo systemctl restart shadowsocks-libev.service sudo journalctl -f -u shadowsocks-libev.service # Custom instance sudo nano /etc/systemd/system/direct.service [Unit] Description=Shadowsocks After=network.target StartLimitIntervalSec=30s StartLimitBurst=5 [Service] Type=simple User=mlibre Group=mlibre CapabilityBoundingSet=CAP_NET_BIND_SERVICE AmbientCapabilities=CAP_NET_BIND_SERVICE ExecStart=ss-server -c /etc/shadowsocks-libev/config.json Restart=always RestartSec=3s [Install] WantedBy=multi-user.target  ","version":null,"tagName":"h3"},{"title":"Client​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#client","content":"sudo pamac install shadowsocks-rust-bin sudo nano /etc/shadowsocks/config.json { &quot;servers&quot;: [ { &quot;address&quot;: &quot;51.89.88.80&quot;, &quot;port&quot;: 9090, &quot;password&quot;: &quot;password&quot;, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;timeout&quot;: 1000 } ], &quot;mode&quot;:&quot;tcp_and_udp&quot;, &quot;local_port&quot;:1080, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;fast_open&quot;: true, &quot;dns&quot;: &quot;1.1.1.1&quot;, &quot;remote_dns_address&quot;: &quot;8.8.8.8&quot; } # sudo systemctl disable shadowsocks-rust-local@config # sudo systemctl enable shadowsocks-rust-local@config # sudo systemctl restart shadowsocks-rust-local@config # sudo systemctl status shadowsocks-rust-local@config # journalctl -f -u shadowsocks-rust-local@config # sslocal -c /etc/shadowsocks/config.json -d # sslocal --config /etc/shadowsocks-rust/germany.json -v --outbound-bind-interface lo --tun-interface-name tun0 sudo nano /lib/systemd/system/shadowsocks-rust-local@.service [Unit] Description=Shadowsocks-rust Local Client Service for %I After=network.target StartLimitIntervalSec=30s StartLimitBurst=5 [Service] Type=simple DynamicUser=yes CapabilityBoundingSet=CAP_NET_BIND_SERVICE AmbientCapabilities=CAP_NET_BIND_SERVICE ExecStart=/usr/bin/sslocal --log-without-time -c /etc/shadowsocks/config.json Restart=always RestartSec=3s [Install] WantedBy=multi-user.target ## Firefox socks host: 127.0.0.1 socks port: 1080 enable dns over proxy sudo resolvectl dns enp3s0 1.1.1.1 echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf  ","version":null,"tagName":"h3"},{"title":"WireGuard VPN Server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#wireguard-vpn-server","content":"sudo pacman -Syyuu wireguard extra/wireguard-tools resolvconf sudo apt update apt-get purge nftables sudo apt dist-upgrade sudo apt install htop sudo wireguard wireguard-tools resolvconf iptables update-alternatives --set iptables /usr/sbin/iptables-legacy  ","version":null,"tagName":"h2"},{"title":"Server Configuration​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#server-configuration","content":"https://github.com/angristan/wireguard-install curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh chmod +x wireguard-install.sh sudo ./wireguard-install.sh  ","version":null,"tagName":"h3"},{"title":"Peer Configuration​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#peer-configuration","content":"resolvectl dns sudo resolvectl dns enp3s0 10.8.0.1 # sudo resolvectl dns enp3s0 208.67.222.222 # ON THE CLIENT sudo wg-quick up wg0 sudo wg-quick down wg0  ip route list default # Copy Device Name: eth0 ip -brief address show eth0 # Copy The server public ip  # https://github.com/mlibre/wireguard-install  sudo systemctl stop wg-quick@wg0.service sudo systemctl disable wg-quick@wg0.service sudo systemctl enable wg-quick@wg0.service sudo systemctl start wg-quick@wg0.service sudo systemctl status wg-quick@wg0.service sudo wg # sudo wg-quick down wg0 # sudo systemctl daemon-reload  ","version":null,"tagName":"h3"},{"title":"Redirecting the whole network traffic​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#redirecting-the-whole-network-traffic","content":"sudo ip route add 192.168.1.0/24 dev ppp0 # ppp0: vpn name # 192.168.1.0: IP range  ","version":null,"tagName":"h2"},{"title":"Proxy udp traffic from ssh​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#proxy-udp-traffic-from-ssh","content":"https://superuser.com/questions/53103/udp-traffic-through-ssh-tunnel ","version":null,"tagName":"h2"},{"title":"Free VPNs​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#free-vpns","content":"","version":null,"tagName":"h2"},{"title":"VPNBook​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#vpnbook","content":"Download OpenVpn file: https://www.vpnbook.com/freevpnImport in NetworkMangerEnter username and password from here: https://www.vpnbook.com/freevpn ","version":null,"tagName":"h3"},{"title":"Protonvpn​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#protonvpn","content":"Install​ sudo systemctl stop firewalld.service yay --noprovides --answerdiff None --answerclean None --mflags &quot;--noconfirm&quot; -S protonvpn # proxychains yay --noprovides --answerdiff None --answerclean None --mflags &quot;--noconfirm&quot; -S protonvpn protonvpn # proxychain protonvpn  OpenVpn​ Download openVpn config file form here: https://account.protonvpn.com/downloadsCopy openVPn credentials: https://account.protonvpn.com/accountNetwork Manager: New -&gt; Import OpenVpn Saved Configuration. Paste credentials WireGuard​ sudo pacman -R firewalld sudo ufw disable sudo nano /etc/sysctl.conf # add: net.ipv4.ip_forward=1 # net.ipv6.conf.all.forwarding=1 sudo sysctl -p sudo pacman -S extra/wireguard-tools # yay -S qomui # https://account.protonvpn.com/downloads#wireguard-configuration sudo nano /etc/wireguard/wg0.conf # past resolvectl dns sudo resolvectl dns enp3s0 10.2.0.1 # ip addr:(enp3s0). resolvectl dnsglobal:(10.2.0.1). can be added in POSTup wirgurd conf sudo wg-quick up wg0 sudo wg-quick down wg0 sudo wg  ","version":null,"tagName":"h3"},{"title":"Hide.me​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#hideme","content":"sudo systemctl stop firewalld.service curl -L https://hide.me/download/linux-amd64 | tar -xJ &amp;&amp; sudo ./install.sh # Extend free trail # https://member.hide.me/en/ proxychains sudo ./hide.me token free-unlimited.hideservers.net proxychains sudo ./hide.me connect free-unlimited.hideservers.net  ","version":null,"tagName":"h3"},{"title":"Windscribe​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#windscribe","content":"sudo systemctl stop firewalld.service yay -S aur/windscribe-bin # proxychains yay -S aur/windscribe-bin  ","version":null,"tagName":"h3"},{"title":"Warp​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#warp","content":"pamac insatll cloudflare-warp-bin sudo nano /etc/systemd/resolved.conf ResolveUnicastSingleLabel=yes sudo systemctl restart systemd-resolved.service sudo systemctl restart warp-svc.service sudo systemctl enable warp-svc.service warp-cli set-families-mode off warp-cli delete warp-cli register warp-cli disconnect warp-cli connect warp-cli status warp-cli settings warp-cli set-mode --help warp-cli set-mode warp warp-cli set-mode doh warp-cli set-mode warp+doh warp-cli set-mode proxy warp-cli set-proxy-port 4040 # Set the listening port for WARP proxy (127.0.0.1:{port}) warp-cli -vvv -l connect warp-cli -l status warp-cli enable-dns-log warp-cli -l enable-dns-log journalctl -xeu warp-svc.service journalctl -u systemd-resolved -f warp-diag proxychains midori  ","version":null,"tagName":"h3"},{"title":"Set System-wide DNS​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#set-system-wide-dns","content":"","version":null,"tagName":"h2"},{"title":"Shekan DNS​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#shekan-dns","content":"# resolvectl query identitytoolkit.googleapis.com DNS_SERVER=&quot;178.22.122.100&quot; sudo sh -c &quot;echo nameserver $DNS_SERVER &gt; /etc/resolv.conf&quot; sudo sed -i '/^\\s*#*DNS=/d' /etc/systemd/resolved.conf &amp;&amp; sudo sed -i '$ a\\DNS='&quot;$DNS_SERVER&quot; /etc/systemd/resolved.conf sudo systemctl daemon-reload; wait; sudo systemctl restart systemd-networkd; wait; sudo systemctl restart systemd-resolved; wait; sudo systemd-resolve --flush-caches sudo resolvectl flush-caches sudo resolvectl dns eth0 &quot;$DNS_SERVER&quot; sudo resolvectl dns tun0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp3s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp5s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns docker0 &quot;$DNS_SERVER&quot; sudo resolvectl dns  ","version":null,"tagName":"h3"},{"title":"403 DNS​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#403-dns","content":"DNS_SERVER=&quot;10.202.10.102&quot; sudo sh -c &quot;echo nameserver $DNS_SERVER &gt; /etc/resolv.conf&quot; sudo sed -i '/^\\s*#*DNS=/d' /etc/systemd/resolved.conf &amp;&amp; sudo sed -i '$ a\\DNS='&quot;$DNS_SERVER&quot; /etc/systemd/resolved.conf sudo systemctl daemon-reload; wait; sudo systemctl restart systemd-networkd; wait; sudo systemctl restart systemd-resolved; wait; sudo systemd-resolve --flush-caches sudo resolvectl flush-caches sudo resolvectl dns eth0 &quot;$DNS_SERVER&quot; sudo resolvectl dns tun0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp3s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp5s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns docker0 &quot;$DNS_SERVER&quot; sudo resolvectl dns  ","version":null,"tagName":"h3"},{"title":"electrotm DNS​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#electrotm-dns","content":"DNS_SERVER=&quot;78.157.42.101&quot; sudo sh -c &quot;echo nameserver $DNS_SERVER &gt; /etc/resolv.conf&quot; sudo sed -i '/^\\s*#*DNS=/d' /etc/systemd/resolved.conf &amp;&amp; sudo sed -i '$ a\\DNS='&quot;$DNS_SERVER&quot; /etc/systemd/resolved.conf sudo systemctl daemon-reload; wait; sudo systemctl restart systemd-networkd; wait; sudo systemctl restart systemd-resolved; wait; sudo systemd-resolve --flush-caches sudo resolvectl flush-caches sudo resolvectl dns eth0 &quot;$DNS_SERVER&quot; sudo resolvectl dns tun0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp3s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp5s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns docker0 &quot;$DNS_SERVER&quot; sudo resolvectl dns  ","version":null,"tagName":"h3"},{"title":"OpenDns​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#opendns","content":"DNS_SERVER=&quot;208.67.222.222&quot; sudo sh -c &quot;echo nameserver $DNS_SERVER &gt; /etc/resolv.conf&quot; sudo sed -i '/^\\s*#*DNS=/d' /etc/systemd/resolved.conf &amp;&amp; sudo sed -i '$ a\\DNS='&quot;$DNS_SERVER&quot; /etc/systemd/resolved.conf sudo systemctl daemon-reload; wait; sudo systemctl restart systemd-networkd; wait; sudo systemctl restart systemd-resolved; wait; sudo systemd-resolve --flush-caches sudo resolvectl flush-caches sudo resolvectl dns eth0 &quot;$DNS_SERVER&quot; sudo resolvectl dns tun0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp3s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp5s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns docker0 &quot;$DNS_SERVER&quot; sudo resolvectl dns  ","version":null,"tagName":"h3"},{"title":"Global DNS​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#global-dns","content":"DNS_SERVER=&quot;1.1.1.1&quot; sudo sh -c &quot;echo nameserver $DNS_SERVER &gt; /etc/resolv.conf&quot; sudo sed -i '/^\\s*#*DNS=/d' /etc/systemd/resolved.conf &amp;&amp; sudo sed -i '$ a\\DNS='&quot;$DNS_SERVER&quot; /etc/systemd/resolved.conf sudo systemctl daemon-reload; wait; sudo systemctl restart systemd-networkd; wait; sudo systemctl restart systemd-resolved; wait; sudo systemd-resolve --flush-caches sudo resolvectl flush-caches sudo resolvectl dns eth0 &quot;$DNS_SERVER&quot; sudo resolvectl dns tun0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp3s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns enp5s0 &quot;$DNS_SERVER&quot; sudo resolvectl dns docker0 &quot;$DNS_SERVER&quot; sudo resolvectl dns  ","version":null,"tagName":"h3"},{"title":"Setting domains directly in /etc/hosts​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#setting-domains-directly-in-etchosts","content":"sudo nano /etc/hosts 10.202.10.4 securetoken.googleapis.com 50.7.87.84 identitytoolkit.googleapis.com 50.7.87.84 bard.google.com 50.7.85.222 openai.com 50.7.85.220 chat.openai.com 50.7.87.85 cdn.openai.com 188.68.52.244 www.bing.com 50.7.87.85 marketplace.visualstudio.com 50.7.85.222 auth0.openai.com 50.7.85.218 api.codium.ai  ","version":null,"tagName":"h3"},{"title":"Simple python http.server​","type":1,"pageTitle":"Network Tips","url":"/Wisdom-Hub/network/network tips#simple-python-httpserver","content":"python3 -m http.server --bind 0.0.0.0 --cgi 8000  ","version":null,"tagName":"h2"},{"title":"Vscode cheat sheet","type":0,"sectionRef":"#","url":"/Wisdom-Hub/vscode","content":"","keywords":"","version":null},{"title":"Vscode​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#vscode","content":"Palette CTRL + P Command Palette CTRL + SHIFT + P Git CloneMerge Type Checking // @ts-nocheck // @ts-check Built-in Terminal CTRL + ` Select Javascript Debug Terminal as Default Profile Extensions CTRL + SHIFT + X Closing built-in Terminal CTRL + D Find And Replace CTRL + F, CTRL + H Find And Replace Globally CTRL + SHIFT + F, CTRL + SHIFT + H Side By Side Editing CTRL + \\ Fullscreen F11 Markdown Preview CTRL + SHIFT + V Split Markdown Preview ALT + O Sidebar Toggle CTRL + B Zoom in/out the whole vscode CTRL + and CTRL - Font size CTRL + Mouse wheel Fast Scrolling ALT + Mouse wheel Folding Level 1 Alt+1  ","version":null,"tagName":"h2"},{"title":"Extensions​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#extensions","content":"Disable all the extensions by default. Use enable for workspace option in projects. bungcip.better-tomlstreetsidesoftware.code-spell-checkerdbaeumer.vscode-eslintGitHub.copilotyzhang.markdown-all-in-one Run command Create Table of Contents to insert a new table of contents. davidanson.vscode-markdownlintemmanuelbeziat.vscode-great-iconsms-vscode-remote.remote-containersms-vscode-remote.remote-sshms-vscode-remote.remote-ssh-editrangav.vscode-thunder-clientJuanBlanco.solidity ","version":null,"tagName":"h2"},{"title":"Editor Shortcuts​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#editor-shortcuts","content":"Copy an entire line (when no text is selected) CTRL + CDelete an entire line (when no text is selected) CTRL + SHIFT+KCut an entire line (when no text is selected) CTRL + XMove an entire line ALT+ARROWSSelect the current line CTRL + LInvoke IntelliSense CTRL + SPACEMultiple selections (multi-cursor) Hold ALT and selectCode Folding CTRL + Shift+[ , ]Rename Refactoring F2Navigating on Errors and Warnings F8Go to Definition F12  ","version":null,"tagName":"h2"},{"title":"Keybindings​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#keybindings","content":"[ { &quot;key&quot;: &quot;ctrl+alt+;&quot;, &quot;command&quot;: &quot;workbench.action.closeWindow&quot; }, { &quot;key&quot;: &quot;ctrl+shift+w&quot;, &quot;command&quot;: &quot;-workbench.action.closeWindow&quot; }, { &quot;key&quot;: &quot;ctrl+alt+'&quot;, &quot;command&quot;: &quot;workbench.action.closeActiveEditor&quot; }, { &quot;key&quot;: &quot;ctrl+w&quot;, &quot;command&quot;: &quot;-workbench.action.closeActiveEditor&quot; }, { &quot;key&quot;: &quot;ctrl+alt+\\\\&quot;, &quot;command&quot;: &quot;workbench.action.closeGroup&quot;, &quot;when&quot;: &quot;activeEditorGroupEmpty &amp;&amp; multipleEditorGroups&quot; }, { &quot;key&quot;: &quot;ctrl+w&quot;, &quot;command&quot;: &quot;-workbench.action.closeGroup&quot;, &quot;when&quot;: &quot;activeEditorGroupEmpty &amp;&amp; multipleEditorGroups&quot; }, { &quot;key&quot;: &quot;alt+o&quot;, &quot;command&quot;: &quot;markdown.showPreviewToSide&quot;, &quot;when&quot;: &quot;!notebookEditorFocused &amp;&amp; editorLangId == 'markdown'&quot; }, { &quot;key&quot;: &quot;ctrl+k v&quot;, &quot;command&quot;: &quot;-markdown.showPreviewToSide&quot;, &quot;when&quot;: &quot;!notebookEditorFocused &amp;&amp; editorLangId == 'markdown'&quot; }, { &quot;key&quot;: &quot;ctrl+alt+tab&quot;, &quot;command&quot;: &quot;markdown.extension.onTabKey&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus &amp;&amp; !hasOtherSuggestions &amp;&amp; !hasSnippetCompletions &amp;&amp; !inSnippetMode &amp;&amp; !suggestWidgetVisible &amp;&amp; editorLangId == 'markdown'&quot; }, { &quot;key&quot;: &quot;tab&quot;, &quot;command&quot;: &quot;-markdown.extension.onTabKey&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus &amp;&amp; !hasOtherSuggestions &amp;&amp; !hasSnippetCompletions &amp;&amp; !inSnippetMode &amp;&amp; !suggestWidgetVisible &amp;&amp; editorLangId == 'markdown'&quot; }, { &quot;key&quot;: &quot;ctrl+t ctrl+r&quot;, &quot;command&quot;: &quot;workbench.action.tasks.build&quot; }, { &quot;key&quot;: &quot;ctrl+shift+b&quot;, &quot;command&quot;: &quot;-workbench.action.tasks.build&quot; }, { &quot;key&quot;: &quot;ctrl+shift+b&quot;, &quot;command&quot;: &quot;markdown.extension.editing.toggleBold&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; editorLangId == 'markdown'&quot; }, { &quot;key&quot;: &quot;ctrl+b&quot;, &quot;command&quot;: &quot;-markdown.extension.editing.toggleBold&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; editorLangId == 'markdown'&quot; }, { &quot;key&quot;: &quot;alt+1&quot;, &quot;command&quot;: &quot;-workbench.action.openEditorAtIndex1&quot; }, { &quot;key&quot;: &quot;alt+1&quot;, &quot;command&quot;: &quot;editor.foldLevel1&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;key&quot;: &quot;ctrl+k ctrl+1&quot;, &quot;command&quot;: &quot;-editor.foldLevel1&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; } ]  ","version":null,"tagName":"h2"},{"title":"Git​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#git","content":"","version":null,"tagName":"h2"},{"title":"Vscode for merge and diff​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#vscode-for-merge-and-diff","content":"git config --global merge.tool vscode git config --global mergetool.vscode.cmd 'code --wait $MERGED' git config --global diff.tool vscode git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE' git config --global core.autocrlf true  ","version":null,"tagName":"h3"},{"title":"Git Configs​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#git-configs","content":"git config user.email m.gh@linuxmail.org git config user.name mlibre git config --global credential.helper store git config --global user.name &quot;mlibre&quot; git config --global user.email &quot;m.gh@linuxmail.org&quot; git config --global core.autocrlf input git config --global core.fileMode false git config core.autocrlf input git config core.fileMode false git add --renormalize .  ","version":null,"tagName":"h3"},{"title":"Github Actions​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#github-actions","content":"Publish A Package On the NPM Registry​ Create an NPM token: https://www.npmjs.com/settings/mlibre/tokens/Create a secret variable named NPM_TOKEN from the Github repository settings: https://github.com/mlibre/Ethereum-Smart-Contract-Deployer/settings/secrets/actions/newCreate a yml file in the repository: .github/workflows/npm.yml name: Publish on NPM registry on: push: branches: ['master'] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v2 with: node-version: 14.x registry-url: https://registry.npmjs.org/ - run: npm publish --access public env: NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}  Bundling and Committing a Node Module using Browserify​ Create a yml file in the repository: .github/workflows/browserify.yml name: Browserify Bundle on: push: branches: ['master'] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v2 with: node-version: 14.x registry-url: https://registry.npmjs.org/ # - run: npm install - run: npm install - run: npm install -g browserify - run: browserify -r ./main.js:EthereumTokens -o ./web/bundle.js - run: | git config --global user.name 'mlibre' git config --global user.email 'm.gh@linuxmail.org' git add web git commit -am &quot;Automated bundle&quot; git push  ","version":null,"tagName":"h3"},{"title":"Cleaning NPM Cache​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#cleaning-npm-cache","content":"rm -r node_modules/ npm cache clean --force sudo npm cache clean --force -g sudo pacman -R nodejs-lts-fermium npm # sudo pacman -R nodejs npm sudo rm -r ~/.npm rm -r ~/.node-gyp/ rm -r .cache/node-gyp/ sudo rm -r /usr/local/lib/node_modules/ sudo rm -r /usr/lib/node_modules/ sudo pacman -S nodejs-lts-fermium npm # sudo pacman -S nodejs npm # Restart the OS  ","version":null,"tagName":"h2"},{"title":"Settings JSON​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#settings-json","content":"{ &quot;update.mode&quot;: &quot;none&quot;, &quot;telemetry.telemetryLevel&quot;: &quot;off&quot;, &quot;workbench.iconTheme&quot;: &quot;vscode-great-icons&quot;, &quot;workbench.enableExperiments&quot;: false, &quot;window.titleBarStyle&quot;: &quot;custom&quot;, &quot;window.dialogStyle&quot;: &quot;custom&quot;, &quot;explorer.compactFolders&quot;: false, &quot;explorer.confirmDelete&quot;: false, &quot;explorer.confirmDragAndDrop&quot;: false, &quot;explorer.autoReveal&quot;: false, &quot;editor.maxTokenizationLineLength&quot;: 20000, &quot;editor.minimap.enabled&quot;: false, &quot;editor.largeFileOptimizations&quot;: false, &quot;editor.insertSpaces&quot;: false, &quot;editor.tabSize&quot;: 3, &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;, &quot;editor.fontFamily&quot;: &quot;'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback', 'Fira Code Retina'&quot;, // &quot;editor.fontFamily&quot;: &quot;Fira Code Retina&quot;, // &quot;editor.fontLigatures&quot;: true, &quot;editor.mouseWheelZoom&quot;: true, &quot;editor.inlineSuggest.enabled&quot;: true, &quot;editor.formatOnSave&quot;: true, &quot;editor.accessibilitySupport&quot;: &quot;off&quot;, &quot;editor.copyWithSyntaxHighlighting&quot;: false, &quot;git.confirmSync&quot;: false, &quot;git.pullTags&quot;: false, &quot;git.autofetch&quot;: true, &quot;git.enableSmartCommit&quot;: true, &quot;git.ignoreRebaseWarning&quot;: true, &quot;diffEditor.ignoreTrimWhitespace&quot;: false, &quot;extensions.autoCheckUpdates&quot;: false, &quot;extensions.autoUpdate&quot;: &quot;onlyEnabledExtensions&quot;, &quot;markdown.extension.tableFormatter.normalizeIndentation&quot;: true, &quot;markdown.extension.toc.unorderedList.marker&quot;: &quot;*&quot;, &quot;markdown.extension.toc.updateOnSave&quot;: false, &quot;markdown.extension.toc.levels&quot;: &quot;2..6&quot;, &quot;markdown.extension.completion.respectVscodeSearchExclude&quot;: true, &quot;markdown.extension.theming.decoration.renderCodeSpan&quot;: false, &quot;eslint.codeAction.showDocumentation&quot;: { &quot;enable&quot;: true }, &quot;eslint.format.enable&quot;: true, &quot;debug.inlineValues&quot;: &quot;on&quot;, &quot;debug.javascript.autoExpandGetters&quot;: false, &quot;debug.javascript.suggestPrettyPrinting&quot;: true, &quot;editor.cursorBlinking&quot;: &quot;phase&quot;, &quot;javascript.validate.enable&quot;: false, &quot;github.copilot.enable&quot;: { &quot;*&quot;: true, &quot;yaml&quot;: true, &quot;plaintext&quot;: true, &quot;markdown&quot;: true }, &quot;[json]&quot;: { &quot;editor.quickSuggestions&quot;: { &quot;strings&quot;: true }, &quot;editor.defaultFormatter&quot;: &quot;vscode.json-language-features&quot; }, &quot;[jsonc]&quot;: { &quot;editor.quickSuggestions&quot;: { &quot;strings&quot;: true }, &quot;editor.defaultFormatter&quot;: &quot;vscode.json-language-features&quot; }, &quot;[solidity]&quot;: { &quot;editor.defaultFormatter&quot;: &quot;JuanBlanco.solidity&quot; }, &quot;[javascript]&quot;: { &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot; }, &quot;[html]&quot;: { &quot;editor.suggest.insertMode&quot;: &quot;replace&quot;, &quot;editor.defaultFormatter&quot;: &quot;vscode.html-language-features&quot; }, &quot;[markdown]&quot;: { &quot;editor.defaultFormatter&quot;: &quot;yzhang.markdown-all-in-one&quot; }, &quot;terminal.explorerKind&quot;: &quot;integrated&quot;, &quot;terminal.integrated.smoothScrolling&quot;: true, &quot;terminal.integrated.scrollback&quot;: 10000, &quot;terminal.integrated.defaultProfile.linux&quot;: &quot;JavaScript Debug Terminal&quot;, &quot;terminal.integrated.persistentSessionScrollback&quot;: 1000, &quot;markdownlint.config&quot;: { &quot;single-h1&quot;: false }, &quot;terminal.integrated.profiles.linux&quot;: { &quot;bash&quot;: { &quot;path&quot;: &quot;bash&quot;, &quot;icon&quot;: &quot;terminal-bash&quot; }, &quot;zsh&quot;: { &quot;path&quot;: &quot;zsh&quot; }, &quot;fish&quot;: { &quot;path&quot;: &quot;fish&quot; }, &quot;tmux&quot;: { &quot;path&quot;: &quot;tmux&quot;, &quot;icon&quot;: &quot;terminal-tmux&quot; }, &quot;pwsh&quot;: { &quot;path&quot;: &quot;pwsh&quot;, &quot;icon&quot;: &quot;terminal-powershell&quot; }, &quot;JavaScript Debug Terminal&quot;: { &quot;extensionIdentifier&quot;: &quot;ms-vscode.js-debug&quot;, &quot;icon&quot;: &quot;debug&quot;, &quot;id&quot;: &quot;extension.js-debug.debugTerminal&quot;, &quot;title&quot;: &quot;JavaScript Debug Terminal&quot; }, &quot;bash (migrated)&quot;: { &quot;path&quot;: &quot;bash&quot;, &quot;args&quot;: [] }, &quot;/usr/bin/bash (migrated)&quot;: { &quot;path&quot;: &quot;/usr/bin/bash&quot;, &quot;args&quot;: [] } }, &quot;editor.unicodeHighlight.allowedCharacters&quot;: { &quot;ا&quot;: true, &quot;ه&quot;: true, &quot;‌&quot;: true, &quot;۰&quot;: true, &quot;۵&quot;: true }, &quot;cSpell.userWords&quot;: [ &quot;adduser&quot;, &quot;AGIFA&quot;, &quot;Ajenti&quot;, &quot;allman&quot;, &quot;alloc&quot;, &quot;AMDGPU&quot;, &quot;autofetch&quot;, &quot;AUTOMINE&quot;, &quot;Automount&quot;, &quot;Autostarts&quot;, &quot;Balena&quot;, &quot;bigscience&quot;, &quot;bindgen&quot;, &quot;bitcoinjs&quot;, &quot;blockcypher&quot;, &quot;bluestack&quot;, &quot;borsh&quot;, &quot;browserslist&quot;, &quot;Claimtrie&quot;, &quot;clamscan&quot;, &quot;cname&quot;, &quot;coinjoin&quot;, &quot;commandline&quot;, &quot;coreutils&quot;, &quot;corsdomain&quot;, &quot;Datahub&quot;, &quot;dbaeumer&quot;, &quot;difftool&quot;, &quot;Doomslug&quot;, &quot;Dota&quot;, &quot;Eleuther&quot;, &quot;fileupload&quot;, &quot;Fira&quot;, &quot;Fullscreen&quot;, &quot;Genymotoin&quot;, &quot;geoip&quot;, &quot;getblock&quot;, &quot;getfunding&quot;, &quot;goodchain&quot;, &quot;Grammarly&quot;, &quot;hashex&quot;, &quot;hdwallet&quot;, &quot;healight&quot;, &quot;heartpulse&quot;, &quot;inputrc&quot;, &quot;IPFS&quot;, &quot;JOSN&quot;, &quot;journaling&quot;, &quot;jshashes&quot;, &quot;keras&quot;, &quot;killall&quot;, &quot;LBRY&quot;, &quot;lbrynet&quot;, &quot;linebreak&quot;, &quot;liveshare&quot;, &quot;lutris&quot;, &quot;mainchain&quot;, &quot;maticjs&quot;, &quot;maticnetwork&quot;, &quot;mergetool&quot;, &quot;Merkle&quot;, &quot;metacoin&quot;, &quot;mforgood&quot;, &quot;mkdir&quot;, &quot;MLBR&quot;, &quot;mlibre&quot;, &quot;monero&quot;, &quot;monospace&quot;, &quot;mystate&quot;, &quot;nameserver&quot;, &quot;neardev&quot;, &quot;Nekoray&quot;, &quot;newbot&quot;, &quot;nltk&quot;, &quot;nocheck&quot;, &quot;NTFS&quot;, &quot;optim&quot;, &quot;pacman&quot;, &quot;pamac&quot;, &quot;paren&quot;, &quot;parens&quot;, &quot;preprocess&quot;, &quot;prestart&quot;, &quot;Pretrained&quot;, &quot;Protonvpn&quot;, &quot;proxychains&quot;, &quot;pwsh&quot;, &quot;Radeon&quot;, &quot;redlist&quot;, &quot;Reiner&quot;, &quot;reposted&quot;, &quot;resolv&quot;, &quot;resolvectl&quot;, &quot;rpcapi&quot;, &quot;rpccorsdomain&quot;, &quot;rustup&quot;, &quot;scrollback&quot;, &quot;sharded&quot;, &quot;signup&quot;, &quot;sklearn&quot;, &quot;skynet&quot;, &quot;solcjs&quot;, &quot;sshuttle&quot;, &quot;Stretchly&quot;, &quot;struct&quot;, &quot;stylesheet&quot;, &quot;subaccounts&quot;, &quot;Swapfile&quot;, &quot;swapon&quot;, &quot;syncmode&quot;, &quot;Syyuu&quot;, &quot;Thresholded&quot;, &quot;tmpfs&quot;, &quot;TOKENNAME&quot;, &quot;torsocks&quot;, &quot;Tradingview&quot;, &quot;TWRP&quot;, &quot;txid&quot;, &quot;txpool&quot;, &quot;unstake&quot;, &quot;usermod&quot;, &quot;UTXO&quot;, &quot;UTXOs&quot;, &quot;Vulkan&quot;, &quot;Windscribe&quot;, &quot;xrandr&quot;, &quot;yocto&quot; ], &quot;search.useIgnoreFiles&quot;: false, &quot;search.exclude&quot;: { &quot;**/docs/*/**&quot;: true, &quot;**/logs/**&quot;: true, &quot;**/logs/*/**&quot;: true, &quot;**/node_modules/*/**&quot;: true, &quot;**/.git&quot;: true }, &quot;editor.parameterHints.enabled&quot;: true, &quot;breadcrumbs.enabled&quot;: false, &quot;workbench.layoutControl.type&quot;: &quot;menu&quot;, &quot;workbench.layoutControl.enabled&quot;: false, &quot;workbench.list.smoothScrolling&quot;: true, &quot;editor.smoothScrolling&quot;: true, &quot;editor.cursorSmoothCaretAnimation&quot;: &quot;on&quot;, &quot;editor.stickyScroll.enabled&quot;: true, &quot;mergeEditor.diffAlgorithm&quot;: &quot;experimental&quot;, &quot;window.zoomLevel&quot;: 1, &quot;files.associations&quot;: { &quot;*.js&quot;: &quot;javascript&quot; }, &quot;security.workspace.trust.untrustedFiles&quot;: &quot;open&quot;, &quot;http.proxyStrictSSL&quot;: false, &quot;editor.unicodeHighlight.ambiguousCharacters&quot;: false, &quot;files.exclude&quot;: { &quot;**/__pycache__&quot;: true }, &quot;cSpell.diagnosticLevel&quot;: &quot;Hint&quot;, &quot;cSpell.showStatus&quot;: false, &quot;cody.serverEndpoint&quot;: &quot;https://sourcegraph.com/&quot;, &quot;cody.experimental.inline&quot;: true }  ","version":null,"tagName":"h2"},{"title":"Eslint Configuration​","type":1,"pageTitle":"Vscode cheat sheet","url":"/Wisdom-Hub/vscode#eslint-configuration","content":"module.exports = { &quot;env&quot;: { &quot;commonjs&quot;: true, &quot;node&quot;: true, &quot;mocha&quot;: true }, &quot;extends&quot;: [ &quot;eslint:recommended&quot;, &quot;plugin:node/recommended&quot; ], &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 13, &quot;impliedStrict&quot;: true }, &quot;rules&quot;: { &quot;no-trailing-spaces&quot;: &quot;error&quot;, &quot;linebreak-style&quot;: [ &quot;error&quot;, &quot;unix&quot; ], &quot;quotes&quot;: [ &quot;error&quot;, &quot;double&quot; ], &quot;one-var&quot;: [ &quot;error&quot;, &quot;never&quot; ], &quot;brace-style&quot;: [ &quot;error&quot;, &quot;allman&quot;, { &quot;allowSingleLine&quot;: true } ], &quot;space-before-blocks&quot;: [ &quot;warn&quot; ], &quot;func-call-spacing&quot;: [ &quot;error&quot;, &quot;never&quot; ], &quot;space-before-function-paren&quot;: [ &quot;error&quot;, &quot;always&quot; ], &quot;space-in-parens&quot;: [ &quot;error&quot;, &quot;always&quot;, { &quot;exceptions&quot;: [ &quot;{}&quot; ] } ], &quot;keyword-spacing&quot;: [ &quot;error&quot; ], &quot;comma-spacing&quot;: [ &quot;error&quot; ], &quot;space-unary-ops&quot;: [ &quot;error&quot; ], &quot;block-spacing&quot;: [ &quot;error&quot; ], &quot;arrow-spacing&quot;: [ &quot;error&quot; ], &quot;key-spacing&quot;: [ &quot;error&quot; ], &quot;comma-style&quot;: [ &quot;error&quot; ], &quot;space-infix-ops&quot;: [ &quot;error&quot; ], &quot;array-bracket-spacing&quot;: [ &quot;error&quot;, &quot;always&quot; ], &quot;object-curly-spacing&quot;: [ &quot;error&quot;, &quot;always&quot; ], &quot;no-multi-spaces&quot;: [ &quot;error&quot; ], &quot;operator-linebreak&quot;: [ &quot;error&quot;, &quot;after&quot; ], &quot;function-paren-newline&quot;: [ &quot;warn&quot; ], // &quot;arrow-parens&quot;: [ // &quot;error&quot;, // &quot;always&quot; // ], &quot;arrow-body-style&quot;: [ &quot;error&quot;, &quot;always&quot; ], &quot;no-template-curly-in-string&quot;: [ &quot;error&quot; ], &quot;prefer-const&quot;: [ &quot;error&quot;, { &quot;destructuring&quot;: &quot;any&quot;, &quot;ignoreReadBeforeAssign&quot;: false } ], &quot;no-new-object&quot;: [ &quot;error&quot; ], &quot;no-extra-parens&quot;: [ &quot;error&quot;, &quot;all&quot;, { &quot;conditionalAssign&quot;: false } ], &quot;no-empty-function&quot;: [ &quot;error&quot; ], &quot;no-empty&quot;: [ &quot;warn&quot;, { &quot;allowEmptyCatch&quot;: true } ], &quot;no-eq-null&quot;: [ &quot;error&quot; ], &quot;no-extra-bind&quot;: [ &quot;error&quot; ], &quot;no-self-compare&quot;: [ &quot;error&quot; ], &quot;no-useless-call&quot;: [ &quot;error&quot; ], &quot;no-undefined&quot;: [ &quot;error&quot; ], &quot;no-undef&quot;: [ &quot;warn&quot; ], &quot;no-array-constructor&quot;: [ &quot;error&quot; ], &quot;prefer-destructuring&quot;: [ &quot;error&quot;, { &quot;VariableDeclarator&quot;: { &quot;array&quot;: true, &quot;object&quot;: true }, &quot;AssignmentExpression&quot;: { &quot;array&quot;: false, &quot;object&quot;: false } }, { &quot;enforceForRenamedProperties&quot;: false } ], &quot;object-shorthand&quot;: [ &quot;warn&quot; ], &quot;prefer-spread&quot;: [ &quot;warn&quot; ], &quot;prefer-template&quot;: [ &quot;warn&quot; ], &quot;no-loop-func&quot;: [ &quot;warn&quot; ], &quot;prefer-rest-params&quot;: [ &quot;warn&quot; ], &quot;no-new-func&quot;: [ &quot;warn&quot; ], &quot;no-unneeded-ternary&quot;: [ &quot;warn&quot; ], &quot;no-process-exit&quot;: &quot;off&quot;, &quot;require-await&quot;: &quot;warn&quot;, &quot;indent&quot;: [ &quot;error&quot;, &quot;tab&quot;, { &quot;MemberExpression&quot;: 0 } ], &quot;no-tabs&quot;: 0, &quot;node/no-unpublished-import&quot;: &quot;off&quot;, &quot;node/no-unpublished-require&quot;: &quot;off&quot;, &quot;node/no-missing-import&quot;: &quot;off&quot;, &quot;node/no-unsupported-features/es-syntax&quot;: &quot;off&quot;, } }  ","version":null,"tagName":"h2"}]